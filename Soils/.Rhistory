SDWA$EfferScale <- colnames(SEfferScale)[apply(SEfferScale,1,which.max)]
}
MaxClay <- ddply( H2, 'id', summarize, MaxClay = max(ClayPercent, na.rm = T))
MaxSand <- ddply(H2, 'id', summarize, MaxSand = max(SandPercent, na.rm = T))
MaxpH <- ddply(H2, 'id', summarize, MaxpH = max(pH, na.rm = T))
MaxDryValue <- ddply(H2, 'id', summarize, MaxDryValue = max(DryValue, na.rm = T))
MaxAWHC <- ddply( H2, 'id', summarize, MaxAWHC = max(AWHC, na.rm = T))
MaxEffervescence <- ddply( H2, 'id', summarize, MaxEffervescence = max(EfferScale, na.rm = T))
Max <- join(MaxClay, MaxSand, by = 'id', type = 'inner')
Max <- join(Max, MaxpH, by = 'id', type = 'inner')
Max <- join(Max, MaxDryValue, by = 'id', type = 'inner')
Max <- join(Max, MaxAWHC, by = 'id', type = 'inner')
Max <- join(Max, MaxEffervescence, by = 'id', type = 'inner')
is.na(Max) <- sapply(Max, is.infinite) # replace inf- with NA
#Now calculate depth weighted averages of each continuous variable, then append these to the other variables.
#Convert to SoilProfileCollection
data <- read.csv("F:/Soils/SoilDataAprilUSGSnotremoved.csv", header = T)
depths(data) <- id ~ top + bottom
# # within each profile, compute weighted means, over the intervals: 0-25,0-50,0-100,0-150,0-200 removing NA if present
# d25 <- slab(data, id ~ AWHC, slab.structure = c(0,25), slab.fun = mean, na.rm=TRUE)
# d50 <- slab(data, id ~ AWHC, slab.structure = c(0,50), slab.fun = mean, na.rm=TRUE)
# d100 <- slab(data, id ~ AWHC, slab.structure = c(0,100), slab.fun = mean, na.rm=TRUE)
# d150 <- slab(data, id ~ AWHC, slab.structure = c(0,150), slab.fun = mean, na.rm=TRUE)
# d200 <- slab(data, id ~ AWHC, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
#
#
# s50 <- slab(data, id ~ AWHC, slab.structure = c(25,50), slab.fun = mean, na.rm=TRUE)
# s100 <- slab(data, id ~ AWHC, slab.structure = c(50,100), slab.fun = mean, na.rm=TRUE)
# s150 <- slab(data, id ~ AWHC, slab.structure = c(100,150), slab.fun = mean, na.rm=TRUE)
# s200 <- slab(data, id ~ AWHC, slab.structure = c(150,200), slab.fun = mean, na.rm=TRUE)
#
#
# # reshape to wide format, remove unneeded variables and rename.
# AWC.0.25 <- dcast(d25, id + top + bottom ~ variable, value.var = 'value')
# AWC.0.25 <- AWC.0.25[,-c(2,3)]
# names(AWC.0.25)[2] <- 'AWC.0.25'
#
# AWC.0.50 <- dcast(d50, id + top + bottom ~ variable, value.var = 'value')
# AWC.0.50 <- AWC.0.50[,-c(2,3)]
# names(AWC.0.50)[2] <- 'AWC.0.50'
#
# AWC.0.100 <- dcast(d100, id + top + bottom ~ variable, value.var = 'value')
# AWC.0.100 <- AWC.0.100[,-c(2,3)]
# names(AWC.0.100)[2] <- 'AWC.0.100'
#
# AWC.0.150 <- dcast(d150, id + top + bottom ~ variable, value.var = 'value')
# AWC.0.150 <- AWC.0.150[,-c(2,3)]
# names(AWC.0.150)[2] <- 'AWC.0.150'
#
# AWC.0.200 <- dcast(d200, id + top + bottom ~ variable, value.var = 'value')
# AWC.0.200 <- AWC.0.200[,-c(2,3)]
# names(AWC.0.200)[2] <- 'AWC.0.200'
#
# AWC.25.50 <- dcast(s50, id + top + bottom ~ variable, value.var = 'value')
# AWC.25.50 <- AWC.25.50[,-c(2,3)]
# names(AWC.25.50)[2] <- 'AWC.25.50'
#
# AWC.50.100 <- dcast(s100, id + top + bottom ~ variable, value.var = 'value')
# AWC.50.100 <- AWC.50.100[,-c(2,3)]
# names(AWC.50.100)[2] <- 'AWC.50.100'
#
# AWC.100.150 <- dcast(s150, id + top + bottom ~ variable, value.var = 'value')
# AWC.100.150 <- AWC.100.150[,-c(2,3)]
# names(AWC.100.150)[2] <- 'AWC.100.150'
#
# AWC.150.200 <- dcast(s200, id + top + bottom ~ variable, value.var = 'value')
# AWC.150.200 <- AWC.150.200[,-c(2,3)]
# names(AWC.150.200)[2] <- 'AWC.150.200'
# within each profile, compute weighted means, removing NA if present
dwaclay <- slab(data, id ~ ClayPercent, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
dwasand <- slab(data, id ~ SandPercent, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
dwapH <- slab(data, id ~ pH, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
dwaawhc <- slab(data, id ~ AWHC, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
# reshape to wide format, remove unneeded variables and rename.
DWAClay <- dcast(dwaclay, id + top + bottom ~ variable, value.var = 'value')
DWAClay <- DWAClay[,-c(2,3)]
names(DWAClay)[2] <- 'DWAClay'
DWASand <- dcast(dwasand, id + top + bottom ~ variable, value.var = 'value')
DWASand <- DWASand[,-c(2,3)]
names(DWASand)[2] <- 'DWASand'
DWApH <- dcast(dwapH, id + top + bottom ~ variable, value.var = 'value')
DWApH <- DWApH[,-c(2,3)]
names(DWApH)[2] <- 'DWApH'
DWA.AWHC <- dcast(dwaawhc, id + top + bottom ~ variable, value.var = 'value')
DWA.AWHC <- DWA.AWHC[,-c(2,3)]
names(DWA.AWHC)[2] <- 'DWA.AWHC'
# Pull out value at 50cm to compare to Max
clay50 <- slab(data, id ~ ClayPercent, slab.structure = c(50,51), slab.fun = mean, na.rm=TRUE)
sand50 <- slab(data, id ~ SandPercent, slab.structure = c(50,51), slab.fun = mean, na.rm=TRUE)
pH50 <- slab(data, id ~ pH, slab.structure = c(50,51), slab.fun = mean, na.rm=TRUE)
awhc50 <- slab(data, id ~ AWHC, slab.structure = c(50,51), slab.fun = mean, na.rm=TRUE)
efferscale50 <- slab(data, id ~ EfferScale, slab.structure = c(50,51), slab.fun = mean, na.rm=TRUE)
dryvalue50 <- slab(data, id ~ DryValue, slab.structure = c(50,51), slab.fun = mean, na.rm=TRUE)
Clay.50 <- dcast(clay50, id + top + bottom ~ variable, value.var = 'value')
Clay.50 <- Clay.50[,-c(2,3)]
names(Clay.50)[2] <- 'Clay.50'
Sand.50 <- dcast(sand50, id + top + bottom ~ variable, value.var = 'value')
Sand.50 <- Sand.50[,-c(2,3)]
names(Sand.50)[2] <- 'Sand.50'
pH.50 <- dcast(pH50, id + top + bottom ~ variable, value.var = 'value')
pH.50 <- pH.50[,-c(2,3)]
names(pH.50)[2] <- 'pH.50'
AWHC.50 <- dcast(awhc50, id + top + bottom ~ variable, value.var = 'value')
AWHC.50 <- AWHC.50[,-c(2,3)]
names(AWHC.50)[2] <- 'AWHC.50'
EfferScale.50 <- dcast(efferscale50, id + top + bottom ~ variable, value.var = 'value')
EfferScale.50 <- EfferScale.50[,-c(2,3)]
names(EfferScale.50)[2] <- 'EfferScale.50'
DryValue.50 <- dcast(dryvalue50, id + top + bottom ~ variable, value.var = 'value')
DryValue.50 <- DryValue.50[,-c(2,3)]
names(DryValue.50)[2] <- 'DryValue.50'
# #Now calculate depth weighted averages of H2
# #Convert to SoilProfileCollection
# Sub <- H2
# depths(Sub) <- id ~ top + bottom
#
# # within each profile, compute weighted means, removing NA if present
# subdwaclay <- slab(Sub, id ~ ClayPercent, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
# subdwasand <- slab(Sub, id ~ SandPercent, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
# subdwapH <- slab(Sub, id ~ pH, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
# subawhc <- slab(Sub, id ~ AWHC, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
#
# # reshape to wide format, remove unneeded variables and rename.
# SubDWAClay <- dcast(subdwaclay, id + top + bottom ~ variable, value.var = 'value')
# SubDWAClay <- SubDWAClay[,-c(2,3)]
# names(SubDWAClay)[2] <- 'SubDWAClay'
#
# SubDWASand <- dcast(subdwasand, id + top + bottom ~ variable, value.var = 'value')
# SubDWASand <- SubDWASand[,-c(2,3)]
# names(SubDWASand)[2] <- 'SubDWASand'
#
# SubDWApH <- dcast(subdwapH, id + top + bottom ~ variable, value.var = 'value')
# SubDWApH <- SubDWApH[,-c(2,3)]
# names(SubDWApH)[2] <- 'SubDWApH'
#
# SubAWC <- dcast(subawhc, id + top + bottom ~ variable, value.var = 'value')
# SubAWC <- SubAWC[,-c(2,3)]
# names(SubAWC)[2] <- 'SubAWC'
# slabs <- join(AWC.0.25, AWC.0.50, by = 'id', type = 'inner')
# slabs <- join(slabs, AWC.0.100, by = 'id', type = 'inner')
# slabs <- join(slabs, AWC.0.150, by = 'id', type = 'inner')
# slabs <- join(slabs, AWC.0.200, by = 'id', type = 'inner')
# slabs <- join(slabs, AWC.25.50, by = 'id', type = 'inner')
# slabs <- join(slabs, AWC.50.100, by = 'id', type = 'inner')
# slabs <- join(slabs, AWC.100.150, by = 'id', type = 'inner')
# slabs <- join(slabs, AWC.150.200, by = 'id', type = 'inner')
slabs <- join(DWAClay, DWASand, by = 'id', type = 'inner')
slabs <- join(slabs, DWApH, by = 'id', type = 'inner')
slabs <- join(slabs, DWA.AWHC, by = 'id', type = 'inner')
# slabs <- join(slabs, SubDWAClay, by = 'id', type = 'inner')
# slabs <- join(slabs, SubDWASand, by = 'id', type = 'inner')
# slabs <- join(slabs, SubDWApH, by = 'id', type = 'inner')
# slabs <- join(slabs, SubAWC, by = 'id', type = 'inner')
which(grepl("NaN", Sand.50$Sand.50)) # Tells you the rows it occurs at
# fix 37 occurences where depth was less than 50
Clay.50[c(1),2]=2
Clay.50[c(86,135),2]=3
Clay.50[c(32),2]=4
Clay.50[c(29,63,67,95,97,100,103,104,111,118,132,134),2]=5
Clay.50[c(7,11),2]=6
Clay.50[c(84,115,120,126,131),2]=7
Clay.50[c(9,26,35,55),2]=8
Clay.50[c(8,10,20,34,47,110),2]=10
Clay.50[c(18,62,130),2]=15
Clay.50[c(14),2]=18
Sand.50[1,2]=dat$SandPercent[446]
Sand.50[7,2]=dat$SandPercent[501]
Sand.50[8,2]=dat$SandPercent[506]
Sand.50[9,2]=dat$SandPercent[509]
Sand.50[10,2]=dat$SandPercent[513]
Sand.50[11,2]=dat$SandPercent[515]
Sand.50[14,2]=dat$SandPercent[527]
Sand.50[18,2]=dat$SandPercent[549]
Sand.50[20,2]=dat$SandPercent[556]
Sand.50[26,2]=dat$SandPercent[575]
Sand.50[29,2]=dat$SandPercent[587]
Sand.50[32,2]=dat$SandPercent[598]
Sand.50[34,2]=dat$SandPercent[605]
Sand.50[35,2]=dat$SandPercent[458]
Sand.50[47,2]=dat$SandPercent[653]
Sand.50[55,2]=dat$SandPercent[472]
Sand.50[62,2]=dat$SandPercent[480]
Sand.50[63,2]=dat$SandPercent[710]
Sand.50[67,2]=dat$SandPercent[52]
Sand.50[84,2]=dat$SandPercent[92]
Sand.50[86,2]=dat$SandPercent[147]
Sand.50[95,2]=dat$SandPercent[148]
Sand.50[97,2]=dat$SandPercent[150]
Sand.50[100,2]=dat$SandPercent[163]
Sand.50[103,2]=dat$SandPercent[173]
Sand.50[104,2]=dat$SandPercent[182]
Sand.50[110,2]=dat$SandPercent[205]
Sand.50[111,2]=dat$SandPercent[210]
Sand.50[115,2]=dat$SandPercent[222]
Sand.50[118,2]=dat$SandPercent[239]
Sand.50[120,2]=dat$SandPercent[251]
Sand.50[126,2]=dat$SandPercent[275]
Sand.50[130,2]=dat$SandPercent[294]
Sand.50[131,2]=dat$SandPercent[297]
Sand.50[132,2]=dat$SandPercent[299]
Sand.50[134,2]=dat$SandPercent[305]
Sand.50[135,2]=dat$SandPercent[309]
DryValue.50[1,2]=dat$DryValue[446]
DryValue.50[7,2]=dat$DryValue[501]
DryValue.50[8,2]=dat$DryValue[506]
DryValue.50[9,2]=dat$DryValue[509]
DryValue.50[10,2]=dat$DryValue[513]
DryValue.50[11,2]=dat$DryValue[515]
DryValue.50[14,2]=dat$DryValue[527]
DryValue.50[18,2]=dat$DryValue[549]
DryValue.50[20,2]=dat$DryValue[556]
DryValue.50[26,2]=dat$DryValue[575]
DryValue.50[29,2]=dat$DryValue[587]
DryValue.50[32,2]=dat$DryValue[598]
DryValue.50[34,2]=dat$DryValue[605]
DryValue.50[35,2]=dat$DryValue[458]
DryValue.50[47,2]=dat$DryValue[653]
DryValue.50[55,2]=dat$DryValue[472]
DryValue.50[62,2]=dat$DryValue[480]
DryValue.50[63,2]=dat$DryValue[710]
DryValue.50[67,2]=dat$DryValue[52]
DryValue.50[84,2]=dat$DryValue[92]
DryValue.50[86,2]=dat$DryValue[147]
DryValue.50[95,2]=dat$DryValue[148]
DryValue.50[97,2]=dat$DryValue[150]
DryValue.50[100,2]=dat$DryValue[163]
DryValue.50[103,2]=dat$DryValue[173]
DryValue.50[104,2]=dat$DryValue[182]
DryValue.50[110,2]=dat$DryValue[205]
DryValue.50[111,2]=dat$DryValue[210]
DryValue.50[115,2]=dat$DryValue[222]
DryValue.50[118,2]=dat$DryValue[239]
DryValue.50[120,2]=dat$DryValue[251]
DryValue.50[126,2]=dat$DryValue[275]
DryValue.50[130,2]=dat$DryValue[294]
DryValue.50[131,2]=dat$DryValue[297]
DryValue.50[132,2]=dat$DryValue[299]
DryValue.50[134,2]=dat$DryValue[305]
DryValue.50[135,2]=dat$DryValue[309]
pH.50[1,2]=dat$pH[446]
pH.50[7,2]=dat$pH[501]
pH.50[8,2]=dat$pH[506]
pH.50[9,2]=dat$pH[509]
pH.50[10,2]=dat$pH[513]
pH.50[11,2]=dat$pH[515]
pH.50[14,2]=dat$pH[527]
pH.50[18,2]=dat$pH[549]
pH.50[20,2]=dat$pH[556]
pH.50[26,2]=dat$pH[575]
pH.50[29,2]=dat$pH[587]
pH.50[32,2]=dat$pH[598]
pH.50[34,2]=dat$pH[605]
pH.50[35,2]=dat$pH[458]
pH.50[47,2]=dat$pH[653]
pH.50[55,2]=dat$pH[472]
pH.50[62,2]=dat$pH[480]
pH.50[63,2]=dat$pH[710]
pH.50[67,2]=dat$pH[52]
pH.50[84,2]=dat$pH[92]
pH.50[86,2]=dat$pH[147]
pH.50[95,2]=dat$pH[148]
pH.50[97,2]=dat$pH[150]
pH.50[100,2]=dat$pH[163]
pH.50[103,2]=dat$pH[173]
pH.50[104,2]=dat$pH[182]
pH.50[110,2]=dat$pH[205]
pH.50[111,2]=dat$pH[210]
pH.50[115,2]=dat$pH[222]
pH.50[118,2]=dat$pH[239]
pH.50[120,2]=dat$pH[251]
pH.50[126,2]=dat$pH[275]
pH.50[130,2]=dat$pH[294]
pH.50[131,2]=dat$pH[297]
pH.50[132,2]=dat$pH[299]
pH.50[134,2]=dat$pH[305]
pH.50[135,2]=dat$pH[309]
EfferScale.50[1,2]=dat$EfferScale[446]
EfferScale.50[7,2]=dat$EfferScale[501]
EfferScale.50[8,2]=dat$EfferScale[506]
EfferScale.50[9,2]=dat$EfferScale[509]
EfferScale.50[10,2]=dat$EfferScale[513]
EfferScale.50[11,2]=dat$EfferScale[515]
EfferScale.50[14,2]=dat$EfferScale[527]
EfferScale.50[18,2]=dat$EfferScale[549]
EfferScale.50[20,2]=dat$EfferScale[556]
EfferScale.50[26,2]=dat$EfferScale[575]
EfferScale.50[29,2]=dat$EfferScale[587]
EfferScale.50[32,2]=dat$EfferScale[598]
EfferScale.50[34,2]=dat$EfferScale[605]
EfferScale.50[35,2]=dat$EfferScale[458]
EfferScale.50[47,2]=dat$EfferScale[653]
EfferScale.50[55,2]=dat$EfferScale[472]
EfferScale.50[62,2]=dat$EfferScale[480]
EfferScale.50[63,2]=dat$EfferScale[710]
EfferScale.50[67,2]=dat$EfferScale[52]
EfferScale.50[84,2]=dat$EfferScale[92]
EfferScale.50[86,2]=dat$EfferScale[147]
EfferScale.50[95,2]=dat$EfferScale[148]
EfferScale.50[97,2]=dat$EfferScale[150]
EfferScale.50[100,2]=dat$EfferScale[163]
EfferScale.50[103,2]=dat$EfferScale[173]
EfferScale.50[104,2]=dat$EfferScale[182]
EfferScale.50[110,2]=dat$EfferScale[205]
EfferScale.50[111,2]=dat$EfferScale[210]
EfferScale.50[115,2]=dat$EfferScale[222]
EfferScale.50[118,2]=dat$EfferScale[239]
EfferScale.50[120,2]=dat$EfferScale[251]
EfferScale.50[126,2]=dat$EfferScale[275]
EfferScale.50[130,2]=dat$EfferScale[294]
EfferScale.50[131,2]=dat$EfferScale[297]
EfferScale.50[132,2]=dat$EfferScale[299]
EfferScale.50[134,2]=dat$EfferScale[305]
EfferScale.50[135,2]=dat$EfferScale[309]
AWHC.50[1,2]=dat$AWHC[446]
AWHC.50[7,2]=dat$AWHC[501]
AWHC.50[8,2]=dat$AWHC[506]
AWHC.50[9,2]=dat$AWHC[509]
AWHC.50[10,2]=dat$AWHC[513]
AWHC.50[11,2]=dat$AWHC[515]
AWHC.50[14,2]=dat$AWHC[527]
AWHC.50[18,2]=dat$AWHC[549]
AWHC.50[20,2]=dat$AWHC[556]
AWHC.50[26,2]=dat$AWHC[575]
AWHC.50[29,2]=dat$AWHC[587]
AWHC.50[32,2]=dat$AWHC[598]
AWHC.50[34,2]=dat$AWHC[605]
AWHC.50[35,2]=dat$AWHC[458]
AWHC.50[47,2]=dat$AWHC[653]
AWHC.50[55,2]=dat$AWHC[472]
AWHC.50[62,2]=dat$AWHC[480]
AWHC.50[63,2]=dat$AWHC[710]
AWHC.50[67,2]=dat$AWHC[52]
AWHC.50[84,2]=dat$AWHC[92]
AWHC.50[86,2]=dat$AWHC[147]
AWHC.50[95,2]=dat$AWHC[148]
AWHC.50[97,2]=dat$AWHC[150]
AWHC.50[100,2]=dat$AWHC[163]
AWHC.50[103,2]=dat$AWHC[173]
AWHC.50[104,2]=dat$AWHC[182]
AWHC.50[110,2]=dat$AWHC[205]
AWHC.50[111,2]=dat$AWHC[210]
AWHC.50[115,2]=dat$AWHC[222]
AWHC.50[118,2]=dat$AWHC[239]
AWHC.50[120,2]=dat$AWHC[251]
AWHC.50[126,2]=dat$AWHC[275]
AWHC.50[130,2]=dat$AWHC[294]
AWHC.50[131,2]=dat$AWHC[297]
AWHC.50[132,2]=dat$AWHC[299]
AWHC.50[134,2]=dat$AWHC[305]
AWHC.50[135,2]=dat$AWHC[309]
Plot <- join(Plot, PedonDepth, by = 'id', type = 'inner')
slabs <- join(slabs, Sand.50, by = 'id', type = 'inner')
slabs <- join(slabs, Clay.50, by = 'id', type = 'inner')
slabs <- join(slabs, pH.50, by = 'id', type = 'inner')
slabs <- join(slabs, DryValue.50, by = 'id', type = 'inner')
slabs <- join(slabs, EfferScale.50, by = 'id', type = 'inner')
slabs <- join(slabs, AWHC.50, by = 'id', type = 'inner')
# remove anything you don't want H1, H2, Plot, TDWA, SDWA, slabs
H1 <- subset(H1, select = -c(top,bottom,Horizon,Theta_fc,Theta_pwp,AWHC, HzNum) )
SDWA <- subset(SDWA, select = -c(PedonDepth) )
TDWA <- subset(TDWA, select = -c(PedonDepth) )
colnames(H1) = paste("H1", sep=".", colnames(H1)) # Rename variables for H1
H1 <- rename(H1, c("H1.id"="id"))
colnames(TDWA) = paste("Tot",sep=".", colnames(TDWA)) # Rename variables for H1
names(TDWA)[names(TDWA)=="Tot.id"]<-"id"
colnames(SDWA) = paste("Sub",sep=".", colnames(SDWA)) # Rename variables for H1
names(SDWA)[names(SDWA)=="Sub.id"]<-"id"
# # Create new soil parameter where depth is binary.
# # if the maximum depth is >50/100/150 then 1, if not then 0
# all$Depth50 <- as.numeric(all$PedonDepth > 50)
# all$Depth100 <- as.numeric(all$PedonDepth > 100)
# all$Depth150 <- as.numeric(all$PedonDepth > 150)
Plot$Depth200 <- as.numeric(Plot$PedonDepth == 200)
H1 <- subset(H1, select = -c(H1.DryHue,H1.MoistHue,H1.DryChroma,H1.MoistChroma,H1.Effervescence) )
TDWA <- subset(TDWA, select = -c(Tot.DryHue,Tot.MoistHue,Tot.DryChroma,Tot.MoistChroma,Tot.Effervescence) )
SDWA <- subset(SDWA, select = -c(Sub.DryHue,Sub.MoistHue,Sub.DryChroma,Sub.MoistChroma,Sub.Effervescence) )
Soils <- merge(Plot,H1,by='id')
Soils <- merge(Soils,TDWA,by='id')
# Soils <- merge(Soils,SDWA,by='id')
Soils <- merge(Soils,slabs,by='id')
Soils <- merge(Soils,Max,by='id')
View(Soils)
?cor
install.packages("Hmisc")
install.packages("Hmisc")
install.packages("Hmisc")
install.packages("Hmisc")
install.packages("Hmisc")
install.packages("aqp")
install.packages("Hmisc")
install.packages("Hmisc")
install.packages("Hmisc")
library(Hmisc)
library(aqp)
library(Hmisc)
install.packages(c("foreach", "gdalUtils", "iterators", "manipulate", "randomForest", "rgbif", "RUnit", "sjmisc", "sjPlot", "snowfall"))
install.packages("Hmisc")
install.packages("Hmisc")
library(Hmisc)
rcorr(b, type=c("pearson","spearman"))
rel<-read.csv("F:/LPI/AprilLPIRelativeCoverCommonInExcel.csv",header=TRUE, row.names=1)
den<-read.csv("F:/LPI/AprilLPIplotXspp.csv",header=TRUE, row.names=1)
den <- den/150
write.csv(den,file="F:/LPI/AprilLPIDenM2.csv", row.names=FALSE)
plot(rel$ARTR2, rel$SPCR, col='navyblue')
plot(den$ARTR2, den$SPCR, col='darkgreen')
plot(rel$SPCR)
plot(den$SPCR)
plot(rel$ARTR2, rel$BOGR, col='navyblue')
plot(den$ARTR2, den$BOGR, col='darkgreen')
plot(rel$BOGR)
plot(den$BOGR)
plot(rel$ARTR2, rel$KRLA2, col='navyblue')
plot(den$ARTR2, den$KRLA2, col='darkgreen')
plot(rel$KRLA2)
plot(den$KRLA2)
plot(rel$ARTR2, rel$ATCA2, col='navyblue')
plot(den$ARTR2, den$ATCA2, col='darkgreen')
plot(rel$ATCA2)
plot(den$ATCA2)
plot(rel$ARTR2, den$ARTR2, col='navyblue')
plot(rel$ARTR2.D, den$ARTR2.D, col='darkgreen')
plot(rel$ARTR2, den$ARTR2, col='navyblue')
points(rel$ARTR2.D, den$ARTR2.D, col='darkgreen')
plot(rel$HECO26, den$HECO26, col='navyblue')
points(rel$HECO26.D, den$HECO26.D, col='darkgreen')
plot(rel$SPCR, den$SPCR, col='darkgreen')
points(rel$SPCR.D, den$SPCR.D, col='navyblue')
plot(rel$SPCR.D, den$SPCR.D, col='navyblue')
plot(rel$ACHY, den$ACHY, col='darkgreen')
points(rel$AMID, den$AMID, col='navyblue')
points(rel$AMSIN, den$AMSIN, col='red')
points(rel$ARPU9, den$ARPU9, col='purple')
points(rel$ARTR2, den$ARTR2, col='green')
points(rel$ARTR2.D, den$ARTR2.D, col='blue')
points(rel$ATCA2, den$ATCA2, col='green4')
points(rel$ATCA2.D, den$ATCA2.D, col='orange')
points(rel$BOGR, den$BOGR, col='navyblue')
points(rel$BOGR.D, den$BOGR.D, col='red')
u<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
p<-read.csv("F:/Soils/SoilEnvironmentaldataNSplain.csv",header=TRUE, row.names=1)
a<-read.csv("F:/Soils/SoilEnvironmentaldataApril.csv",header=TRUE, row.names=1)
plot(u$MaxClay, u$Clay.50, col='blue', main='USGS')
plot(p$MaxClay, p$Clay.50, col='blue', main='Plains')
plot(a$MaxClay, a$Clay.50, col='blue', main='April')
plot(u$MaxSand, u$Sand.50, col='blue', main='USGS')
plot(p$MaxSand, p$Sand.50, col='blue', main='Plains')
plot(a$MaxSand, a$Sand.50, col='blue', main='April')
plot(u$MaxpH, u$pH.50, col='blue', main='USGS')
plot(p$MaxpH, p$pH.50, col='blue', main='Plains')
plot(a$MaxpH, a$pH.50, col='blue', main='April')
plot(u$MaxDryValue, u$DryValue.50, col='blue', main='USGS')
plot(p$MaxDryValue, p$DryValue.50, col='blue', main='Plains')
plot(a$MaxDryValue, a$DryValue.50, col='blue', main='April')
plot(u$MaxEffervescence, u$EfferScale.50, col='blue', main='USGS')
plot(p$MaxEffervescence, p$EfferScale.50, col='blue', main='Plains')
plot(a$MaxEffervescence, a$EfferScale.50, col='blue', main='April')
plot(u$MaxAWHC, u$AWHC.50, col='blue', main='USGS')
plot(p$MaxAWHC, p$AWHC.50, col='blue', main='Plains')
plot(a$MaxAWHC, a$AWHC.50, col='blue', main='April')
plot(a$Aspect, a$CarbonateStage, col='blue')
ls(a)
b <- subset(a, select = -c(SlopeShape,DepthClass,H1.Texture,H1.SandSize,Tot.Texture,Tot.SandSize) )
cor <- cor(b, method = c("pearson", "kendall", "spearman"),use = "complete.obs")
pearson <- cor(b, method = c("pearson"),use = "complete.obs")
kendall <- cor(b, method = c("kendall"),use = "complete.obs")
spearman <- cor(b, method = c("spearman"),use = "complete.obs")
library(Hmisc)
rcorr(b, type=c("pearson","spearman"))
rcorr(as.matrix(mtcars[,1:7]))
rcorr(as.matrix(b[,1:7]))
rcorr(as.matrix(b[,1:42]))
c <- rcorr(as.matrix(b[,1:42]))
rcorr(b, type=c("pearson","spearman"))
rcorr(b, type=c("spearman"))
# ++++++++++++++++++++++++++++
# flattenCorrMatrix
# ++++++++++++++++++++++++++++
# cormat : matrix of the correlation coefficients
# pmat : matrix of the correlation p-values
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
res<-rcorr(as.matrix(b[,1:42]))
flattenCorrMatrix(res$r, res$P)
corPval <- flattenCorrMatrix(res$r, res$P)
View(corPval)
symnum(mcor)
symnum(b)
symnum(res)
symnum(spearman)
install.packages("corrplot")
library(corrplot)
corrplot(spearman, type="upper", order="hclust", tl.col="black", tl.srt=45)
?corrplot
res<-rcorr(as.matrix(b[,1:42]))
corPval <- flattenCorrMatrix(res$r, res$P)
symnum(spearman)
z <- symnum(spearman)
View(spearman)
spearman <- cor(b, method = c("spearman"),use = "complete.obs", diag)
spearman <- cor(b, method = c("spearman"),use = "complete.obs", upper=T)
corrplot(spearman,type="upper",order = "AOE", cl.pos = "n", tl.pos = "n")
corrplot(spearman,type="upper",order = "AOE", cl.pos = "b", tl.pos = "d", tl.srt = 60)
View(spearman)
write.csv(spearman,file="F:/SpearmanSoilCorrelation.csv", row.names=TRUE)
