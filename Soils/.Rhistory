dat$Effervescence <- sub("VS", "1", dat$Effervescence, ignore.case = FALSE)
dat$Effervescence <- sub("NE", "0", dat$Effervescence, ignore.case = FALSE)
dat$Effervescence <- sub("LS", "2", dat$Effervescence, ignore.case = FALSE)
dat$Texture <- sub("LVFS", "LS", dat$Texture, ignore.case = FALSE)
dat$Texture <- sub("VFLS", "LS", dat$Texture, ignore.case = FALSE)
dat$Texture <- sub("VFSL", "SL", dat$Texture, ignore.case = FALSE)
dat$Texture <- sub("FSL", "SL", dat$Texture, ignore.case = FALSE)
dat$Texture <- sub("LCS", "LS", dat$Texture, ignore.case = FALSE)
dat$Texture <- sub("LM", "L", dat$Texture, ignore.case = FALSE)
dat$Texture <- sub("FLS", "LS", dat$Texture, ignore.case = FALSE)
dat$Texture <- sub("FS", "S", dat$Texture, ignore.case = FALSE)
dat$Texture <- sub("LFS", "LS", dat$Texture, ignore.case = FALSE)
dat$Texture <- sub("LMS", "LS", dat$Texture, ignore.case = FALSE)
dat$SandSize <- sub("MID", "MIX", dat$SandSize, ignore.case = FALSE)
dat$SandSize <- sub("Vf, M", "MIX", dat$SandSize, ignore.case = FALSE)
dat$SandSize <- sub("VFS", "VF", dat$SandSize, ignore.case = FALSE)
dat$SandSize <- sub("VF ", "VF", dat$SandSize, ignore.case = FALSE)
}
dat <- rename(dat, c(DryHue="DryRed",DryH="DryHue",MoistHue="MoistRed",
MoistH="MoistHue",Effervescence="EfferScale",Effer="Effervescence"))
# write file before removing anything for use in slabs function below
write.csv(dat,file="F:/Soils/SoilDataAprilUSGSnotremoved.csv", row.names=FALSE)
# # remove anything you don't want duplicated in H1 and H2
# dat <- subset(dat, select = -c(top,bottom,Horizon,Theta_fc,Theta_pwp, HzNum,Texture,SandSize) )
H1 <- dat[ which(dat$.id=='1'), ] # Pull out horizon #1
H1 <- subset(H1, select=-c(.id))
H2 <- dat[! which(dat$.id=='1'), ] # Pull out horizon #1
H2 <- subset(H2, select=-c(.id))
{
# Categorical Depth Weighted Mode
# Total Horizon
TDWA <- PedonDepth
TDryRed <- count(dat, vars=c("DryRed", "id"),wt_var="Depth")
TDryRed<-xtabs(freq~id+DryRed, TDryRed)
TDWA$DryRed <- colnames(TDryRed)[apply(TDryRed,1,which.max)]
TDryHue <- count(dat, vars=c("DryHue", "id"),wt_var="Depth")
TDryHue<-xtabs(freq~id+DryHue, TDryHue)
TDWA$DryHue <- colnames(TDryHue)[apply(TDryHue,1,which.max)]
TDryValue <- count(dat, vars=c("DryValue", "id"),wt_var="Depth")
TDryValue<-xtabs(freq~id+DryValue, TDryValue)
TDWA$DryValue <- colnames(TDryValue)[apply(TDryValue,1,which.max)]
TDryChroma <- count(dat, vars=c("DryChroma", "id"),wt_var="Depth")
TDryChroma<-xtabs(freq~id+DryChroma, TDryChroma)
TDWA$DryChroma <- colnames(TDryChroma)[apply(TDryChroma,1,which.max)]
TMoistRed <- count(dat, vars=c("MoistRed", "id"),wt_var="Depth")
TMoistRed<-xtabs(freq~id+MoistRed, TMoistRed)
TDWA$MoistRed <- colnames(TMoistRed)[apply(TMoistRed,1,which.max)]
TMoistHue <- count(dat, vars=c("MoistHue", "id"),wt_var="Depth")
TMoistHue<-xtabs(freq~id+MoistHue, TMoistHue)
TDWA$MoistHue <- colnames(TMoistHue)[apply(TMoistHue,1,which.max)]
TMoistValue <- count(dat, vars=c("MoistValue", "id"),wt_var="Depth")
TMoistValue<-xtabs(freq~id+MoistValue, TMoistValue)
TDWA$MoistValue <- colnames(TMoistValue)[apply(TMoistValue,1,which.max)]
TMoistChroma <- count(dat, vars=c("MoistChroma", "id"),wt_var="Depth")
TMoistChroma<-xtabs(freq~id+MoistChroma, TMoistChroma)
TDWA$MoistChroma <- colnames(TMoistChroma)[apply(TMoistChroma,1,which.max)]
TTexture <- count(dat, vars=c("Texture", "id"),wt_var="Depth")
TTexture<-xtabs(freq~id+Texture, TTexture)
TDWA$Texture <- colnames(TTexture)[apply(TTexture,1,which.max)]
TSandSize <- count(dat, vars=c("SandSize", "id"),wt_var="Depth")
TSandSize<-xtabs(freq~id+SandSize, TSandSize)
TDWA$SandSize <- colnames(TSandSize)[apply(TSandSize,1,which.max)]
TEffervescence <- count(dat, vars=c("Effervescence", "id"),wt_var="Depth")
TEffervescence<-xtabs(freq~id+Effervescence, TEffervescence)
TDWA$Effervescence <- colnames(TEffervescence)[apply(TEffervescence,1,which.max)]
TEfferScale <- count(dat, vars=c("EfferScale", "id"),wt_var="Depth")
TEfferScale<-xtabs(freq~id+EfferScale, TEfferScale)
TDWA$EfferScale <- colnames(TEfferScale)[apply(TEfferScale,1,which.max)]
# Subsurface Horizon
SDWA <- PedonDepth
SDryRed <- count(H1, vars=c("DryRed", "id"),wt_var="Depth")
SDryRed<-xtabs(freq~id+DryRed, SDryRed)
SDWA$DryRed <- colnames(SDryRed)[apply(SDryRed,1,which.max)]
SDryHue <- count(H1, vars=c("DryHue", "id"),wt_var="Depth")
SDryHue<-xtabs(freq~id+DryHue, SDryHue)
SDWA$DryHue <- colnames(SDryHue)[apply(SDryHue,1,which.max)]
SDryValue <- count(H1, vars=c("DryValue", "id"),wt_var="Depth")
SDryValue<-xtabs(freq~id+DryValue, SDryValue)
SDWA$DryValue <- colnames(SDryValue)[apply(SDryValue,1,which.max)]
SDryChroma <- count(H1, vars=c("DryChroma", "id"),wt_var="Depth")
SDryChroma<-xtabs(freq~id+DryChroma, SDryChroma)
SDWA$DryChroma <- colnames(SDryChroma)[apply(SDryChroma,1,which.max)]
SMoistRed <- count(H1, vars=c("MoistRed", "id"),wt_var="Depth")
SMoistRed<-xtabs(freq~id+MoistRed, SMoistRed)
SDWA$MoistRed <- colnames(SMoistRed)[apply(SMoistRed,1,which.max)]
SMoistHue <- count(H1, vars=c("MoistHue", "id"),wt_var="Depth")
SMoistHue<-xtabs(freq~id+MoistHue, SMoistHue)
SDWA$MoistHue <- colnames(SMoistHue)[apply(SMoistHue,1,which.max)]
SMoistValue <- count(H1, vars=c("MoistValue", "id"),wt_var="Depth")
SMoistValue<-xtabs(freq~id+MoistValue, SMoistValue)
SDWA$MoistValue <- colnames(SMoistValue)[apply(SMoistValue,1,which.max)]
SMoistChroma <- count(H1, vars=c("MoistChroma", "id"),wt_var="Depth")
SMoistChroma<-xtabs(freq~id+MoistChroma, SMoistChroma)
SDWA$MoistChroma <- colnames(SMoistChroma)[apply(SMoistChroma,1,which.max)]
STexture <- count(H1, vars=c("Texture", "id"),wt_var="Depth")
STexture<-xtabs(freq~id+Texture, STexture)
SDWA$Texture <- colnames(STexture)[apply(STexture,1,which.max)]
SSandSize <- count(H1, vars=c("SandSize", "id"),wt_var="Depth")
SSandSize<-xtabs(freq~id+SandSize, SSandSize)
SDWA$SandSize <- colnames(SSandSize)[apply(SSandSize,1,which.max)]
SEffervescence <- count(H1, vars=c("Effervescence", "id"),wt_var="Depth")
SEffervescence<-xtabs(freq~id+Effervescence, SEffervescence)
SDWA$Effervescence <- colnames(SEffervescence)[apply(SEffervescence,1,which.max)]
SEfferScale <- count(H1, vars=c("EfferScale", "id"),wt_var="Depth")
SEfferScale<-xtabs(freq~id+EfferScale, SEfferScale)
SDWA$EfferScale <- colnames(SEfferScale)[apply(SEfferScale,1,which.max)]
}
#Now calculate depth weighted averages of each continuous variable, then append these to the other variables.
#Convert to SoilProfileCollection
data <- read.csv("F:/Soils/SoilDataAprilUSGSnotremoved.csv", header = T)
depths(data) <- id ~ top + bottom
# within each profile, compute weighted means, over the intervals: 0-25,0-50,0-100,0-150,0-200 removing NA if present
d25 <- slab(data, id ~ AWHC, slab.structure = c(0,25), slab.fun = mean, na.rm=TRUE)
d50 <- slab(data, id ~ AWHC, slab.structure = c(0,50), slab.fun = mean, na.rm=TRUE)
d100 <- slab(data, id ~ AWHC, slab.structure = c(0,100), slab.fun = mean, na.rm=TRUE)
d150 <- slab(data, id ~ AWHC, slab.structure = c(0,150), slab.fun = mean, na.rm=TRUE)
d200 <- slab(data, id ~ AWHC, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
s50 <- slab(data, id ~ AWHC, slab.structure = c(25,50), slab.fun = mean, na.rm=TRUE)
s100 <- slab(data, id ~ AWHC, slab.structure = c(50,100), slab.fun = mean, na.rm=TRUE)
s150 <- slab(data, id ~ AWHC, slab.structure = c(100,150), slab.fun = mean, na.rm=TRUE)
s200 <- slab(data, id ~ AWHC, slab.structure = c(150,200), slab.fun = mean, na.rm=TRUE)
# reshape to wide format, remove unneeded variables and rename.
AWC.0.25 <- dcast(d25, id + top + bottom ~ variable, value.var = 'value')
AWC.0.25 <- AWC.0.25[,-c(2,3)]
names(AWC.0.25)[2] <- 'AWC.0.25'
AWC.0.50 <- dcast(d50, id + top + bottom ~ variable, value.var = 'value')
AWC.0.50 <- AWC.0.50[,-c(2,3)]
names(AWC.0.50)[2] <- 'AWC.0.50'
AWC.0.100 <- dcast(d100, id + top + bottom ~ variable, value.var = 'value')
AWC.0.100 <- AWC.0.100[,-c(2,3)]
names(AWC.0.100)[2] <- 'AWC.0.100'
AWC.0.150 <- dcast(d150, id + top + bottom ~ variable, value.var = 'value')
AWC.0.150 <- AWC.0.150[,-c(2,3)]
names(AWC.0.150)[2] <- 'AWC.0.150'
AWC.0.200 <- dcast(d200, id + top + bottom ~ variable, value.var = 'value')
AWC.0.200 <- AWC.0.200[,-c(2,3)]
names(AWC.0.200)[2] <- 'AWC.0.200'
AWC.25.50 <- dcast(s50, id + top + bottom ~ variable, value.var = 'value')
AWC.25.50 <- AWC.25.50[,-c(2,3)]
names(AWC.25.50)[2] <- 'AWC.25.50'
AWC.50.100 <- dcast(s100, id + top + bottom ~ variable, value.var = 'value')
AWC.50.100 <- AWC.50.100[,-c(2,3)]
names(AWC.50.100)[2] <- 'AWC.50.100'
AWC.100.150 <- dcast(s150, id + top + bottom ~ variable, value.var = 'value')
AWC.100.150 <- AWC.100.150[,-c(2,3)]
names(AWC.100.150)[2] <- 'AWC.100.150'
AWC.150.200 <- dcast(s200, id + top + bottom ~ variable, value.var = 'value')
AWC.150.200 <- AWC.150.200[,-c(2,3)]
names(AWC.150.200)[2] <- 'AWC.150.200'
# within each profile, compute weighted means, removing NA if present
dwaclay <- slab(data, id ~ ClayPercent, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
dwasand <- slab(data, id ~ SandPercent, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
dwapH <- slab(data, id ~ pH, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
# reshape to wide format, remove unneeded variables and rename.
DWAClay <- dcast(dwaclay, id + top + bottom ~ variable, value.var = 'value')
DWAClay <- DWAClay[,-c(2,3)]
names(DWAClay)[2] <- 'DWAClay'
DWASand <- dcast(dwasand, id + top + bottom ~ variable, value.var = 'value')
DWASand <- DWASand[,-c(2,3)]
names(DWASand)[2] <- 'DWASand'
DWApH <- dcast(dwapH, id + top + bottom ~ variable, value.var = 'value')
DWApH <- DWApH[,-c(2,3)]
names(DWApH)[2] <- 'DWApH'
#Now calculate depth weighted averages of H2
#Convert to SoilProfileCollection
Sub <- H2
depths(Sub) <- id ~ top + bottom
# within each profile, compute weighted means, removing NA if present
subdwaclay <- slab(Sub, id ~ ClayPercent, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
subdwasand <- slab(Sub, id ~ SandPercent, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
subdwapH <- slab(Sub, id ~ pH, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
subawhc <- slab(Sub, id ~ AWHC, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
# reshape to wide format, remove unneeded variables and rename.
SubDWAClay <- dcast(subdwaclay, id + top + bottom ~ variable, value.var = 'value')
SubDWAClay <- SubDWAClay[,-c(2,3)]
names(SubDWAClay)[2] <- 'SubDWAClay'
SubDWASand <- dcast(subdwasand, id + top + bottom ~ variable, value.var = 'value')
SubDWASand <- SubDWASand[,-c(2,3)]
names(SubDWASand)[2] <- 'SubDWASand'
SubDWApH <- dcast(subdwapH, id + top + bottom ~ variable, value.var = 'value')
SubDWApH <- SubDWApH[,-c(2,3)]
names(SubDWApH)[2] <- 'SubDWApH'
SubAWC <- dcast(subawhc, id + top + bottom ~ variable, value.var = 'value')
SubAWC <- SubAWC[,-c(2,3)]
names(SubAWC)[2] <- 'SubAWC'
slabs <- join(AWC.0.25, AWC.0.50, by = 'id', type = 'inner')
slabs <- join(slabs, AWC.0.100, by = 'id', type = 'inner')
slabs <- join(slabs, AWC.0.150, by = 'id', type = 'inner')
slabs <- join(slabs, AWC.0.200, by = 'id', type = 'inner')
slabs <- join(slabs, AWC.25.50, by = 'id', type = 'inner')
slabs <- join(slabs, AWC.50.100, by = 'id', type = 'inner')
slabs <- join(slabs, AWC.100.150, by = 'id', type = 'inner')
slabs <- join(slabs, AWC.150.200, by = 'id', type = 'inner')
slabs <- join(slabs, DWAClay, by = 'id', type = 'inner')
slabs <- join(slabs, DWASand, by = 'id', type = 'inner')
slabs <- join(slabs, DWApH, by = 'id', type = 'inner')
slabs <- join(slabs, SubDWAClay, by = 'id', type = 'inner')
slabs <- join(slabs, SubDWASand, by = 'id', type = 'inner')
slabs <- join(slabs, SubDWApH, by = 'id', type = 'inner')
slabs <- join(slabs, SubAWC, by = 'id', type = 'inner')
View(slabs)
View(Plot)
View(TDWA)
View(SDWA)
View(`H2`)
View(`H1`)
H1 <- subset(H1, select = -c(top,bottom,Horizon,Theta_fc,Theta_pwp, HzNum) )
Plot <- join(Plot, PedonDepth, by = 'id', type = 'inner')
View(Plot)
library(splitstackshape)
library(plyr)
library(aqp)
library(data.table)
library(reshape2)
library(tidyr)
# Read in data
# Manually in excel I added in second IL1_9 row of NA to dat so H2 still has 99obs
dat <- read.csv("F:/Soils/SoilDataFitUSGSColumns.csv", header = T,nrows = 444)
udat <- read.csv("F:/Soils/USGSsoildataModForAprilsdata.csv", header = T,nrows = 444)
udat$id <- extract_numeric(udat$id) # removes CLHS and P leaving only numbers.
# Creates an ordered list of each horizon in a plot
dat <- getanID(data = dat, id.vars = "id")
udat <- getanID(data = udat, id.vars = "id")
H1 <- dat[ which(dat$.id=='1'), ] # Pull out horizon #1
Plot <- subset(H1, select = c(id,Elevation,Aspect,Slope,SlopeShape,CarbonateStage,BioticCrustClass))# Pull out data that is for the whole plot
H1 <- subset(H1, select = -c(Elevation,Aspect,Slope,SlopeShape,CarbonateStage,BioticCrustClass))# Remove out data that is for the whole plot
dat <- subset(dat, select = -c(Elevation,Aspect,Slope,SlopeShape,CarbonateStage,BioticCrustClass))# Remove out data that is for the whole plot
# Combine April and USGS soils data
dat <- rbind(dat,udat)
# Add in USGS Elevation, Slope Shape, Slope, Carbonate Stage, Biotic Crust Class
# Remove BLM Trend and Miller plots
site <- read.csv("F:/BeefBasin Data For April/BeefBasin/formattedR/Site_Data.csv")
site <- site[-c(66:77),]
site <- site[order(site$pedonID),] # Sort so plot 100 is by 9 same as data
site$pedonID <- extract_numeric(site$pedonID) # removes CLHS and P leaving only numbers.
loc <- read.csv("F:/BeefBasin Data For April/BeefBasin/formattedR/locInfo.csv")
loc <- loc[-c(66:77),]
loc <- loc[order(loc$Plot.Name),] # Sort so plot 100 is by 9 same as data
loc$Plot.Name <- extract_numeric(loc$Plot.Name) # removes CLHS and P leaving only numbers.
# put into dataframe to add to april
id <-site$pedonID
Elevation <- loc$altitude
Aspect <- site$Aspect
df <- data.frame(id,Elevation,Aspect)
df$Slope <- site$Slope
df$SlopeShape <- site$SlopeShape
df$CarbonateStage <- site$CarbonateStage
df$BioticCrustClass <- site$BioticCrustClass
# Add to april Plot dataframe
Plot <- rbind(Plot,df)
# combine redundant categories
{Plot$SlopeShape <- sub("LC", "CL", Plot$SlopeShape, ignore.case = FALSE)
Plot$SlopeShape <- sub("VC", "CV", Plot$SlopeShape, ignore.case = FALSE)
Plot$SlopeShape <- sub("VL", "LV", Plot$SlopeShape, ignore.case = FALSE)
Plot$SlopeShape <- sub("LVQ", "LV", Plot$SlopeShape, ignore.case = FALSE)
Plot$SlopeShape <- as.factor(Plot$SlopeShape)}
# get the maximum depth of the entire pedon
PedonDepth <- ddply( dat, .(id), function(x) max(x$bottom, na.rm = T) )
names(PedonDepth)[2] <- 'PedonDepth'
# get the depth of each horizon
dat$Depth <- dat$bottom-dat$top
# Scale Hue - Redness Scale - Degree of Redness
# I have 4 Hue values:2.5YR, 5YR, 7.5YR, and 10YR
# They will be numbered from least(1) to most(4) red. 2.5YR=4, 5YR=3, 7.5YR=2, 10YR=1.
dat$DryH <- dat$DryHue
dat$MoistH <- dat$MoistHue
dat$Effer <- dat$Effervescence
{
dat$DryHue <- sub("2.5YR", "4", dat$DryHue, ignore.case = FALSE)
dat$DryHue <- sub("7.5YR", "2", dat$DryHue, ignore.case = FALSE)
dat$DryHue <- sub("5YR", "3", dat$DryHue, ignore.case = FALSE)
dat$DryHue <- sub("10YR", "1", dat$DryHue, ignore.case = FALSE)
dat$MoistHue <- sub("2.5YR", "4", dat$MoistHue, ignore.case = FALSE)
dat$MoistHue <- sub("7.5YR", "2", dat$MoistHue, ignore.case = FALSE)
dat$MoistHue <- sub("5YR", "3", dat$MoistHue, ignore.case = FALSE)
dat$MoistHue <- sub("10YR", "1", dat$MoistHue, ignore.case = FALSE)
dat$Effervescence <- sub("VE", "4", dat$Effervescence, ignore.case = FALSE)
dat$Effervescence <- sub("ST", "3", dat$Effervescence, ignore.case = FALSE)
dat$Effervescence <- sub("SL", "2", dat$Effervescence, ignore.case = FALSE)
dat$Effervescence <- sub("VS", "1", dat$Effervescence, ignore.case = FALSE)
dat$Effervescence <- sub("NE", "0", dat$Effervescence, ignore.case = FALSE)
dat$Effervescence <- sub("LS", "2", dat$Effervescence, ignore.case = FALSE)
dat$Texture <- sub("LVFS", "LS", dat$Texture, ignore.case = FALSE)
dat$Texture <- sub("VFLS", "LS", dat$Texture, ignore.case = FALSE)
dat$Texture <- sub("VFSL", "SL", dat$Texture, ignore.case = FALSE)
dat$Texture <- sub("FSL", "SL", dat$Texture, ignore.case = FALSE)
dat$Texture <- sub("LCS", "LS", dat$Texture, ignore.case = FALSE)
dat$Texture <- sub("LM", "L", dat$Texture, ignore.case = FALSE)
dat$Texture <- sub("FLS", "LS", dat$Texture, ignore.case = FALSE)
dat$Texture <- sub("FS", "S", dat$Texture, ignore.case = FALSE)
dat$Texture <- sub("LFS", "LS", dat$Texture, ignore.case = FALSE)
dat$Texture <- sub("LMS", "LS", dat$Texture, ignore.case = FALSE)
dat$SandSize <- sub("MID", "MIX", dat$SandSize, ignore.case = FALSE)
dat$SandSize <- sub("Vf, M", "MIX", dat$SandSize, ignore.case = FALSE)
dat$SandSize <- sub("VFS", "VF", dat$SandSize, ignore.case = FALSE)
dat$SandSize <- sub("VF ", "VF", dat$SandSize, ignore.case = FALSE)
}
dat <- rename(dat, c(DryHue="DryRed",DryH="DryHue",MoistHue="MoistRed",
MoistH="MoistHue",Effervescence="EfferScale",Effer="Effervescence"))
# write file before removing anything for use in slabs function below
write.csv(dat,file="F:/Soils/SoilDataAprilUSGSnotremoved.csv", row.names=FALSE)
# # remove anything you don't want duplicated in H1 and H2
# dat <- subset(dat, select = -c(top,bottom,Horizon,Theta_fc,Theta_pwp, HzNum,Texture,SandSize) )
H1 <- dat[ which(dat$.id=='1'), ] # Pull out horizon #1
H1 <- subset(H1, select=-c(.id))
H2 <- dat[! which(dat$.id=='1'), ] # Pull out horizon #1
H2 <- subset(H2, select=-c(.id))
{
# Categorical Depth Weighted Mode
# Total Horizon
TDWA <- PedonDepth
TDryRed <- count(dat, vars=c("DryRed", "id"),wt_var="Depth")
TDryRed<-xtabs(freq~id+DryRed, TDryRed)
TDWA$DryRed <- colnames(TDryRed)[apply(TDryRed,1,which.max)]
TDryHue <- count(dat, vars=c("DryHue", "id"),wt_var="Depth")
TDryHue<-xtabs(freq~id+DryHue, TDryHue)
TDWA$DryHue <- colnames(TDryHue)[apply(TDryHue,1,which.max)]
TDryValue <- count(dat, vars=c("DryValue", "id"),wt_var="Depth")
TDryValue<-xtabs(freq~id+DryValue, TDryValue)
TDWA$DryValue <- colnames(TDryValue)[apply(TDryValue,1,which.max)]
TDryChroma <- count(dat, vars=c("DryChroma", "id"),wt_var="Depth")
TDryChroma<-xtabs(freq~id+DryChroma, TDryChroma)
TDWA$DryChroma <- colnames(TDryChroma)[apply(TDryChroma,1,which.max)]
TMoistRed <- count(dat, vars=c("MoistRed", "id"),wt_var="Depth")
TMoistRed<-xtabs(freq~id+MoistRed, TMoistRed)
TDWA$MoistRed <- colnames(TMoistRed)[apply(TMoistRed,1,which.max)]
TMoistHue <- count(dat, vars=c("MoistHue", "id"),wt_var="Depth")
TMoistHue<-xtabs(freq~id+MoistHue, TMoistHue)
TDWA$MoistHue <- colnames(TMoistHue)[apply(TMoistHue,1,which.max)]
TMoistValue <- count(dat, vars=c("MoistValue", "id"),wt_var="Depth")
TMoistValue<-xtabs(freq~id+MoistValue, TMoistValue)
TDWA$MoistValue <- colnames(TMoistValue)[apply(TMoistValue,1,which.max)]
TMoistChroma <- count(dat, vars=c("MoistChroma", "id"),wt_var="Depth")
TMoistChroma<-xtabs(freq~id+MoistChroma, TMoistChroma)
TDWA$MoistChroma <- colnames(TMoistChroma)[apply(TMoistChroma,1,which.max)]
TTexture <- count(dat, vars=c("Texture", "id"),wt_var="Depth")
TTexture<-xtabs(freq~id+Texture, TTexture)
TDWA$Texture <- colnames(TTexture)[apply(TTexture,1,which.max)]
TSandSize <- count(dat, vars=c("SandSize", "id"),wt_var="Depth")
TSandSize<-xtabs(freq~id+SandSize, TSandSize)
TDWA$SandSize <- colnames(TSandSize)[apply(TSandSize,1,which.max)]
TEffervescence <- count(dat, vars=c("Effervescence", "id"),wt_var="Depth")
TEffervescence<-xtabs(freq~id+Effervescence, TEffervescence)
TDWA$Effervescence <- colnames(TEffervescence)[apply(TEffervescence,1,which.max)]
TEfferScale <- count(dat, vars=c("EfferScale", "id"),wt_var="Depth")
TEfferScale<-xtabs(freq~id+EfferScale, TEfferScale)
TDWA$EfferScale <- colnames(TEfferScale)[apply(TEfferScale,1,which.max)]
# Subsurface Horizon
SDWA <- PedonDepth
SDryRed <- count(H1, vars=c("DryRed", "id"),wt_var="Depth")
SDryRed<-xtabs(freq~id+DryRed, SDryRed)
SDWA$DryRed <- colnames(SDryRed)[apply(SDryRed,1,which.max)]
SDryHue <- count(H1, vars=c("DryHue", "id"),wt_var="Depth")
SDryHue<-xtabs(freq~id+DryHue, SDryHue)
SDWA$DryHue <- colnames(SDryHue)[apply(SDryHue,1,which.max)]
SDryValue <- count(H1, vars=c("DryValue", "id"),wt_var="Depth")
SDryValue<-xtabs(freq~id+DryValue, SDryValue)
SDWA$DryValue <- colnames(SDryValue)[apply(SDryValue,1,which.max)]
SDryChroma <- count(H1, vars=c("DryChroma", "id"),wt_var="Depth")
SDryChroma<-xtabs(freq~id+DryChroma, SDryChroma)
SDWA$DryChroma <- colnames(SDryChroma)[apply(SDryChroma,1,which.max)]
SMoistRed <- count(H1, vars=c("MoistRed", "id"),wt_var="Depth")
SMoistRed<-xtabs(freq~id+MoistRed, SMoistRed)
SDWA$MoistRed <- colnames(SMoistRed)[apply(SMoistRed,1,which.max)]
SMoistHue <- count(H1, vars=c("MoistHue", "id"),wt_var="Depth")
SMoistHue<-xtabs(freq~id+MoistHue, SMoistHue)
SDWA$MoistHue <- colnames(SMoistHue)[apply(SMoistHue,1,which.max)]
SMoistValue <- count(H1, vars=c("MoistValue", "id"),wt_var="Depth")
SMoistValue<-xtabs(freq~id+MoistValue, SMoistValue)
SDWA$MoistValue <- colnames(SMoistValue)[apply(SMoistValue,1,which.max)]
SMoistChroma <- count(H1, vars=c("MoistChroma", "id"),wt_var="Depth")
SMoistChroma<-xtabs(freq~id+MoistChroma, SMoistChroma)
SDWA$MoistChroma <- colnames(SMoistChroma)[apply(SMoistChroma,1,which.max)]
STexture <- count(H1, vars=c("Texture", "id"),wt_var="Depth")
STexture<-xtabs(freq~id+Texture, STexture)
SDWA$Texture <- colnames(STexture)[apply(STexture,1,which.max)]
SSandSize <- count(H1, vars=c("SandSize", "id"),wt_var="Depth")
SSandSize<-xtabs(freq~id+SandSize, SSandSize)
SDWA$SandSize <- colnames(SSandSize)[apply(SSandSize,1,which.max)]
SEffervescence <- count(H1, vars=c("Effervescence", "id"),wt_var="Depth")
SEffervescence<-xtabs(freq~id+Effervescence, SEffervescence)
SDWA$Effervescence <- colnames(SEffervescence)[apply(SEffervescence,1,which.max)]
SEfferScale <- count(H1, vars=c("EfferScale", "id"),wt_var="Depth")
SEfferScale<-xtabs(freq~id+EfferScale, SEfferScale)
SDWA$EfferScale <- colnames(SEfferScale)[apply(SEfferScale,1,which.max)]
}
#Now calculate depth weighted averages of each continuous variable, then append these to the other variables.
#Convert to SoilProfileCollection
data <- read.csv("F:/Soils/SoilDataAprilUSGSnotremoved.csv", header = T)
depths(data) <- id ~ top + bottom
# within each profile, compute weighted means, over the intervals: 0-25,0-50,0-100,0-150,0-200 removing NA if present
d25 <- slab(data, id ~ AWHC, slab.structure = c(0,25), slab.fun = mean, na.rm=TRUE)
d50 <- slab(data, id ~ AWHC, slab.structure = c(0,50), slab.fun = mean, na.rm=TRUE)
d100 <- slab(data, id ~ AWHC, slab.structure = c(0,100), slab.fun = mean, na.rm=TRUE)
d150 <- slab(data, id ~ AWHC, slab.structure = c(0,150), slab.fun = mean, na.rm=TRUE)
d200 <- slab(data, id ~ AWHC, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
s50 <- slab(data, id ~ AWHC, slab.structure = c(25,50), slab.fun = mean, na.rm=TRUE)
s100 <- slab(data, id ~ AWHC, slab.structure = c(50,100), slab.fun = mean, na.rm=TRUE)
s150 <- slab(data, id ~ AWHC, slab.structure = c(100,150), slab.fun = mean, na.rm=TRUE)
s200 <- slab(data, id ~ AWHC, slab.structure = c(150,200), slab.fun = mean, na.rm=TRUE)
# reshape to wide format, remove unneeded variables and rename.
AWC.0.25 <- dcast(d25, id + top + bottom ~ variable, value.var = 'value')
AWC.0.25 <- AWC.0.25[,-c(2,3)]
names(AWC.0.25)[2] <- 'AWC.0.25'
AWC.0.50 <- dcast(d50, id + top + bottom ~ variable, value.var = 'value')
AWC.0.50 <- AWC.0.50[,-c(2,3)]
names(AWC.0.50)[2] <- 'AWC.0.50'
AWC.0.100 <- dcast(d100, id + top + bottom ~ variable, value.var = 'value')
AWC.0.100 <- AWC.0.100[,-c(2,3)]
names(AWC.0.100)[2] <- 'AWC.0.100'
AWC.0.150 <- dcast(d150, id + top + bottom ~ variable, value.var = 'value')
AWC.0.150 <- AWC.0.150[,-c(2,3)]
names(AWC.0.150)[2] <- 'AWC.0.150'
AWC.0.200 <- dcast(d200, id + top + bottom ~ variable, value.var = 'value')
AWC.0.200 <- AWC.0.200[,-c(2,3)]
names(AWC.0.200)[2] <- 'AWC.0.200'
AWC.25.50 <- dcast(s50, id + top + bottom ~ variable, value.var = 'value')
AWC.25.50 <- AWC.25.50[,-c(2,3)]
names(AWC.25.50)[2] <- 'AWC.25.50'
AWC.50.100 <- dcast(s100, id + top + bottom ~ variable, value.var = 'value')
AWC.50.100 <- AWC.50.100[,-c(2,3)]
names(AWC.50.100)[2] <- 'AWC.50.100'
AWC.100.150 <- dcast(s150, id + top + bottom ~ variable, value.var = 'value')
AWC.100.150 <- AWC.100.150[,-c(2,3)]
names(AWC.100.150)[2] <- 'AWC.100.150'
AWC.150.200 <- dcast(s200, id + top + bottom ~ variable, value.var = 'value')
AWC.150.200 <- AWC.150.200[,-c(2,3)]
names(AWC.150.200)[2] <- 'AWC.150.200'
# within each profile, compute weighted means, removing NA if present
dwaclay <- slab(data, id ~ ClayPercent, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
dwasand <- slab(data, id ~ SandPercent, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
dwapH <- slab(data, id ~ pH, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
# reshape to wide format, remove unneeded variables and rename.
DWAClay <- dcast(dwaclay, id + top + bottom ~ variable, value.var = 'value')
DWAClay <- DWAClay[,-c(2,3)]
names(DWAClay)[2] <- 'DWAClay'
DWASand <- dcast(dwasand, id + top + bottom ~ variable, value.var = 'value')
DWASand <- DWASand[,-c(2,3)]
names(DWASand)[2] <- 'DWASand'
DWApH <- dcast(dwapH, id + top + bottom ~ variable, value.var = 'value')
DWApH <- DWApH[,-c(2,3)]
names(DWApH)[2] <- 'DWApH'
#Now calculate depth weighted averages of H2
#Convert to SoilProfileCollection
Sub <- H2
depths(Sub) <- id ~ top + bottom
# within each profile, compute weighted means, removing NA if present
subdwaclay <- slab(Sub, id ~ ClayPercent, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
subdwasand <- slab(Sub, id ~ SandPercent, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
subdwapH <- slab(Sub, id ~ pH, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
subawhc <- slab(Sub, id ~ AWHC, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
# reshape to wide format, remove unneeded variables and rename.
SubDWAClay <- dcast(subdwaclay, id + top + bottom ~ variable, value.var = 'value')
SubDWAClay <- SubDWAClay[,-c(2,3)]
names(SubDWAClay)[2] <- 'SubDWAClay'
SubDWASand <- dcast(subdwasand, id + top + bottom ~ variable, value.var = 'value')
SubDWASand <- SubDWASand[,-c(2,3)]
names(SubDWASand)[2] <- 'SubDWASand'
SubDWApH <- dcast(subdwapH, id + top + bottom ~ variable, value.var = 'value')
SubDWApH <- SubDWApH[,-c(2,3)]
names(SubDWApH)[2] <- 'SubDWApH'
SubAWC <- dcast(subawhc, id + top + bottom ~ variable, value.var = 'value')
SubAWC <- SubAWC[,-c(2,3)]
names(SubAWC)[2] <- 'SubAWC'
slabs <- join(AWC.0.25, AWC.0.50, by = 'id', type = 'inner')
slabs <- join(slabs, AWC.0.100, by = 'id', type = 'inner')
slabs <- join(slabs, AWC.0.150, by = 'id', type = 'inner')
slabs <- join(slabs, AWC.0.200, by = 'id', type = 'inner')
slabs <- join(slabs, AWC.25.50, by = 'id', type = 'inner')
slabs <- join(slabs, AWC.50.100, by = 'id', type = 'inner')
slabs <- join(slabs, AWC.100.150, by = 'id', type = 'inner')
slabs <- join(slabs, AWC.150.200, by = 'id', type = 'inner')
slabs <- join(slabs, DWAClay, by = 'id', type = 'inner')
slabs <- join(slabs, DWASand, by = 'id', type = 'inner')
slabs <- join(slabs, DWApH, by = 'id', type = 'inner')
slabs <- join(slabs, SubDWAClay, by = 'id', type = 'inner')
slabs <- join(slabs, SubDWASand, by = 'id', type = 'inner')
slabs <- join(slabs, SubDWApH, by = 'id', type = 'inner')
slabs <- join(slabs, SubAWC, by = 'id', type = 'inner')
Plot <- join(Plot, PedonDepth, by = 'id', type = 'inner')
# remove anything you don't want H1, H2, Plot, TDWA, SDWA, slabs
H1 <- subset(H1, select = -c(top,bottom,Horizon,Theta_fc,Theta_pwp,AWHC, HzNum) )
SDWA <- subset(SDWA, select = -c(PedonDepth) )
TDWA <- subset(TDWA, select = -c(PedonDepth) )
View(Plot)
View(TDWA)
View(SDWA)
table(SDWA$DryChroma)
table(SDWA$MoistChroma)
table(SDWA$DryValue)
table(SDWA$MoistValue)
colnames(H1) = paste("H1", sep=".", colnames(H1)) # Rename variables for H1
View(`H1`)
rename(H1, c("H1.id"="id"))
View(`H1`)
H1 <- rename(H1, c("H1.id"="id"))
View(`H1`)
View(TDWA)
colnames(TDWA) = paste("Tot",sep=".", colnames(TDWA)) # Rename variables for H1
names(TDWA)[names(TDWA)=="Tot.id"]<-"id"
colnames(SDWA) = paste("Sub",sep=".", colnames(SDWA)) # Rename variables for H1
names(SDWA)[names(SDWA)=="Sub.id"]<-"id"
View(TDWA)
View(SDWA)
Plot$Depth200 <- as.numeric(Plot$PedonDepth == 200)
View(Plot)
View(Plot)
Soils <- merge(Plot,H1,by='id')
View(Soils)
Soils <- merge(Soils,TDWA,by='id')
Soils <- merge(Soils,SDWA,by='id')
View(Soils)
