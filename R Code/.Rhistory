, data = NPhealth,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 500)
#var explained printed
print(live.rf)
View(artr)
# Health
library(plyr)
### % Dry Weight ### (PDW)
# Dry/Fresh
# if plant is better hydrated the # will be low
# if plant is dessicated # will be higher
### Specific Leaf Area ### (SLA)
# m2/g(dry)
# thicker leaves less efficient but tougher (lower SLA)
# look at other peoples SLA
# typical (Bruce Bugbee) is 100 to 600
LA<-read.csv("F:/Health/LeafAreaEpidermalConductance.csv",header=TRUE)
LA <- LA[ which(!LA$Wet.Dry<0.000000), ] # Remove negative weights.
LA <- LA[,c(1,14:15)]
NP<-read.csv("F:/Health/April Sagebrush N and Protein.csv",header=TRUE)
NP <- NP[,c(2,5:6)]
pdw <- ddply( LA, 'Plot', summarize, pdw = mean(PctDryWeight, na.rm = T))
sla <- ddply( LA, 'Plot', summarize, sla = mean(SLAcm, na.rm = T))
LA <- join(pdw, sla, by = 'Plot', type = 'inner')
LA.NP <- merge(NP, LA, by=c("Plot"))
Den <- read.csv("F:/LPI/Output/AprilLPIDensityM2.csv",header=TRUE)
Den <- rename(Den, c("X"="Plot"))
Soil <- read.csv("F:/Soils/SoilEnvironmentaldataApril.csv",header=TRUE, row.names=1)
Soil <- cbind(Plot = rownames(Soil), Soil)
ARTR2 <- Den$ARTR2
artr <- cbind(Soil,ARTR2) ; artr <- artr[, !sapply(artr, is.factor)] # Combine ARTR with Soils, remove the factor variables
ALA <- merge(LA, Soil, by=c("Plot"))
ANP <- merge(NP, Soil, by=c("Plot"))
art <- Den[,c(1,5)]
art <- Den[,c(1,5)]
LAhealth <- merge(LA, art, by=c("Plot"))
NPhealth <- merge(NP, art, by=c("Plot"))
ALAhealth <- merge(ALA, art, by=c("Plot"))
ANPhealth <- merge(ANP, art, by=c("Plot"))
View(ALAhealth)
live.rf = randomForest(as.numeric(ARTR2) ~ pdw+sla+Elevation+DepthClass
, data = LAhealth,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 500)
live.rf = randomForest(as.numeric(ARTR2) ~ pdw+sla+Elevation+DepthClass
, data = ALAhealth,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 500)
#var explained printed
print(live.rf)
varImpPlot(live.rf)
live.rf = randomForest(as.numeric(ARTR2) ~ pdw+sla
, data = LAhealth,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 500)
print(live.rf)
varImpPlot(live.rf)
live.rf = randomForest(as.numeric(ARTR2) ~ pdw+sla+Elevation+DepthClass
, data = ALAhealth,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 500)
print(live.rf)
varImpPlot(live.rf)
Den <- read.csv("F:/LPI/Output/AprilLPIDensityM2.csv",header=TRUE)
Soil <- read.csv("F:/Soils/SoilEnvironmentaldataApril.csv",header=TRUE, row.names=1)
hist(Den)
hist(Den[,1])
hist(Den[,5])
View(Den)
Den <- read.csv("F:/LPI/Output/AprilLPIDensityM2.csv",header=TRUE, row.names=1)
View(Den)
View(Soil)
hist(Den[,1])
qqnorm(Den[,1]); qqline(Den[,1])
hist(Den[,2])
qqnorm(Den[,2]); qqline(Den[,2])
hist(Den[,3])
qqnorm(Den[,3]); qqline(Den[,3])
View(Den)
hist(Den[,4])
qqnorm(Den[,4]); qqline(Den[,4])
hist(Den[,5])
qqnorm(Den[,5]); qqline(Den[,5])
hist(Den[,6])
qqnorm(Den[,6]); qqline(Den[,6])
for(i in names(Den)){
Den[[paste(i, 'length', sep="_")]] <- str_length(Den[[i]])
}
list()
list(Dat)
list(Den)
ls(Den)
for(i in 1:ncol(Den)){
hist(Den[,i],4)}
for(i in 1:ncol(Den)){
hist(Den[,i])}
for(i in 1:ncol(Den)){
hist(Den[,i],39)}
for(i in 1:ncol(Den)){
hist(Den[,i])}
for (column in Den[class=='numeric']) {
dev.new()
hist(column)
}
for (column in Den) {
dev.new()
hist(column)
}
warnings()
for (column in Den) {
hist(column)
}
for (column in Den) {
hist(column)
}
for (column in Den) {
hist(column),main=names(Den)
}
for (column in Den) {
hist(column,main=names(Den))
}
for (column in Den) {
hist(column,main=names(Den)[i])
}
for (column in Den) {
hist(column,main=names(column)[i])
}
for (column in Den) {
hist(column,main=names(column)[i])
}
for (column in Den) {
hist(column,main=names(Den(column))[i])
}
for (column in Den) {
hist(column,main=names(Den)[i])
}
for (column in Den) {
hist(column[,i],main=names(Den)[i])
}
for (column in Den) {
hist(Den[,i],main=names(Den)[i])
}
for (column in Den) {
hist(Den[i],main=names(Den)[i])
}
for (column in Den) {
hist(column[,i],main=names(Den)[i])
}
for (column in Den) {
hist(column[i],main=names(Den)[i])
}
for (column in Den) {
hist(column,main=names(column)[i])
}
for (column in Den) {
hist(column,main=names(Den)[i])
}
for (column in Den) {
hist(column,main=names(Den$column)[i])
}
plotHistFunc <- function(Den, na.rm = TRUE, ...) {
nm <- names(Den)
for (i in seq_along(nm)) {
print(ggplot(Den,aes_string(Den = nm[i])) + geom_histogram(alpha = .5,fill = "mediumseagreen")) }
}
plotHistFunc <- function(Den, na.rm = TRUE, ...) {
nm <- names(Den)
for (i in seq_along(nm)) {
hist(Den,aes_string(Den = nm[i])) qqnorm(alpha = .5,fill = "mediumseagreen")) }
}
plotHistFunc <- function(Den, na.rm = TRUE, ...) {
nm <- names(Den)
for (i in seq_along(nm)) {
hist(Den,aes_string(Den = nm[i])) qqnorm(Den,fill = "mediumseagreen")) }
}
plotHistFunc <- function(Den, na.rm = TRUE, ...) {
nm <- names(Den)
for (i in seq_along(nm)) {
hist(Den,aes_string(Den = nm[i])) qqnorm(Den,aes_string(Den = nm[i]),fill = "mediumseagreen")) }
}
plotHistFunc <- function(Den, na.rm = TRUE, ...) {
nm <- names(Den)
for (i in seq_along(nm)) {
hist(Den,aes_string(Den = nm[i])) qqnorm(Den,aes_string(Den = nm[i])) }
}
plotHistFunc <- function(Den, na.rm = TRUE, ...) {
nm <- names(Den)
for (i in seq_along(nm)) {
hist(Den,aes_string(Den = nm[i])) + qqnorm(Den,aes_string(Den = nm[i])) }
}
Den <- read.csv("F:/LPI/Output/AprilLPIDensityM2.csv",header=TRUE, row.names=1)
Soil <- read.csv("F:/Soils/SoilEnvironmentaldataApril.csv",header=TRUE, row.names=1)
plotHistFunc <- function(Den, na.rm = TRUE, ...) {
nm <- names(Den)
for (i in seq_along(nm)) {
hist(Den,aes_string(Den = nm[i])) + qqnorm(Den,aes_string(Den = nm[i])) }
}
plotHistFunc(Den) ## execute function
View(Den)
is.numeric(Den)
is.character(Den)
is.factor(Den)
as.numeric(Den)
Den<-as.numeric(as.character(Den))
Den <- read.csv("F:/LPI/Output/AprilLPIDensityM2.csv",header=TRUE, row.names=1)
Soil <- read.csv("F:/Soils/SoilEnvironmentaldataApril.csv",header=TRUE, row.names=1)
Den1<-as.numeric(as.character(Den))
Den <- read.csv("F:/LPI/Output/AprilLPIDensityM2.csv",header=TRUE, row.names=1)
Soil <- read.csv("F:/Soils/SoilEnvironmentaldataApril.csv",header=TRUE, row.names=1)
is.numeric(Den)
is.numeric(Den$ACHY)
for(col in names(Den)){
Den[[col]] <- scale(Den[[col]])
}
View(Den)
for(col in names(Den)){
Den[[col]] <- hist(Den[[col]])
}
library(randomForest)
# Read in Soil and LPI Data
soil <- read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
lpi <- read.csv("F:/LPI/Output/USGSLPIplotXspp.csv",header=TRUE, row.names=1)
belt <- read.csv("F:/ShrubDensity/PresenceAbsence/Output/USGSplotXspp.csv",header=TRUE, row.names=1)
# Keep only usgs sites that have both soil and veg data.
beltApril <- belt[c(61:159),]
beltUSGS <- belt[c("1","2","10","11","12","14","15","16","17","18","19","20","21","23","24","32","33","38","39","40","42","43","44","47","48","50","57","59","60","61","67","68","73","77","80","82","90"),]
belt <- rbind(beltApril, beltUSGS)
# Remove Predetermined Variables (Covariance and VIF)
soil <- subset(soil, select = -c(DepthClass,Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,H1.Texture,SlopeShape,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
# Combine Plant Data and Soils Data
soilplant <- soil
#soilplant$ARTR2 <- lpi$ARTR2
soilplant$ATCA2 <- lpi$ATCA2
# Which rows have NA present somewhere
rownames(soil)[rowSums(is.na(soil)) > 0]
# Replace NA with 0 (necesary for Boruta but not Random Forest)
soil[is.na(soil)] <- 0 # replace NA with 0
# Run Random Forest
live.rf = randomForest(as.numeric(ATCA2) ~ .
, data = soilplant,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 500)
#var explained printed
print(live.rf)
(rf <- randomForest(x=soil,y=as.numeric(lpi$ATCA2),proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 501))
plot(live.rf)
plot(rf)
varImpPlot(live.rf, sort=TRUE, main = 'Live Sagebrush')
varImpPlot(rf, sort=TRUE, main = 'Live Sagebrush')
plot( predict(live.rf), y=live.rf$y)
abline(c(0,1),col=2)
plot( predict(rf), y=lpi$ARTR2)
abline(c(0,1),col=2)
data(nutrigenomic, package = "randomForestSRC")
## nice wrapper for making multivariate formula
mvrfsrc.f <- function(ynames, dat) {
as.formula(paste("Multivar(", paste(ynames, collapse = ","),paste(") ~ ."), sep = ""))
}
## multivariate mixed forest call
mv.obj <- rfsrc(mvrfsrc.f(colnames(nutrigenomic$lipids)),
data.frame(do.call(cbind, nutrigenomic)), nsplit = 10)
get.error <- function(obj) {
100 * c(sapply(obj$yvar.names, function(nn) {
o.coerce <- randomForestSRC:::coerce.multivariate(obj, nn)
if (o.coerce$family == "class") {
tail(o.coerce$err.rate[, 1], 1)
}
else {
tail(o.coerce$err.rate, 1) / var(o.coerce$yvar, na.rm = TRUE)
}
}))
}
## pull the standardized VIMP from a forest object
get.vimp <- function(obj) {
vimp <- 100 * do.call(cbind, lapply(obj$yvar.names, function(nn) {
o.coerce <- randomForestSRC:::coerce.multivariate(obj, nn)
if (o.coerce$family == "class") {
o.coerce$importance[, 1]
}
else {
o.coerce$importance / var(o.coerce$yvar, na.rm = TRUE)
}
}))
colnames(vimp) <- obj$yvar.names
vimp
}
serr <- get.error(mv.obj)
rfsrc?
?rfsrc
??rfsrc
install.packages("randomForestSRC")
mv.obj <- rfsrc(mvrfsrc.f(colnames(nutrigenomic$lipids)),
data.frame(do.call(cbind, nutrigenomic)), nsplit = 10)
#load the data
lpi <- read.csv("F:/LPI/Output/USGSLPIplotXspp.csv",header=TRUE, row.names=1)
soil <- read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
# Remove Predetermined Variables (Covariance and VIF)
soil <- subset(soil, select = -c(DepthClass,Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,H1.Texture,SlopeShape,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
soil <- subset(soil, select = -c(Tot.MoistValue,DWAClay,H1.SandPercent,BioticCrustClass,H1.MoistCClass,H1.MoistCClass,CarbonateStage,Depth200, Tot.MoistCClass,H1.Depth,Slope,Elevation))
# Which rows have NA present somewhere
rownames(soil)[rowSums(is.na(soil)) > 0]
# Replace NA with 0 (necesary for Boruta but not Random Forest)
soil[is.na(soil)] <- 0 # replace NA with 0
# Combine Plant Data and Soils Data
sl <- soil
sl$ARTR2 <- lpi$ARTR2
# this data has 136 rows
nrow(sl)
# look at the first few
head(sl)
# splitdf function will return a list of training and testing sets
splitdf <- function(dataframe, seed=NULL) {
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainindex <- sample(index, trunc(length(index)/2))
trainset <- dataframe[trainindex, ]
testset <- dataframe[-trainindex, ]
list(trainset=trainset,testset=testset)
}
#apply the function
splits <- splitdf(sl, seed=808)
#it returns a list - two data frames called trainset and testset
str(splits)
# there are 68 observations in each data frame
lapply(splits,nrow)
lapply(splits,head)
#view the first few columns in each data frame
# save the training and testing sets as data frames
training <- splits$trainset
testing <- splits$testset
########### Optional: apply to  data using randomForest ###########
#load the randomForest library. if you havent installed it, run the next line
#install.packages("randomForest")
library(randomForest)
#fit the randomforest model
model <- randomForest(as.numeric(ARTR2) ~ .
, data = training,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 500)
print(model)
#what are the important variables (via permutation)
varImpPlot(model, type=1)
#predict the outcome of the testing data
predicted <- predict(model, newdata=testing[ ,-23])
# what is the proportion variation explained in the outcome of the testing data?
# i.e., what is 1-(SSerror/SStotal)
actual <- testing$ARTR2
rsq <- 1-sum((actual-predicted)^2)/sum((actual-mean(actual))^2)
print(rsq)
library(randomForest)
install.packages("randomForest")
library(randomForest)
soil <- read.csv("E:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
lpi <- read.csv("E:/LPI/Output/USGSLPIplotXspp.csv",header=TRUE, row.names=1)
belt <- read.csv("E:/ShrubDensity/PresenceAbsence/Output/USGSplotXspp.csv",header=TRUE, row.names=1)
beltApril <- belt[c(61:159),]
beltUSGS <- belt[c("1","2","10","11","12","14","15","16","17","18","19","20","21","23","24","32","33","38","39","40","42","43","44","47","48","50","57","59","60","61","67","68","73","77","80","82","90"),]
belt <- rbind(beltApril, beltUSGS)
soil <- subset(soil, select = -c(DepthClass,Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,H1.Texture,SlopeShape,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
# Combine Plant Data and Soils Data
soilplant <- soil
#soilplant$ARTR2 <- lpi$ARTR2
soilplant$ATCA2 <- lpi$ATCA2
rownames(soil)[rowSums(is.na(soil)) > 0]
?randomForest
soil <- subset(soil, -c(23,24,40,48,67))
View(soil)
View(soil)
soil <- subset(soil, select = -c(DepthClass,Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,H1.Texture,SlopeShape,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
soilplant <- soil
#soilplant$ARTR2 <- lpi$ARTR2
soilplant$ATCA2 <- lpi$ATCA2
# Which rows have NA present somewhere
rownames(soil)[rowSums(is.na(soil)) > 0]
soilnew <- na.omit(soil)
soil <- soilnew
View(soil)
soilnew <- na.omit(soilplant)
soilplant <- soilnew
live.rf = randomForest(as.numeric(ATCA2) ~ .
, data = soilplant,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 500)
#var explained printed
print(live.rf)
summary(live.rf)
plot(live.rf)
(rf <- randomForest(x=soil,y=as.numeric(lpi$ATCA2),proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 501))
soil <- subset(soil, select = -c(DepthClass,Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,H1.Texture,SlopeShape,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
soilplant <- soil
#soilplant$ARTR2 <- lpi$ARTR2
soilplant$ATCA2 <- lpi$ATCA2
rownames(soilplant)[rowSums(is.na(soilplant)) > 0]
rownames(soil)[rowSums(is.na(soil)) > 0]
soil <- read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
soil <- subset(soil, select = -c(DepthClass,Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,H1.Texture,SlopeShape,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
soil <- read.csv("E:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
lpi <- read.csv("E:/LPI/Output/USGSLPIplotXspp.csv",header=TRUE, row.names=1)
belt <- read.csv("E:/ShrubDensity/PresenceAbsence/Output/USGSplotXspp.csv",header=TRUE, row.names=1)
beltApril <- belt[c(61:159),]
beltUSGS <- belt[c("1","2","10","11","12","14","15","16","17","18","19","20","21","23","24","32","33","38","39","40","42","43","44","47","48","50","57","59","60","61","67","68","73","77","80","82","90"),]
belt <- rbind(beltApril, beltUSGS)
soil <- subset(soil, select = -c(DepthClass,Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,H1.Texture,SlopeShape,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
soilplant <- soil
#soilplant$ARTR2 <- lpi$ARTR2
soilplant$ATCA2 <- lpi$ATCA2
rownames(soil)[rowSums(is.na(soil)) > 0]
live.rf = randomForest(as.numeric(ATCA2) ~ .
, data = soilplant,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 500)
print(live.rf)
summary(live.rf)
(rf <- randomForest(x=soil,y=as.numeric(lpi$ATCA2),proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 501))
plot(live.rf)
varImpPlot(live.rf, sort=TRUE, main = 'Live Sagebrush')
pairs(soil)
plot( predict(live.rf), y=live.rf$y)
plot(soilplant$PedonDepth, soilplant$ATCA2)
plot(soilplant$DWApH, soilplant$ATCA2)
partialPlot(live.rf, soilplant, PedonDepth, "versicolor")
partialPlot(live.rf, soilplant, DWApH)
partialPlot(live.rf, soilplant, PedonDepth)
partialPlot(live.rf, soilplant, DWAClay)
partialPlot(live.rf, soilplant, DWApH)
soilplant <- na.omit(soilplant)
live.rf = randomForest(as.numeric(ATCA2) ~ .
, data = soilplant,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 500)
print(live.rf)
Rplot(live.rf)
plot(live.rf)
varImpPlot(live.rf, sort=TRUE, main = 'Live Sagebrush')
plot( predict(live.rf), y=live.rf$y)
abline(c(0,1),col=2)
partialPlot(live.rf, soilplant, PedonDepth)
partialPlot(live.rf, soilplant, DWApH)
hist(soilplant$ATCA2)
?hist
hist(soilplant$ATCA2, breaks=35)
pairs(soilplant)
test <- soilplant[,c(23,10,12,20,21,22)]
test.rf = randomForest(as.numeric(ATCA2) ~ .
, data = test,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,
ntree = 500)
plot(test.rf)
varImpPlot(live.rf, sort=TRUE, main = 'Live Sagebrush')
varImpPlot(test.rf, sort=TRUE, main = 'Live Sagebrush')
test.rf$y
plot( predict(test.rf), y=test.rf$y)
test.rf
live.rf
partialPlot(test.rf, soilplant, H1.pH)
partialPlot(test.rf, soilplant, DWApH)
test$MaxEffervescence <- as.ordered(test$MaxEffervescence)
test.rf = randomForest(as.numeric(ATCA2) ~ .
, data = test,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,
ntree = 500)
test.rf
plot(test.rf)
varImpPlot(test.rf, sort=TRUE, main = 'Live Sagebrush')
plot( predict(test.rf), y=test.rf$y)
abline(c(0,1),col=2)
partialPlot(test.rf, soilplant, H1.pH)
partialPlot(test.rf, soilplant, DWApH)
partialPlot(test.rf, soilplant, MaxEffervescence)
pairs(test)
install.packages("quantregForest")
library(quantregForest)
test[-1]
test[1]
qrf <- quantregForest(x=test[-1], y=test[1], importance=TRUE)
test$ATCA2 <- as.numeric(test$ATCA2)
qrf <- quantregForest(x=test[-1], y=test[1], importance=TRUE)
check <- test[1]
str(check)
qrf <- quantregForest(x=test[-1], y=test$ATCA2, importance=TRUE)
plot(qrf)
## compute out-of-bag predictions
quant.outofbag <- predict(qrf)
## predict test data using all obervations per node for prediction
quant.newdata <- predict(qrf, newdata= Xtest, all=TRUE)
## look at computed importance measure of predictors
importance(qrf)
qrf
summary(qrf)
varImpPlot.qrf(qrf)
