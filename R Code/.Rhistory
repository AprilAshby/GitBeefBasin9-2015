# Value
pairs(~Tot.DryValue+H1.DryValue+Tot.MoistValue+H1.MoistValue+denu,data=artru,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="All Value Variables")
pairs(~Tot.DryValue+H1.DryValue+Tot.MoistValue+H1.MoistValue+dena,data=artra,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="April Value Variables")
Clay <- subset(soil, select = c(DWAClay,H1.ClayPercent) )
Sand <- subset(soil, select = c(DWASand,H1.SandPercent) )
pH <- subset(soil, select = c(DWApH,H1.pH) )
Effervescence <- subset(soil, select = c(MaxEffervescence,H1.EfferScale) )
Red <-  subset(soil, select = c(Tot.MoistRed,H1.MoistRed) )
CClass <- subset(soil, select = c(Tot.MoistCClass,H1.MoistCClass) )
Value <- subset(soil, select = c(Tot.MoistValue,H1.MoistValue) )
Subset <- subset(soil, select = c(DWAClay,H1.ClayPercent,DWASand,
H1.SandPercent,H1.Texture,H1.SandSize,
DWApH,H1.pH,MaxEffervescence,H1.EfferScale,
Tot.MoistRed,H1.MoistRed,Tot.MoistCClass,
H1.MoistCClass,Tot.MoistValue,H1.MoistValue
) )
# Soil Variables Subset based on correlation and VIF
soil<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
soila<- soil[c(1:99),]
rownames(soil)[rowSums(is.na(soil)) > 0]
# Clay, Sand, & pH = DWA & H1
# Effervescence = Max & H1
# Color = Moist?
# Sand over AWHC
Subset <- subset(soil, select = c(DWAClay,H1.ClayPercent,DWASand,
H1.SandPercent,H1.Texture,H1.SandSize,
DWApH,H1.pH,MaxEffervescence,H1.EfferScale,
Tot.MoistRed,H1.MoistRed,Tot.MoistCClass,
H1.MoistCClass,Tot.MoistValue,H1.MoistValue
) )
View(Subset)
Subset <- subset(soil, select = c(DWAClay,H1.ClayPercent,DWASand,
H1.SandPercent,H1.Texture,H1.SandSize,
DWApH,H1.pH,MaxEffervescence,H1.EfferScale,
Tot.MoistRed,H1.MoistRed,Tot.MoistCClass,
H1.MoistCClass,Tot.MoistValue,H1.MoistValue,
Elevation, CarbonateStage,BioticCrustClass,
PedonDepth,Depth200,DepthClass,H1.DWA_AWHC,
SlopeShape) )
Sub <- subset(soil, select = c(DWAClay,DWASand,DWApH,H1.DWA_AWHC,
H1.ClayPercent,H1.SandPercent,H1.Texture,
H1.SandSize,H1.pH,H1.EfferScale,H1.MoistRed,
H1.MoistCClass,H1.MoistValue,Tot.MoistRed,
Tot.MoistCClass,Tot.MoistValue,MaxEffervescence,
Elevation,CarbonateStage,BioticCrustClass,
PedonDepth,Depth200,DepthClass,SlopeShape) )
# Soil Variables Subset based on correlation and VIF
soil<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
soila<- soil[c(1:99),]
rownames(soil)[rowSums(is.na(soil)) > 0]
# Clay, Sand, & pH = DWA & H1
# Effervescence = Max & H1
# Color = Moist?
# Sand over AWHC
View(soil)
# Soil Variables Subset based on correlation and VIF
soil<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
soila<- soil[c(1:99),]
rownames(soil)[rowSums(is.na(soil)) > 0]
# Clay, Sand, & pH = DWA & H1
# Effervescence = Max & H1
# Color = Moist?
# Sand over AWHC
Subset <- subset(soil, select = c(DWAClay,H1.ClayPercent,DWASand,
H1.SandPercent,H1.Texture,H1.SandSize,
DWApH,H1.pH,MaxEffervescence,H1.EfferScale,
Tot.MoistRed,H1.MoistRed,Tot.MoistCClass,
H1.MoistCClass,Tot.MoistValue,H1.MoistValue,
Elevation, CarbonateStage,BioticCrustClass,
PedonDepth,Depth200,DepthClass,H1.DWA_AWC,
SlopeShape) )
Sub <- subset(soil, select = c(DWAClay,DWASand,DWApH,H1.DWA_AWC,
H1.ClayPercent,H1.SandPercent,H1.Texture,
H1.SandSize,H1.pH,H1.EfferScale,H1.MoistRed,
H1.MoistCClass,H1.MoistValue,Tot.MoistRed,
Tot.MoistCClass,Tot.MoistValue,MaxEffervescence,
Elevation,CarbonateStage,BioticCrustClass,
PedonDepth,Depth200,DepthClass,SlopeShape) )
# Soil Variables Subset based on correlation and VIF
soil<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
soila<- soil[c(1:99),]
rownames(soil)[rowSums(is.na(soil)) > 0]
# Clay, Sand, & pH = DWA & H1
# Effervescence = Max & H1
# Color = Moist?
# Sand over AWHC
Sub <- subset(soil, select = c(DWAClay,DWASand,DWApH,H1.DWA_AWC,
H1.ClayPercent,H1.SandPercent,H1.Texture,
H1.SandSize,H1.pH,H1.EfferScale,H1.MoistRed,
H1.MoistCClass,H1.MoistValue,Tot.MoistRed,
Tot.MoistCClass,Tot.MoistValue,MaxEffervescence,
Elevation,CarbonateStage,BioticCrustClass,
PedonDepth,Depth200,DepthClass,SlopeShape) )
View(Sub)
library(Hmisc)
# ++++++++++++++++++++++++++++
# flattenCorrMatrix
# ++++++++++++++++++++++++++++
# cormat : matrix of the correlation coefficients
# pmat : matrix of the correlation p-values
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
z <- subset(Sub, select = -c(SlopeShape,DepthClass,H1.Texture,H1.SandSize) )
res<-rcorr(as.matrix(z[,1:42]), type=c("spearman"))
res<-rcorr(as.matrix(z[,1:20]), type=c("spearman"))
corPval <- flattenCorrMatrix(res$r, res$P)
q <- symnum(spearman)
View(corPval)
Susan7 <- corPval[ which((corPval$cor >= 0.7)|(corPval$cor < -0.7)),]
Susan8 <- corPval[ which((corPval$cor >= 0.8)|(corPval$cor < -0.8)),]
View(Susan7)
# panel.smooth function is built in.
# panel.cor puts correlation in upper panels, size proportional to correlation
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(~+DWAClay+DWASand+DWApH+H1.DWA_AWC,data=Sub,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="All Clay Variables")
pairs(~+DWAClay+DWASand+DWApH+H1.DWA_AWC,data=Sub,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="DWA")
pairs(~H1.ClayPercent+H1.SandPercent+H1.Texture,data=Sub,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="")
pairs(~H1.SandSize+H1.pH+H1.EfferScale+H1.MoistRed,data=Sub,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="")
pairs(~H1.MoistCClass+H1.MoistValue+Tot.MoistRed,data=Sub,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="")
pairs(~Tot.MoistCClass+Tot.MoistValue+MaxEffervescence,data=Sub,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="")
pairs(~Elevation+CarbonateStage+BioticCrustClass,data=Sub,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="")
pairs(~PedonDepth+Depth200+DepthClass+SlopeShape,data=Sub,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="")
write.csv(Sub,file="F:/Soils/SoilSubset.csv", row.names=FALSE)
write.csv(Sub,file="F:/Soils/SoilSubset.csv", row.names=TRUE)
u<-read.csv("F:/Soils/SoilSubset.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u$ARTR2 <- u.den$ARTR2
View(u)
Boruta.live <- Boruta(ARTR2~., data = u, doTrace = 2, ntree = 1000)
library(Boruta)
library(randomForest)
u<-read.csv("F:/Soils/SoilSubset.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u$ARTR2 <- u.den$ARTR2
Boruta.live <- Boruta(ARTR2~., data = u, doTrace = 2, ntree = 1000)
rownames(u)[rowSums(is.na(u)) > 0]
View(u)
?Boruta
Boruta.live <- Boruta(ARTR2~., data = u, doTrace = 2, ntree = 1000, getImp = getImpRfZ)
Boruta.live <- Boruta(ARTR2~., data = u, doTrace = 2, ntree = 1000,na.action = na.omit)
u[is.na(u)] <- 0 # replace NA with 0
Boruta.live <- Boruta(ARTR2~., data = u, doTrace = 2, ntree = 1000)
Boruta.live
TentativeRoughFix(Boruta.live, averageOver = Inf)
Boruta.live <- Boruta(ARTR2~., data = u, doTrace = 2, ntree = 1000)
Boruta.live
TentativeRoughFix(Boruta.live, averageOver = Inf)
Boruta.live <- Boruta(ARTR2~., data = u, doTrace = 2, ntree = 1000)
Boruta.live
TentativeRoughFix(Boruta.live, averageOver = Inf)
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = u,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit, mtry = 2,
ntree = 1000)
varImpPlot(live.rf, main = 'Live Sagebrush')
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = u,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit, mtry = 2,
ntree = 1000)
varImpPlot(live.rf, main = 'Live Sagebrush')
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = u,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit, mtry = 2,
ntree = 1000)
varImpPlot(live.rf, main = 'Live Sagebrush')
pairs(~H1.Texture+H1.ClayPercent+H1.SandPercent,data=Sub,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="")
# Soil Variables Subset based on correlation and VIF
soil<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
soila<- soil[c(1:99),]
rownames(soil)[rowSums(is.na(soil)) > 0]
# Clay, Sand, & pH = DWA & H1
# Effervescence = Max & H1
# Color = Moist?
# Sand over AWHC
Sub <- subset(soil, select = c(DWAClay,DWASand,DWApH,H1.DWA_AWC,
H1.ClayPercent,H1.SandPercent,H1.Texture,
H1.SandSize,H1.pH,H1.EfferScale,H1.MoistRed,
H1.MoistCClass,H1.MoistValue,Tot.MoistRed,
Tot.MoistCClass,Tot.MoistValue,MaxEffervescence,
Elevation,CarbonateStage,BioticCrustClass,
PedonDepth,Depth200,DepthClass,SlopeShape) )
write.csv(Sub,file="F:/Soils/SoilSubset.csv", row.names=TRUE)
pairs(~DWAClay+DWASand+DWApH+H1.DWA_AWC,data=Sub,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="DWA")
pairs(~H1.ClayPercent+H1.SandPercent+H1.Texture,data=Sub,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="")
pairs(~H1.SandSize+H1.pH+H1.EfferScale+H1.MoistRed,data=Sub,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="")
pairs(~H1.MoistCClass+H1.MoistValue+Tot.MoistRed,data=Sub,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="")
pairs(~Tot.MoistCClass+Tot.MoistValue+MaxEffervescence,data=Sub,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="")
pairs(~Elevation+CarbonateStage+BioticCrustClass,data=Sub,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="")
pairs(~PedonDepth+Depth200+DepthClass+SlopeShape,data=Sub,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="")
pairs(~H1.Texture+H1.ClayPercent+H1.SandPercent,data=Sub,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="")
# panel.smooth function is built in.
# panel.cor puts correlation in upper panels, size proportional to correlation
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(~H1.Texture+H1.ClayPercent+H1.SandPercent,data=Sub,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="")
library(Boruta)
library(randomForest)
u<-read.csv("F:/Soils/SoilSubset.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u$ARTR2 <- u.den$ARTR2
rownames(u)[rowSums(is.na(u)) > 0]
u[is.na(u)] <- 0 # replace NA with 0
Boruta.live <- Boruta(ARTR2~., data = u, doTrace = 2, ntree = 1000)
Boruta.live
TentativeRoughFix(Boruta.live, averageOver = Inf)
print(Boruta.live)
Boruta.live$finalDecision
u<-read.csv("F:/Soils/SoilSubset.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u$ARTR2 <- u.den$ARTR2
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = u,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit, mtry = 2,
ntree = 1000)
varImpPlot(live.rf, main = 'Live Sagebrush')
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = u,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit, mtry = 2,
ntree = 1000)
varImpPlot(live.rf, main = 'Live Sagebrush')
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = u,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit, mtry = 2,
ntree = 1000)
varImpPlot(live.rf, main = 'Live Sagebrush')
importanceOrder=order(-fit$importance)
importanceOrder=order(-live.rf$importance)
names=rownames(live.rf$importance)[importanceOrder][1:15]
par(mfrow=c(5, 3), xpd=NA)
for (name in names)
+   partialPlot(live.rf, df, eval(name), main=name, xlab=name,ylim=c(-.2,.9))
importanceOrder=order(-live.rf$importance)
names=rownames(live.rf$importance)[importanceOrder][1:15]
par(mfrow=c(5, 3), xpd=NA)
for (name in names)
partialPlot(live.rf, df, eval(name), main=name, xlab=name,ylim=c(-.2,.9))
names(df)=c(live.rf)
names(live.rf)=c(1:ncol(live.rf))
names(u)=c(1:ncol(u))
importanceOrder=order(-live.rf$importance)
names=rownames(live.rf$importance)[importanceOrder][1:15]
par(mfrow=c(5, 3), xpd=NA)
for (name in names)
partialPlot(live.rf, df, eval(name), main=name, xlab=name,ylim=c(-.2,.9))
names(live.rf)=c(1:ncol(u))
names(u)=c(1:ncol(u))
importanceOrder=order(-live.rf$importance)
names=rownames(live.rf$importance)[importanceOrder][1:15]
par(mfrow=c(5, 3), xpd=NA)
for (name in names)
partialPlot(live.rf, df, eval(name), main=name, xlab=name,ylim=c(-.2,.9))
library(Boruta)
library(randomForest)
u<-read.csv("F:/Soils/SoilSubset.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u$ARTR2 <- u.den$ARTR2
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = u,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit, mtry = 2,
ntree = 1000)
varImpPlot(live.rf, main = 'Live Sagebrush')
allX=paste("X",1:ncol(u),sep="")
names(u)=c("Y",1:ncol(u))
allX=paste("X",1:ncol(u),sep="")
names(u)=c("Y",1:ncol(allX))
?names
names(u)
names(u)=c("Y",1:ncol(allX))
allX=paste("X",1:ncol(u),sep="")
names(u)=c("Y",1:ncol(allX))
allX=paste("X",1:ncol(u),sep="")
names(u)=c("Y",1:ncol(allX))
allX=paste("X",1:ncol(u),sep="")
names(u)=c("Y",allX)
partialPlot(live.rf, df, eval(name), main=name, xlab=name,ylim=c(-.2,.9))
partialPlot(live.rf, df, eval(name), main=names, xlab=name,ylim=c(-.2,.9))
partialPlot(live.rf, df, eval(name), main=names, xlab=names,ylim=c(-.2,.9))
partialPlot(live.rf, df, eval(names), main=names, xlab=names,ylim=c(-.2,.9))
importanceOrder=order(-live.rf$importance)
names=rownames(live.rf$importance)[importanceOrder][1:15]
par(mfrow=c(5, 3), xpd=NA)
for (name in names)
partialPlot(live.rf, u, eval(name), main=name, xlab=name,ylim=c(-.2,.9))
?partialPlot
partialPlot(live.rf, u,xvar=ARTR2 eval(name), main=name, xlab=name,ylim=c(-.2,.9))
partialPlot(live.rf, u,xvar=ARTR2, eval(name), main=name, xlab=name,ylim=c(-.2,.9))
partialPlot(live.rf, u,x.var=ARTR2, eval(name), main=name, xlab=name,ylim=c(-.2,.9))
importanceOrder=order(-live.rf$importance)
names=rownames(live.rf$importance)[importanceOrder][1:15]
par(mfrow=c(5, 3), xpd=NA)
for (name in names)
partialPlot(live.rf, u,x.var=ARTR2, eval(name), main=name, xlab=name,ylim=c(-.2,.9))
importanceOrder=order(-live.rf$importance)
names=rownames(live.rf$importance)[importanceOrder][1:15]
par(mfrow=c(5, 3), xpd=NA)
for (name in names)
partialPlot(live.rf, u,x.var=ARTR2, eval(name), main=name, xlab=name,ylim=c(-.2,.9))
par("mar")
ov <- par(5.1 4.1 4.1 2.1)
op <- par(oma=c(5.1, 4.1, 4.1, 2.1))
par(mar=c(1,1,1,1))
importanceOrder=order(-live.rf$importance)
names=rownames(live.rf$importance)[importanceOrder][1:15]
par(mfrow=c(5, 3), xpd=NA)
for (name in names)
partialPlot(live.rf, u,x.var=ARTR2, eval(name), main=name, xlab=name,ylim=c(-.2,.9))
par(mar=c(.5,.5,.5,.5))
importanceOrder=order(-live.rf$importance)
names=rownames(live.rf$importance)[importanceOrder][1:15]
par(mfrow=c(5, 3), xpd=NA)
for (name in names)
partialPlot(live.rf, u,x.var=ARTR2, eval(name), main=name, xlab=name,ylim=c(-.2,.9))
par(op)
par("mar")
par(op)
par("mar")
par("oma")
op <- par(mar=c(5.1, 4.1, 4.1, 2.1))
par("mar")
partialPlot(live.rf,u1, H1.ClayPercent, main = 'Live Sagebrush Partial Dependence on ...')
partialPlot(live.rf,u, H1.ClayPercent, main = 'Live Sagebrush Partial Dependence on ...')
partialPlot(live.rf,u1, PedonDepth, main = 'Live Sagebrush Partial Dependence on ...')
partialPlot(live.rf,u, H1.ClayPercent, main = 'Live Sagebrush Partial Dependence on ...')
partialPlot(live.rf,u, H1.ClayPercent, main = 'Live Sagebrush Partial Dependence on ...')
partialPlot(live.rf,u, H1.ClayPercent, main = 'Live Sagebrush Partial Dependence on ...')
par(mar=c(.5,.5,.5,.5))
partialPlot(live.rf,u, H1.ClayPercent, main = 'Live Sagebrush Partial Dependence on ...')
par(mar=c(5.1, 4.1, 4.1, 2.1))
partialPlot(live.rf,u, H1.ClayPercent, main = 'Live Sagebrush Partial Dependence on ...')
par(mar=c(1,1,1,1))
partialPlot(live.rf,u, H1.ClayPercent, main = 'Live Sagebrush Partial Dependence on ...')
par(mar=c(2,2,2,2))
partialPlot(live.rf,u, H1.ClayPercent, main = 'Live Sagebrush Partial Dependence on ...')
partialPlot(live.rf,u, PedonDepth, main = 'Live Sagebrush Partial Dependence on ...')
?par
par(mar=c(5.1, 4.1, 4.1, 2.1))
partialPlot(live.rf,u, H1.ClayPercent, main = 'Live Sagebrush Partial Dependence on ...')
partialPlot(live.rf,u, PedonDepth, main = 'Live Sagebrush Partial Dependence on ...')
partialPlot(live.rf,u, MaxAWHC, main = 'Live Sagebrush Partial Dependence on ...')
partialPlot(live.rf,u, H1.DWA_AWC, main = 'Live Sagebrush Partial Dependence on ...')
partialPlot(live.rf,u, H1.Texture, main = 'Live Sagebrush Partial Dependence on ...')
partialPlot(live.rf,u, H1.MoistRed, main = 'Live Sagebrush Partial Dependence on ...')
partialPlot(live.rf,u, DepthClass, main = 'Live Sagebrush Partial Dependence on ...')
partialPlot(live.rf,u, H1.SandSize, main = 'Live Sagebrush Partial Dependence on ...')
partialPlot(live.rf,u, SlopeShape, main = 'Live Sagebrush Partial Dependence on ...')
partialPlot(live.rf,u, Elevation, main = 'Live Sagebrush Partial Dependence on ...')
partialPlot(live.rf,u, H1.ClayPercent, main = 'Live Sagebrush Partial Dependence on ...')
partialPlot(live.rf,u, PedonDepth, main = 'Live Sagebrush Partial Dependence on ...')
partialPlot(live.rf,u, H1.DWA_AWC, main = 'Live Sagebrush Partial Dependence on ...')
partialPlot(live.rf,u, H1.Texture, main = 'Live Sagebrush Partial Dependence on ...')
partialPlot(live.rf,u, H1.MoistRed, main = 'Live Sagebrush Partial Dependence on ...')
partialPlot(live.rf,u, DepthClass, main = 'Live Sagebrush Partial Dependence on ...')
partialPlot(live.rf,u, H1.SandSize, main = 'Live Sagebrush Partial Dependence on ...')
partialPlot(live.rf,u, SlopeShape, main = 'Live Sagebrush Partial Dependence on ...')
?rfcv
x <- u[,c(1:24)]
y <- u[,25]
rf.cv <- rfcv(x, y, cv.fold=10)
multi.collinear(x, p = 0.05)
library(rfUtilities)
multi.collinear(x, p = 0.05)
library(Boruta)
library(randomForest)
u<-read.csv("F:/Soils/SoilSubset.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u$ARTR2 <- u.den$ARTR2
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = u,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit, mtry = 2,
ntree = 1000)
varImpPlot(live.rf, main = 'Live Sagebrush')
# read in and configure april and usgs shrub count data
d.usgs <- read.csv("F:/ShrubDensity/PresenceAbsence/Output/USGSplotXspp.csv", row.names=1)
d.usgs[is.na(d.usgs)] <- 0 # replace NA with 0
d.april <- d.usgs[-c(1:60),] # pull out april data
d.usgs <- d.usgs[c("1","2","10","11","12","14","15","16","17","18","19","20","21","23","24","32","33","38","39","40","42","43","44","47","48","50","57","59","60","61","67","68","73","77","80","82","90"),] # keep only veg with soils data
d.usgs <- rbind(d.usgs,d.april) # combine april and usgs (with only those that have soils data) into one
d.usgs <- d.usgs[ order(row.names(d.usgs)), ] # Order so row.names matches soils data
# Pull out ARTR2 and ARTR2.D
d.usgs.l <- d.usgs$ARTR2
d.usgs.d <- d.usgs$ARTR2.D
d.april.l <- d.april$ARTR2
d.april.d <- d.april$ARTR2.D
d.usgs.ld <- d.usgs$ARTR2 + d.usgs$ARTR2.D # add ARTR & ARTR.D into ARTR.LD
d.april.ld <- d.april$ARTR2 + d.april$ARTR2.D # add ARTR & ARTR.D into ARTR.LD
# Read in and configure april and usgs soils data
s.usgs <- read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",row.names=1)
s.usgs[is.na(s.usgs)] <- 0 # replace NA with 0
s.april <- s.usgs[c(1:99),] # pull out april data
s.usgs <- s.usgs[ order(row.names(s.usgs)), ] # Order so row.names matches veg data
# Combine ARTR2, ARTR2.D and ARTR2.LD to soils data
april.l <- cbind(d.april.l,s.april) #combine density and soils for april ARTR
usgs.l <- cbind(d.usgs.l,s.usgs) #combine density and soils for usgs ARTR
april.d <- cbind(d.april.d,s.april) #combine density and soils for april ARTR
usgs.d <- cbind(d.usgs.d,s.usgs) #combine density and soils for usgs ARTR
april.ld <- cbind(d.april.ld,s.april) #combine density and soils for april ARTR.LD
usgs.ld <- cbind(d.usgs.ld,s.usgs) #combine density and soils for usgs ARTR.LD
names(usgs.l)[1] <- "ARTR2" # Rename to something meaningful
names(april.l)[1] <- "ARTR2" # Rename to something meaningful
names(usgs.d)[1] <- "ARTR2.D" # Rename to something meaningful
names(april.d)[1] <- "ARTR2.D" # Rename to something meaningful
names(usgs.ld)[1] <- "ARTR2.LD" # Rename to something meaningful
names(april.ld)[1] <- "ARTR2.LD" # Rename to something meaningful
kappa=function(x){
n=sum(x)
pobs=(x[1,1]+x[2,2])/n
pexp=(sum(x[1,])*sum(x[,1])+sum(x[2,])*sum(x[,2]))/n^2
kappa=(pobs-pexp)/(1-pexp)
t1=0
t2=0
t3=0
pii=x/n
pidot=apply(pii,1,sum)
pdotj=apply(pii,2,sum)
for(i in 1:2){
t1 = t1 + pii[i,i]*((1-pexp) - (1-pobs)*(pidot[i]+pdotj[i]))^2
}
t2 = pii[1,2]*(pdotj[1]+pidot[2])^2 + pii[2,1]*(pdotj[2] + pidot[1])^2
t3 = (pobs*pexp-2*pexp+pobs)^2
vhat = (t1 + t2*(1-pobs)^2 -t3)/(n*(1-pexp)^4)
se=sqrt(vhat)
return(c(kappa,se))
}
class.sum=function(truth,predicted){
xt=table(truth,round(predicted+0.000001))
pcc=round(100*sum(diag(xt))/sum(xt),2)
spec=round(100*xt[1,1]/sum(xt[1,]),2)
sens=round(100*xt[2,2]/sum(xt[2,]),2)
kap=round(kappa(xt)[1],4)
au=round(roc.area(truth,predicted)$A,4)
list(round(c(pcc,spec,sens,kap,au),3))
}
live.rf = randomForest(as.factor(ARTR2) ~ .
, data = april.l,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit, mtry = 2,
ntree = 1000)
live.rf
varImpPlot(live.rf, main = 'Live Sagebrush')
View(april.l)
