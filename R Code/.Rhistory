names(usgs.l)[1] <- "ARTR2" # Rename to something meaningful
names(april.l)[1] <- "ARTR2" # Rename to something meaningful
names(usgs.d)[1] <- "ARTR2.D" # Rename to something meaningful
names(april.d)[1] <- "ARTR2.D" # Rename to something meaningful
names(usgs.ld)[1] <- "ARTR2.LD" # Rename to something meaningful
names(april.ld)[1] <- "ARTR2.LD" # Rename to something meaningful
kappa=function(x){
n=sum(x)
pobs=(x[1,1]+x[2,2])/n
pexp=(sum(x[1,])*sum(x[,1])+sum(x[2,])*sum(x[,2]))/n^2
kappa=(pobs-pexp)/(1-pexp)
t1=0
t2=0
t3=0
pii=x/n
pidot=apply(pii,1,sum)
pdotj=apply(pii,2,sum)
for(i in 1:2){
t1 = t1 + pii[i,i]*((1-pexp) - (1-pobs)*(pidot[i]+pdotj[i]))^2
}
t2 = pii[1,2]*(pdotj[1]+pidot[2])^2 + pii[2,1]*(pdotj[2] + pidot[1])^2
t3 = (pobs*pexp-2*pexp+pobs)^2
vhat = (t1 + t2*(1-pobs)^2 -t3)/(n*(1-pexp)^4)
se=sqrt(vhat)
return(c(kappa,se))
}
class.sum=function(truth,predicted){
xt=table(truth,round(predicted+0.000001))
pcc=round(100*sum(diag(xt))/sum(xt),2)
spec=round(100*xt[1,1]/sum(xt[1,]),2)
sens=round(100*xt[2,2]/sum(xt[2,]),2)
kap=round(kappa(xt)[1],4)
au=round(roc.area(truth,predicted)$A,4)
list(round(c(pcc,spec,sens,kap,au),3))
}
live.rf = randomForest(as.factor(ARTR2) ~ .
, data = april.l,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit, mtry = 2,
ntree = 1000)
live.rf
varImpPlot(live.rf, main = 'Live Sagebrush')
View(april.l)
# April Darger
# STAT 5600
# Final Project
# library(rpart)
# library(verification)
library(randomForest)
# library(rpart.plot)
# library(RColorBrewer)
library(Boruta)
# library(plyr)
#library(rattle)
# read in and configure april and usgs shrub count data
d.usgs <- read.csv("F:/ShrubDensity/PresenceAbsence/Output/USGSplotXspp.csv", row.names=1)
d.usgs[is.na(d.usgs)] <- 0 # replace NA with 0
d.april <- d.usgs[-c(1:60),] # pull out april data
d.usgs <- d.usgs[c("1","2","10","11","12","14","15","16","17","18","19","20","21","23","24","32","33","38","39","40","42","43","44","47","48","50","57","59","60","61","67","68","73","77","80","82","90"),] # keep only veg with soils data
d.usgs <- rbind(d.usgs,d.april) # combine april and usgs (with only those that have soils data) into one
d.usgs <- d.usgs[ order(row.names(d.usgs)), ] # Order so row.names matches soils data
# Pull out ARTR2 and ARTR2.D
d.usgs.l <- d.usgs$ARTR2
d.usgs.d <- d.usgs$ARTR2.D
d.april.l <- d.april$ARTR2
d.april.d <- d.april$ARTR2.D
d.usgs.ld <- d.usgs$ARTR2 + d.usgs$ARTR2.D # add ARTR & ARTR.D into ARTR.LD
d.april.ld <- d.april$ARTR2 + d.april$ARTR2.D # add ARTR & ARTR.D into ARTR.LD
# Read in and configure april and usgs soils data
s.usgs <- read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",row.names=1)
s.usgs[is.na(s.usgs)] <- 0 # replace NA with 0
s.april <- s.usgs[c(1:99),] # pull out april data
s.usgs <- s.usgs[ order(row.names(s.usgs)), ] # Order so row.names matches veg data
# Combine ARTR2, ARTR2.D and ARTR2.LD to soils data
april.l <- cbind(d.april.l,s.april) #combine density and soils for april ARTR
usgs.l <- cbind(d.usgs.l,s.usgs) #combine density and soils for usgs ARTR
april.d <- cbind(d.april.d,s.april) #combine density and soils for april ARTR
usgs.d <- cbind(d.usgs.d,s.usgs) #combine density and soils for usgs ARTR
april.ld <- cbind(d.april.ld,s.april) #combine density and soils for april ARTR.LD
usgs.ld <- cbind(d.usgs.ld,s.usgs) #combine density and soils for usgs ARTR.LD
names(usgs.l)[1] <- "ARTR2" # Rename to something meaningful
names(april.l)[1] <- "ARTR2" # Rename to something meaningful
names(usgs.d)[1] <- "ARTR2.D" # Rename to something meaningful
names(april.d)[1] <- "ARTR2.D" # Rename to something meaningful
names(usgs.ld)[1] <- "ARTR2.LD" # Rename to something meaningful
names(april.ld)[1] <- "ARTR2.LD" # Rename to something meaningful
library(Boruta)
library(randomForest)
u<-read.csv("F:/Soils/SoilSubset.csv",header=TRUE, row.names=1)
View(u)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u$ARTR2 <- u.den$ARTR2
rownames(u)[rowSums(is.na(u)) > 0]
u[is.na(u)] <- 0 # replace NA with 0
Boruta.live <- Boruta(ARTR2~., data = u, doTrace = 2, ntree = 1000)
Boruta.live
TentativeRoughFix(Boruta.live, averageOver = Inf)
Boruta.live$finalDecision
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = u,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit, mtry = 2,
ntree = 1000)
varImpPlot(live.rf, main = 'Live Sagebrush')
library(Boruta)
library(randomForest)
u<-read.csv("F:/Soils/SoilSubset.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u$ARTR2 <- u.den$ARTR2
View(u)
Den <- read.csv("F:/LPI/Output/AprilLPIDensityM2.csv",header=TRUE, row.names=1)
Soil <- read.csv("F:/Soils/SoilEnvironmentaldataApril.csv",header=TRUE, row.names=1)
ARTR2 <- Den$ARTR2
artr <- cbind(Soil,ARTR2) ; artr <- artr[, !sapply(artr, is.factor)] # Combine ARTR with Soils, remove the factor variables
# panel.smooth function is built in.
# panel.cor puts correlation in upper panels, size proportional to correlation
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
# Clay & Sand
pairs(~DWAClay+H1.ClayPercent+DWASand+H1.SandPercent+ARTR2,data=artr,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="Clay Variables")
art <- cbind(Soil,ARTR2)
# Depth
pairs(~PedonDepth+Depth200+H1.Depth+DepthClass+ARTR2,data=art,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="Depth Variables")
# http://www.statmethods.net/stats/rdiagnostics.html
library(car)
u<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
p<-read.csv("F:/Soils/SoilEnvironmentaldataNSplain.csv",header=TRUE, row.names=1)
a<-read.csv("F:/Soils/SoilEnvironmentaldataApril.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u.count <- u.den*150
u$ARTR2 <- u.den$ARTR2
u <- subset(u, select = -c(Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,MaxSand,MaxAWHC,SlopeShape,DepthClass,H1.Texture,H1.SandSize))
fit <- lm(as.formula(paste(colnames(u)[36], "~",
paste(colnames(u)[c(1:35)], collapse = "+"),
sep = "")),data=u)
# Assessing Outliers
outlierTest(fit) # Bonferonni p-value for most extreme obs
qqPlot(fit, main="QQ Plot") #qq plot for studentized resid
leveragePlots(fit) # leverage plots
avPlots(fit)
cutoff <- 4/((nrow(u)-length(fit$coefficients)-2))
plot(fit, which=4, cook.levels=cutoff)
# Influence Plot
cutoff <- 4/((nrow(u)-length(fit$coefficients)-1))
plot(fit, which=4, cook.levels=cutoff)
cutoff <- 4/((nrow(u)-length(fit$coefficients)-2))
plot(fit, which=4, cook.levels=cutoff)
# Influence Plot
influencePlot(fit,  id.method="identify", main="Influence Plot", sub="Circle size is proportial to Cook's Distance" )
qqPlot(fit, main="QQ Plot")
# distribution of studentized residuals
library(MASS)
sresid <- studres(fit)
hist(sresid, freq=FALSE,
main="Distribution of Studentized Residuals")
xfit<-seq(min(sresid),max(sresid),length=40)
yfit<-dnorm(xfit)
lines(xfit, yfit)
# Evaluate homoscedasticity
# non-constant error variance test
ncvTest(fit)
# plot studentized residuals vs. fitted values
spreadLevelPlot(fit)
# Evaluate Collinearity
vif(fit) # variance inflation factors
sqrt(vif(fit)) > 2 # problem?
crPlots(fit)
ceresPlots(fit)
durbinWatsonTest(fit)
library(gvlma)
gvmodel <- gvlma(fit)
summary(gvmodel)
u<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
View(u)
# p<-read.csv("F:/Soils/SoilEnvironmentaldataNSplain.csv",header=TRUE, row.names=1)
# a<-read.csv("F:/Soils/SoilEnvironmentaldataApril.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
# u.count <- u.den*150
ARTR2 <- u ;ARTR2$ARTR2 <- u.den$ARTR2
KRLA2 <- u ;KRLA2$KRLA2 <- u.den$KRLA2
ATCA2 <- u ;ATCA2$ATCA2 <- u.den$ATCA2
BOGR2 <- u ;BOGR2$BOGR2 <- u.den$BOGR2
SPCR <- u ;SPCR$SPCR <- u.den$SPCR
HECO26 <- u ;HECO26$HECO26 <- u.den$HECO26
PG <- u ;PG$PG <- u.den$SPCR + u.den$BOGR2 + u.den$HECO26
u$ARTR2 <- u.den$ARTR2;u$ATCA2 <- u.den$ATCA2;u$KRLA2 <- u.den$KRLA2
View(u.den)
View(u)
View(ARTR2)
ARTR2fit <- lm(as.formula(paste(colnames(ARTR2)[49], "~",
paste(colnames(ARTR2)[c(1:48)], collapse = "+"),
sep = "")),data=ARTR2)
ATCA2fit <- lm(as.formula(paste(colnames(ATCA2)[49], "~",
paste(colnames(ATCA2)[c(1:48)], collapse = "+"),
sep = "")),data=ATCA2)
ARTR2fit <- lm(as.formula(paste(colnames(ARTR2)[49], "~",
paste(colnames(ARTR2)[c(1:48)], collapse = "+"),
sep = "")),data=ARTR2)
ATCA2fit <- lm(as.formula(paste(colnames(ATCA2)[49], "~",
paste(colnames(ATCA2)[c(1:48)], collapse = "+"),
sep = "")),data=ATCA2)
KRLA2fit <- lm(as.formula(paste(colnames(KRLA2)[49], "~",
paste(colnames(KRLA2)[c(1:48)], collapse = "+"),
sep = "")),data=KRLA2)
BOGR2fit <- lm(as.formula(paste(colnames(BOGR2)[49], "~",
paste(colnames(BOGR2)[c(1:48)], collapse = "+"),
sep = "")),data=BOGR2)
SPCRfit <- lm(as.formula(paste(colnames(SPCR)[49], "~",
paste(colnames(SPCR)[c(1:48)], collapse = "+"),
sep = "")),data=SPCR)
HECO26fit <- lm(as.formula(paste(colnames(HECO26)[49], "~",
paste(colnames(HECO26)[c(1:48)], collapse = "+"),
sep = "")),data=HECO26)
PGfit <- lm(as.formula(paste(colnames(PG)[49], "~",
paste(colnames(PG)[c(1:48)], collapse = "+"),
sep = "")),data=PG)
(fit <- lm(cbind(ARTR2, ATCA2, KRLA2) ~ PedonDepth + MaxClay + MaxSand + Sand.50 + BioticCrustClass + CarbonateStage + Clay.50 +pH.50, data=u))
(fit <- lm(cbind(ARTR2, ATCA2, KRLA2) ~ PedonDepth + H1.ClayPercent + H1.Texture + H1.MoistRed + DepthClass + H1.DWA_AWC + SlopeShape +SandSize, data=u))
View(u)
(fit <- lm(cbind(ARTR2, ATCA2, KRLA2) ~ PedonDepth + H1.ClayPercent + H1.Texture + H1.MoistRed + DepthClass + H1.DWA_AWC + SlopeShape +H1.SandSize, data=u))
lm.a1 <- lm(ARTR2 ~ ., data = ARTR2)
lm.a2 <- lm(cbind(ARTR2+ATCA2+KRLA2) ~ ., data = u)
summary(lm.a1)
summary(fit)
summary(lm.a1)
summary(lm.a1$run1)$r.squared
summary(lm.a2)
library(VGAM)
u<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u.count <- u.den[c(1:37),]*90
a.count <- u.den[c(38:136),]*150
count <- rbind(u.count,a.count)
View(count)
u$ARTR2 <- count$ARTR2
u1 <- subset(u, select = -c(Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,SlopeShape,DepthClass,H1.Texture,H1.SandSize))
u2 <- subset(u, select = -c(DWAClay,DWASand,DWApH,DWA.AWHC,AWHC.50,Sand.50,H1.Texture,H1.SandSize,Tot.Texture,Tot.SandSize,PedonDepth,Depth200,SlopeShape))
model.pois = glm(ARTR2 ~ ., data = u1, family = poisson,offset=u.den$ARTR2)
summary(model.pois)
pchisq(summary(model.pois)$deviance,
summary(model.pois)$df.residual
)
library(pscl)
model.zip = zeroinfl(ARTR2 ~ ., data = u1,offset=u.den$ARTR2,dist="poisson")
summary(model.zip)
model.zip = zeroinfl(ARTR2 ~ ., data = u1,offset=u.den$ARTR2,dist="poisson")
model.zip = zeroinfl(ARTR2 ~ ., data = u2,offset=u.den$ARTR2,dist="poisson")
View(u)
u1 <- subset(u, select = -c(Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,SlopeShape,DepthClass,Tot.SandSize))
View(`u1`)
u1 <- subset(u, select = -c(Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,SlopeShape,DepthClass,Tot.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass))
View(`u1`)
u1 <- subset(u, select = -c(Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,SlopeShape,DepthClass,Tot.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass))
View(`u1`)
u1 <- subset(u, select = -c(Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,SlopeShape,DepthClass,Tot.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
View(`u1`)
u2 <- subset(u, select = -c(DWAClay,DWASand,DWApH,DWA.AWHC,AWHC.50,Sand.50,H1.Texture,H1.SandSize,Tot.Texture,Tot.SandSize,PedonDepth,Depth200,SlopeShape))
model.pois = glm(ARTR2 ~ ., data = u1, family = poisson,offset=u.den$ARTR2)
summary(model.pois)
u1 <- subset(u, select = -c(Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,SlopeShape,DepthClass,Tot.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
u2 <- subset(u, select = -c(DWAClay,DWASand,DWApH,DWA.AWHC,AWHC.50,Sand.50,H1.Texture,H1.SandSize,Tot.Texture,Tot.SandSize,PedonDepth,Depth200,SlopeShape))
model.pois = glm(ARTR2 ~ ., data = u1, family = poisson,offset=u.den$ARTR2)
summary(model.pois)
pchisq(summary(model.pois)$deviance,
summary(model.pois)$df.residual
)
library(pscl)
model.zip = zeroinfl(ARTR2 ~ ., data = u1,offset=u.den$ARTR2,dist="poisson")
cbind(nd,
Count = predict(model.zip, newdata = nd, type = "count"),
Zero = predict(model.zip, newdata = nd, type = "zero")
)
?zeroinfl
model.pois = glm(ARTR2 ~ ., data = u1, family = poisson,offset=u.den$ARTR2)
summary(model.pois)
vif(model.pois) # variance inflation factors
u1 <- subset(u, select = -c(Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,SlopeShape,DepthClass,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
u2 <- subset(u, select = -c(DWAClay,DWASand,DWApH,DWA.AWHC,AWHC.50,Sand.50,H1.Texture,H1.SandSize,Tot.Texture,Tot.SandSize,PedonDepth,Depth200,SlopeShape))
model.pois = glm(ARTR2 ~ ., data = u1, family = poisson,offset=u.den$ARTR2)
summary(model.pois)
vif(model.pois) # variance inflation factors
pchisq(summary(model.pois)$deviance,
summary(model.pois)$df.residual
)
# Zero Inflated
library(pscl)
model.zip = zeroinfl(ARTR2 ~ ., data = u1,offset=u.den$ARTR2,dist="poisson")
summary(model.zip)
# http://www.statmethods.net/stats/rdiagnostics.html
library(car)
u<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
p<-read.csv("F:/Soils/SoilEnvironmentaldataNSplain.csv",header=TRUE, row.names=1)
a<-read.csv("F:/Soils/SoilEnvironmentaldataApril.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u.count <- u.den*150
u$ARTR2 <- u.den$ARTR2
u <- subset(u, select = -c(Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,MaxSand,MaxAWHC,SlopeShape,DepthClass,H1.Texture,H1.SandSize))
fit <- lm(as.formula(paste(colnames(u)[36], "~",
paste(colnames(u)[c(1:35)], collapse = "+"),
sep = "")),data=u)
# Assessing Outliers
outlierTest(fit) # Bonferonni p-value for most extreme obs
qqPlot(fit, main="QQ Plot") #qq plot for studentized resid
leveragePlots(fit) # leverage plots
vif(fit) # variance inflation factors
library(VGAM)
u<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u.count <- u.den[c(1:37),]*90
a.count <- u.den[c(38:136),]*150
count <- rbind(u.count,a.count)
u$ARTR2 <- count$ARTR2
u1 <- subset(u, select = -c(Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,SlopeShape,DepthClass,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
u2 <- subset(u, select = -c(DWAClay,DWASand,DWApH,DWA.AWHC,AWHC.50,Sand.50,H1.Texture,H1.SandSize,Tot.Texture,Tot.SandSize,PedonDepth,Depth200,SlopeShape))
library(VGAM)
u<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u.count <- u.den[c(1:37),]*90
a.count <- u.den[c(38:136),]*150
count <- rbind(u.count,a.count)
u$ARTR2 <- count$ARTR2
u1 <- subset(u, select = -c(Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,SlopeShape,DepthClass,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
View(`u1`)
View(`u1`)
u<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u.count <- u.den[c(1:37),]*90
a.count <- u.den[c(38:136),]*150
count <- rbind(u.count,a.count)
u$ARTR2 <- count$ARTR2
u1 <- subset(u, select = -c(Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,SlopeShape,DepthClass,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
# install.packages("Hmisc")
library(Hmisc)
library(graphics)
# ++++++++++++++++++++++++++++
# flattenCorrMatrix
# ++++++++++++++++++++++++++++
# cormat : matrix of the correlation coefficients
# pmat : matrix of the correlation p-values
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
res<-rcorr(as.matrix(z[,1:42]), type=c("spearman"))
corPval <- flattenCorrMatrix(res$r, res$P)
q <- symnum(spearman)
u<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u.count <- u.den[c(1:37),]*90
a.count <- u.den[c(38:136),]*150
count <- rbind(u.count,a.count)
u$ARTR2 <- count$ARTR2
u1 <- subset(u, select = -c(Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,SlopeShape,DepthClass,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
# install.packages("Hmisc")
library(Hmisc)
library(graphics)
# ++++++++++++++++++++++++++++
# flattenCorrMatrix
# ++++++++++++++++++++++++++++
# cormat : matrix of the correlation coefficients
# pmat : matrix of the correlation p-values
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
res<-rcorr(as.matrix(u1[,1:42]), type=c("spearman"))
res<-rcorr(as.matrix(u1[,1:24]), type=c("spearman"))
u1 <- subset(u, select = -c(SlopeShape,DepthClass,H1.Texture,H1.SandSize,Tot.Texture,Tot.SandSize) )
res<-rcorr(as.matrix(u1[,1:24]), type=c("spearman"))
u1 <- subset(u, select = -c(SlopeShape,DepthClass,H1.Texture,H1.SandSize,Tot.Texture,Tot.SandSize,Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,SlopeShape,DepthClass,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
res<-rcorr(as.matrix(u1[,1:24]), type=c("spearman"))
res<-rcorr(as.matrix(u1[,1:23]), type=c("spearman"))
corPval <- flattenCorrMatrix(res$r, res$P)
q <- symnum(spearman)
Susan7 <- corPval[ which((corPval$cor >= 0.7)|(corPval$cor < -0.7)),]
View(Susan7)
q
Susan8 <- corPval[ which((corPval$cor >= 0.8)|(corPval$cor < -0.8)),]
View(Susan7)
library(VGAM)
u<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u.count <- u.den[c(1:37),]*90
a.count <- u.den[c(38:136),]*150
count <- rbind(u.count,a.count)
u$ARTR2 <- count$ARTR2
u1 <- subset(u, select = -c(Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,SlopeShape,DepthClass,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
View(`u1`)
fit <- lm(as.formula(paste(colnames(u)[24], "~",
paste(colnames(u)[c(1:23)], collapse = "+"),
sep = "")),data=u1)
vif(fit)
fit <- lm(as.formula(paste(colnames(u1)[24], "~",
paste(colnames(u1)[c(1:23)], collapse = "+"),
sep = "")),data=u1)
vif(fit)
model.pois = glm(ARTR2 ~ ., data = u1, family = poisson,offset=u.den$ARTR2)
summary(model.pois)
vif(model.pois) # variance inflation factors
library(VGAM)
u<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u.count <- u.den[c(1:37),]*90
a.count <- u.den[c(38:136),]*150
count <- rbind(u.count,a.count)
u$ARTR2 <- count$ARTR2
u1 <- subset(u, select = -c(Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,H1.Texture,SlopeShape,DepthClass,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
fit <- lm(as.formula(paste(colnames(u1)[24], "~",
paste(colnames(u1)[c(1:23)], collapse = "+"),
sep = "")),data=u1)
vif(fit)
library(VGAM)
u<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u.count <- u.den[c(1:37),]*90
a.count <- u.den[c(38:136),]*150
count <- rbind(u.count,a.count)
u$ARTR2 <- count$ARTR2
u1 <- subset(u, select = -c(Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,H1.Texture,SlopeShape,DepthClass,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
fit <- lm(as.formula(paste(colnames(u1)[23], "~",
paste(colnames(u1)[c(1:22)], collapse = "+"),
sep = "")),data=u1)
vif(fit)
model.pois = glm(ARTR2 ~ ., data = u1, family = poisson,offset=u.den$ARTR2)
summary(model.pois)
vif(model.pois) # variance inflation factors
library(VGAM)
u<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u.count <- u.den[c(1:37),]*90
a.count <- u.den[c(38:136),]*150
count <- rbind(u.count,a.count)
u$ARTR2 <- count$ARTR2
u1 <- subset(u, select = -c(Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,H1.Texture,SlopeShape,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
fit <- lm(as.formula(paste(colnames(u1)[23], "~",
paste(colnames(u1)[c(1:22)], collapse = "+"),
sep = "")),data=u1)
vif(fit)
library(VGAM)
u<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u.count <- u.den[c(1:37),]*90
a.count <- u.den[c(38:136),]*150
count <- rbind(u.count,a.count)
u$ARTR2 <- count$ARTR2
u1 <- subset(u, select = -c(Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,H1.Texture,SlopeShape,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
fit <- lm(as.formula(paste(colnames(u1)[24], "~",
paste(colnames(u1)[c(1:23)], collapse = "+"),
sep = "")),data=u1)
vif(fit)
model.pois = glm(ARTR2 ~ ., data = u1, family = poisson,offset=u.den$ARTR2)
summary(model.pois)
vif(model.pois) # variance inflation factors
u1 <- subset(u, select = -c(DepthClass,Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,H1.Texture,SlopeShape,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
fit <- lm(as.formula(paste(colnames(u1)[23], "~",
paste(colnames(u1)[c(1:22)], collapse = "+"),
sep = "")),data=u1)
vif(fit)
model.pois = glm(ARTR2 ~ ., data = u1, family = poisson,offset=u.den$ARTR2)
summary(model.pois)
vif(model.pois) # variance inflation factors
fit <- lm(as.formula(paste(colnames(u1)[23], "~",
paste(colnames(u1)[c(1:22)], collapse = "+"),
sep = "")),data=u1)
vif(fit)
model.pois = glm(ARTR2 ~ ., data = u1, family = poisson,offset=u.den$ARTR2)
summary(model.pois)
vif(model.pois) # variance inflation factors
pchisq(summary(model.pois)$deviance,
summary(model.pois)$df.residual
)
# Zero Inflated
library(pscl)
model.zip = zeroinfl(ARTR2 ~ ., data = u1,offset=u.den$ARTR2,dist="poisson")
summary(model.zip)
cbind(nd,
Count = predict(model.zip, newdata = nd, type = "count"),
Zero = predict(model.zip, newdata = nd, type = "zero")
)
u<-read.csv("F:/Soils/SoilSubset.csv",header=TRUE, row.names=1)
View(u)
usgs<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
usgs.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
usgs.count <- usgs.den[c(1:37),]*90
april.count <- usgs.den[c(38:136),]*150
count <- rbind(usgs.count,april.count)
usgs$ARTR2 <- count$ARTR2
usgs1 <- subset(usgs, select = -c(DepthClass,Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,H1.Texture,SlopeShape,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
View(u)
View(usgs1)
