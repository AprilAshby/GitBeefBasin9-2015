u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u$ARTR2 <- u.den$ARTR2
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = u,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit, mtry = 2,
ntree = 1000)
varImpPlot(live.rf, main = 'Live Sagebrush')
importance(live.rf, type=1)
plot(live.rf, type="l", main=deparse(substitute(live.rf)), ...)
plot(live.rf, type="l", main=deparse(substitute(live.rf)))
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = u,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,
ntree = 1000)
varImpPlot(live.rf, main = 'Live Sagebrush')
importance(live.rf, type=1)
plot(live.rf, type="l", main=deparse(substitute(live.rf)))
predict(live.rf, type="response")
cutoff)
predict(live.rf, type="response",
norm.votes=TRUE, predict.all=FALSE, proximity=FALSE, nodes=FALSE,
cutoff)
norm.votes=TRUE, predict.all=FALSE, proximity=FALSE, nodes=FALSE)
predict(live.rf, type="response",norm.votes=TRUE, predict.all=FALSE, proximity=FALSE, nodes=FALSE)
str(attr(predict(live.rf, u[ind == 2,], nodes=TRUE), "nodes"))
str(attr(predict(live.rf, nodes=TRUE), "nodes"))
u<-read.csv("F:/Soils/SoilSubset.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u$ARTR2 <- u.den$ARTR2
rownames(u)[rowSums(is.na(u)) > 0]
u[is.na(u)] <- 0 # replace NA with 0
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = u,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,
ntree = 1000)
varImpPlot(live.rf, main = 'Live Sagebrush')
importance(live.rf, type=1)
plot(live.rf, type="l", main=deparse(substitute(live.rf)))
predict(live.rf, type="response",norm.votes=TRUE, predict.all=FALSE, proximity=FALSE, nodes=FALSE)
imp <- importance(live.rf)
importance(live.rf)
?importancd
?importance
round(importance(live.rf), 2)
u<-read.csv("F:/Soils/SoilSubset.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u$ARTR2 <- u.den$ARTR2
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = u,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,
ntree = 1000)
varImpPlot(live.rf, main = 'Live Sagebrush')
round(importance(live.rf), 2)
importance(live.rf, type=1)
plot(live.rf, type="l", main=deparse(substitute(live.rf)))
predict(live.rf, type="response",norm.votes=TRUE, predict.all=FALSE, proximity=FALSE, nodes=FALSE)
imp <- importance(live.rf)
impvar <- rownames(imp)[order(imp[, 1], decreasing=TRUE)]
op <- par(mfrow=c(2, 3))
for (i in seq_along(impvar)) {
partialPlot(live.rf, u, impvar[i], xlab=impvar[i],
main=paste("Partial Dependence on", impvar[i]),
ylim=c(30, 70))
}
par(op)
importanceOrder=order(-live.rf$importance)
importanceOrder
names=rownames(live.rf$importance)[importanceOrder][1:15]
names
u<-read.csv("F:/Soils/SoilSubset.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u$ARTR2 <- u.den$ARTR2
rownames(u)[rowSums(is.na(u)) > 0]
u[is.na(u)] <- 0 # replace NA with 0
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = u,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,
ntree = 1000)
varImpPlot(live.rf, sort=TRUE, main = 'Live Sagebrush')
varImpPlot(live.rf, main = 'Live Sagebrush')
round(importance(live.rf), 2)
library(randomForest)
u<-read.csv("F:/Soils/SoilSubset.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u$ARTR2 <- u.den$ARTR2
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = u,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,
ntree = 1000)
varImpPlot(live.rf, sort=TRUE, main = 'Live Sagebrush')
round(importance(live.rf), 2)
importance(live.rf, type=1)
round(importance(live.rf,type=1), 2)
plot(live.rf, type="l", main=deparse(substitute(live.rf)))
predict(live.rf, type="response",norm.votes=TRUE, predict.all=FALSE, proximity=FALSE, nodes=FALSE)
imp <- importance(live.rf)
impvar <- rownames(imp)[order(imp[, 1], decreasing=TRUE)]
op <- par(mfrow=c(2, 3))
for (i in seq_along(impvar)) {
partialPlot(live.rf, u, impvar[i], xlab=impvar[i],
main=paste("Partial Dependence on", impvar[i]),
ylim=c(30, 70))
}
par(op)
u<-read.csv("F:/Soils/SoilSubset.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u$ARTR2 <- u.den$ARTR2
rownames(u)[rowSums(is.na(u)) > 0]
u[is.na(u)] <- 0 # replace NA with 0
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = u,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,
ntree = 1000)
varImpPlot(live.rf, sort=TRUE, main = 'Live Sagebrush')
round(importance(live.rf,type=1), 2)
importance(live.rf, type=1)
plot(live.rf, type="l", main=deparse(substitute(live.rf)))
predict(live.rf, type="response",norm.votes=TRUE, predict.all=FALSE, proximity=FALSE, nodes=FALSE)
imp <- importance(live.rf)
impvar <- rownames(imp)[order(imp[, 1], decreasing=TRUE)]
op <- par(mfrow=c(2, 3))
for (i in seq_along(impvar)) {
partialPlot(live.rf, u, impvar[i], xlab=impvar[i],
main=paste("Partial Dependence on", impvar[i]),
ylim=c(30, 70))
}
par(op)
partialPlot(live.rf,u, H1.ClayPercent, main = 'Live Sagebrush Partial Dependence on ...')
partialPlot(live.rf,u, PedonDepth, main = 'Live Sagebrush Partial Dependence on ...')
partialPlot(live.rf,u, H1.DWA_AWC, main = 'Live Sagebrush Partial Dependence on ...')
usgs<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
usgs.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
usgs.count <- usgs.den[c(1:37),]*90
april.count <- usgs.den[c(38:136),]*150
count <- rbind(usgs.count,april.count)
usgs$ARTR2 <- count$ARTR2
usgs1 <- subset(usgs, select = -c(DepthClass,Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,H1.Texture,SlopeShape,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
u<-read.csv("F:/Soils/SoilSubset.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u$ARTR2 <- u.den$ARTR2
c <- cbind(u[, which(colnames(u)%in% colnames(usgs1))],
usgs1[, which(colnames(usgs1)%in% colnames(u))])
View(c)
library(randomForest)
usgs<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
usgs.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
usgs.count <- usgs.den[c(1:37),]*90
april.count <- usgs.den[c(38:136),]*150
count <- rbind(usgs.count,april.count)
usgs$ARTR2 <- count$ARTR2
usgs1 <- subset(usgs, select = -c(DepthClass,Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,H1.Texture,SlopeShape,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
u<-read.csv("F:/Soils/SoilSubset.csv",header=TRUE, row.names=1)
u.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
u$ARTR2 <- u.den$ARTR2
cbind(u[, which(colnames(u)%in% colnames(usgs1))],
usgs1[, which(colnames(usgs1)%in% colnames(u))])
c <- cbind(u[, !which(colnames(u)%in% colnames(usgs1))],
usgs1[, which(colnames(usgs1)%in% colnames(u))])
View(c)
c <- cbind(u[, !which(colnames(u)%in% colnames(usgs1))],
usgs1[, !which(colnames(usgs1)%in% colnames(u))])
c <- cbind(u[, which(colnames(u)%in% colnames(usgs1))],
usgs1[, !which(colnames(usgs1)%in% colnames(u))])
View(c)
!which(colnames(usgs1)%in% colnames(u))
which(colnames(u)%in% colnames(usgs1))
View(u)
library(randomForest)
usgs<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
usgs.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
usgs.count <- usgs.den[c(1:37),]*90
april.count <- usgs.den[c(38:136),]*150
count <- rbind(usgs.count,april.count)
usgs$ARTR2 <- count$ARTR2
usgs1 <- subset(usgs, select = -c(DepthClass,Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,H1.Texture,SlopeShape,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
View(usgs1)
live.rf.xval.prob=rep(0,nrow(usgs1))
xvs=rep(1:10,length=nrow(usgs1))
xvs=sample(xvs)
for(i in 1:10){
train=usgs1[xvs!=i,]
test=usgs1[xvs==i,]
rf=randomForest(as.factor(ARTR2) ~ .
,data=train)
live.rf.xval.prob[xvs==i]=predict(rf,test,type="prob")[,2]
}
live.rf.xval.prob=rep(0,nrow(usgs1))
xvs=rep(1:10,length=nrow(usgs1))
xvs=sample(xvs)
for(i in 1:10){
train=usgs1[xvs!=i,]
test=usgs1[xvs==i,]
rf=randomForest(as.numeric(ARTR2) ~ .
,data=train)
live.rf.xval.prob[xvs==i]=predict(rf,test,type="prob")[,2]
}
rownames(usgs1)[rowSums(is.na(usgs1)) > 0]
usgs1[is.na(usgs1)] <- 0 # replace NA with 0
live.rf.xval.prob=rep(0,nrow(usgs1))
xvs=rep(1:10,length=nrow(usgs1))
xvs=sample(xvs)
for(i in 1:10){
train=usgs1[xvs!=i,]
test=usgs1[xvs==i,]
rf=randomForest(as.numeric(ARTR2) ~ .
,data=train)
live.rf.xval.prob[xvs==i]=predict(rf,test,type="prob")[,2]
}
?predict
live.rf.xval.prob=rep(0,nrow(usgs1))
xvs=rep(1:10,length=nrow(usgs1))
xvs=sample(xvs)
for(i in 1:10){
train=usgs1[xvs!=i,]
test=usgs1[xvs==i,]
rf=randomForest(as.numeric(ARTR2) ~ .
,data=train)
live.rf.xval.prob[xvs==i]=predict(rf,test)[,2]
}
# Read in Soil and Shrub Density Data
usgs<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
usgs.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
# Change Shrub Density per M2 to Count Data
usgs.count <- usgs.den[c(1:37),]*90
april.count <- usgs.den[c(38:136),]*150
count <- rbind(usgs.count,april.count)
# Combine ARTR Shrub Data and Soils Data
usgs$ARTR2 <- count$ARTR2
# Remove Predetermined Variables (Covariance and VIF)
usgs1 <- subset(usgs, select = -c(DepthClass,Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,H1.Texture,SlopeShape,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
rownames(usgs1)[rowSums(is.na(usgs1)) > 0]
usgs1[is.na(usgs1)] <- 0 # replace NA with 0
live.rf.xval.prob=rep(0,nrow(usgs1))
xvs=rep(1:10,length=nrow(usgs1))
xvs=sample(xvs)
for(i in 1:10){
train=usgs1[xvs!=i,]
test=usgs1[xvs==i,]
rf=randomForest(as.numeric(ARTR2) ~ .
,data=train)
live.rf.xval.prob[xvs==i]=predict(rf,test,type="prob")[,2]
}
live.rf.xval.prob=rep(0,nrow(usgs1))
xvs=rep(1:10,length=nrow(usgs1))
xvs=sample(xvs)
for(i in 1:10){
train=usgs1[xvs!=i,]
test=usgs1[xvs==i,]
rf=randomForest(as.numeric(ARTR2) ~ .
,data=train)
live.rf.xval.prob[xvs==i]=predict(rf,test,type="response")[,2]
}
live.rf.xval.prob=rep(0,nrow(usgs1))
xvs=rep(1:10,length=nrow(usgs1))
xvs=sample(xvs)
for(i in 1:10){
train=usgs1[xvs!=i,]
test=usgs1[xvs==i,]
rf=randomForest(as.numeric(ARTR2) ~ .
,data=train)
live.rf.xval.prob[xvs==i]=predict(rf,test,type="response")
}
# Read in Soil and Shrub Density Data
usgs<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
usgs.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
# Change Shrub Density per M2 to Count Data
usgs.count <- usgs.den[c(1:37),]*90
april.count <- usgs.den[c(38:136),]*150
count <- rbind(usgs.count,april.count)
# Combine ARTR Shrub Data and Soils Data
usgs$ARTR2 <- count$ARTR2
# Remove Predetermined Variables (Covariance and VIF)
usgs1 <- subset(usgs, select = -c(DepthClass,Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,H1.Texture,SlopeShape,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
rownames(usgs1)[rowSums(is.na(usgs1)) > 0]
usgs1[is.na(usgs1)] <- 0 # replace NA with 0
live.rf.xval.prob=rep(0,nrow(usgs1))
xvs=rep(1:10,length=nrow(usgs1))
xvs=sample(xvs)
for(i in 1:10){
train=usgs1[xvs!=i,]
test=usgs1[xvs==i,]
rf=randomForest(as.numeric(ARTR2) ~ .
,data=train)
live.rf.xval.prob[xvs==i]=predict(rf,test,type="response")[,2]
}
live.rf.xval.prob=rep(0,nrow(usgs1))
xvs=rep(1:10,length=nrow(usgs1))
xvs=sample(xvs)
for(i in 1:10){
train=usgs1[xvs!=i,]
test=usgs1[xvs==i,]
rf=randomForest(as.numeric(ARTR2) ~ .
,data=train)
live.rf.xval.prob[xvs==i]=predict(rf,test,type="response")
}
live.rf.confuse.xval=table(april.l$ARTR2,live.rf.xval.prob)
live.rf.confuse.xval=table(usgs1$ARTR2,live.rf.xval.prob)
100-100*sum(diag(live.rf.xval.prob))/nrow(usgs1)
table(usgs1$ARTR2,round(live.rf.xval.prob+ 0.0000001))
class.sum(usgs1$ARTR2,live.rf.xval.prob)
kappa=function(x){
n=sum(x)
pobs=(x[1,1]+x[2,2])/n
pexp=(sum(x[1,])*sum(x[,1])+sum(x[2,])*sum(x[,2]))/n^2
kappa=(pobs-pexp)/(1-pexp)
t1=0
t2=0
t3=0
pii=x/n
pidot=apply(pii,1,sum)
pdotj=apply(pii,2,sum)
for(i in 1:2){
t1 = t1 + pii[i,i]*((1-pexp) - (1-pobs)*(pidot[i]+pdotj[i]))^2
}
t2 = pii[1,2]*(pdotj[1]+pidot[2])^2 + pii[2,1]*(pdotj[2] + pidot[1])^2
t3 = (pobs*pexp-2*pexp+pobs)^2
vhat = (t1 + t2*(1-pobs)^2 -t3)/(n*(1-pexp)^4)
se=sqrt(vhat)
return(c(kappa,se))
}
class.sum=function(truth,predicted){
xt=table(truth,round(predicted+0.000001))
pcc=round(100*sum(diag(xt))/sum(xt),2)
spec=round(100*xt[1,1]/sum(xt[1,]),2)
sens=round(100*xt[2,2]/sum(xt[2,]),2)
kap=round(kappa(xt)[1],4)
au=round(roc.area(truth,predicted)$A,4)
list(round(c(pcc,spec,sens,kap,au),3))
}
live.rf.confuse.xval=table(usgs1$ARTR2,live.rf.xval.prob)
100-100*sum(diag(live.rf.xval.prob))/nrow(usgs1)
table(usgs1$ARTR2,round(live.rf.xval.prob+ 0.0000001))
class.sum(usgs1$ARTR2,live.rf.xval.prob)
class.sum=function(truth,predicted){
xt=table(truth,round(predicted+0.000001))
pcc=round(100*sum(diag(xt))/sum(xt),2)
spec=round(100*xt[1,1]/sum(xt[1,]),2)
sens=round(100*xt[2,2]/sum(xt[2,]),2)
kap=round(kappa(xt)[1],4)
au=round(roc.area(truth,predicted)$A,4)
list(round(c(pcc,spec,sens,kap,au),3))
}
class.sum
table(usgs1$ARTR2,round(live.rf.xval.prob+ 0.0000001))
class.sum(usgs1$ARTR2,live.rf.xval.prob)
live.rf.confuse.xval=table(usgs1$ARTR2,live.rf.xval.prob)
live.rf.confuse.xval
100-100*sum(diag(live.rf.xval.prob))/nrow(usgs1)
live.rf.xval.prob
print(live.rf.xval.prob)
importance(live.rf.xval.prob)
# Read in Soil and Shrub Density Data
usgs<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
usgs.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
# Change Shrub Density per M2 to Count Data
usgs.count <- usgs.den[c(1:37),]*90
april.count <- usgs.den[c(38:136),]*150
count <- rbind(usgs.count,april.count)
# Combine ARTR Shrub Data and Soils Data
usgs$ARTR2 <- count$ARTR2
# Remove Predetermined Variables (Covariance and VIF)
usgs1 <- subset(usgs, select = -c(DepthClass,Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,H1.Texture,SlopeShape,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
rownames(usgs1)[rowSums(is.na(usgs1)) > 0]
usgs1[is.na(usgs1)] <- 0 # replace NA with 0
# Run Random Forest
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = usgs1,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,
ntree = 1000)
predict(live.rf, type="response",norm.votes=TRUE, predict.all=FALSE, proximity=FALSE, nodes=FALSE)
library(randomForest)
# Read in Soil and Shrub Density Data
usgs<-read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
usgs.den <- read.csv("F:/LPI/Output/USGSLPIDensityM2.csv",header=TRUE, row.names=1)
# Change Shrub Density per M2 to Count Data
usgs.count <- usgs.den[c(1:37),]*90
april.count <- usgs.den[c(38:136),]*150
count <- rbind(usgs.count,april.count)
# Combine ARTR Shrub Data and Soils Data
usgs$ARTR2 <- count$ARTR2
# Remove Predetermined Variables (Covariance and VIF)
usgs1 <- subset(usgs, select = -c(DepthClass,Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,H1.Texture,SlopeShape,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
rownames(usgs1)[rowSums(is.na(usgs1)) > 0]
usgs1[is.na(usgs1)] <- 0 # replace NA with 0
# Run Random Forest
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = usgs1,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,
ntree = 1000)
live.rf
# Run Random Forest
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = usgs1,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,
ntree = 1000)
live.rf
# Run Random Forest
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = usgs1,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,
ntree = 1000)
live.rf
varImpPlot(live.rf, sort=TRUE, main = 'Live Sagebrush')
varImpPlot(live.rf, sort=TRUE, main = 'Live Sagebrush')
round(importance(live.rf,type=1), 2)
importance(live.rf, type=1)
plot(live.rf, type="l", main=deparse(substitute(live.rf)))
varImpPlot(live.rf, sort=TRUE, main = 'Live Sagebrush')
round(importance(live.rf,type=1), 2)
plot(live.rf, type="l", main=deparse(substitute(live.rf)))
# Run Random Forest
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = usgs1,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,
ntree = 200
varImpPlot(live.rf, sort=TRUE, main = 'Live Sagebrush')
# Run Random Forest
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = usgs1,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,
ntree = 200)
varImpPlot(live.rf, sort=TRUE, main = 'Live Sagebrush')
round(importance(live.rf,type=1), 2)
plot(live.rf, type="l", main=deparse(substitute(live.rf)))
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = usgs1,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,
ntree = 50)
varImpPlot(live.rf, sort=TRUE, main = 'Live Sagebrush')
round(importance(live.rf,type=1), 2)
plot(live.rf, type="l", main=deparse(substitute(live.rf)))
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = usgs1,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,
ntree = 501)
varImpPlot(live.rf, sort=TRUE, main = 'Live Sagebrush')
round(importance(live.rf,type=1), 2)
plot(live.rf, type="l", main=deparse(substitute(live.rf)))
live.rf
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = usgs1,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2
ntree = 501)
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = usgs1,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 501)
live.rf
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = usgs1,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 501)
live.rf
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = usgs1,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=7,
ntree = 501)
live.rf
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = usgs1,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=15,
ntree = 501)
live.rf
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = usgs1,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=1,
ntree = 501)
live.rf
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = usgs1,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=,20
ntree = 501)
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = usgs1,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=20,
ntree = 501)
live.rf
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = usgs1,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=3,
ntree = 501)
live.rf
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = usgs1,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 501)
live.rf
