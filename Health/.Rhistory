splitdf <- function(dataframe, seed=NULL) {
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainindex <- sample(index, trunc(length(index)/2))
trainset <- dataframe[trainindex, ]
testset <- dataframe[-trainindex, ]
list(trainset=trainset,testset=testset)
}
#apply the function
splits <- splitdf(sl, seed=808)
#it returns a list - two data frames called trainset and testset
str(splits)
# there are 68 observations in each data frame
lapply(splits,nrow)
#view the first few columns in each data frame
lapply(splits,head)
# save the training and testing sets as data frames
training <- splits$trainset
testing <- splits$testset
########### Optional: apply to  data using randomForest ###########
#load the randomForest library. if you havent installed it, run the next line
#install.packages("randomForest")
library(randomForest)
#fit the randomforest model
model <- randomForest(as.numeric(ARTR2) ~ .
, data = training,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 500)
print(model)
#what are the important variables (via permutation)
varImpPlot(model, type=1)
#predict the outcome of the testing data
predicted <- predict(model, newdata=testing[ ,-23])
# what is the proportion variation explained in the outcome of the testing data?
# i.e., what is 1-(SSerror/SStotal)
actual <- testing$ARTR2
rsq <- 1-sum((actual-predicted)^2)/sum((actual-mean(actual))^2)
print(rsq)
#load the data
lpi <- read.csv("F:/LPI/Output/USGSLPIplotXspp.csv",header=TRUE, row.names=1)
soil <- read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
# Remove Predetermined Variables (Covariance and VIF)
soil <- subset(soil, select = -c(DepthClass,Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,H1.Texture,SlopeShape,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
soil <- subset(soil, select = -c(Tot.MoistValue,DWAClay,H1.SandPercent,BioticCrustClass,H1.MoistCClass,H1.MoistCClass,CarbonateStage,Depth200, Tot.MoistCClass,H1.Depth,Slope,Elevation))
# Which rows have NA present somewhere
rownames(soil)[rowSums(is.na(soil)) > 0]
# Replace NA with 0 (necesary for Boruta but not Random Forest)
soil[is.na(soil)] <- 0 # replace NA with 0
# Combine Plant Data and Soils Data
sl <- soil
sl$ARTR2 <- lpi$ARTR2
# this data has 136 rows
nrow(sl)
# look at the first few
head(sl)
# splitdf function will return a list of training and testing sets
splitdf <- function(dataframe, seed=NULL) {
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainindex <- sample(index, trunc(length(index)/2))
trainset <- dataframe[trainindex, ]
testset <- dataframe[-trainindex, ]
list(trainset=trainset,testset=testset)
}
#apply the function
splits <- splitdf(sl, seed=808)
#it returns a list - two data frames called trainset and testset
str(splits)
# there are 68 observations in each data frame
lapply(splits,nrow)
#view the first few columns in each data frame
lapply(splits,head)
# save the training and testing sets as data frames
training <- splits$trainset
testing <- splits$testset
########### Optional: apply to  data using randomForest ###########
#load the randomForest library. if you havent installed it, run the next line
#install.packages("randomForest")
library(randomForest)
#fit the randomforest model
model <- randomForest(as.numeric(ARTR2) ~ .
, data = training,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 500)
print(model)
#what are the important variables (via permutation)
varImpPlot(model, type=1)
#predict the outcome of the testing data
predicted <- predict(model, newdata=testing[ ,-23])
# what is the proportion variation explained in the outcome of the testing data?
# i.e., what is 1-(SSerror/SStotal)
actual <- testing$ARTR2
rsq <- 1-sum((actual-predicted)^2)/sum((actual-mean(actual))^2)
print(rsq)
library(randomForest)
# Read in Soil and LPI Data
soil <- read.csv("F:/Soils/SoilEnvironmentaldataUSGSApril.csv",header=TRUE, row.names=1)
lpi <- read.csv("F:/LPI/Output/USGSLPIplotXspp.csv",header=TRUE, row.names=1)
belt <- read.csv("F:/ShrubDensity/PresenceAbsence/Output/USGSplotXspp.csv",header=TRUE, row.names=1)
# Keep only usgs sites that have both soil and veg data.
beltApril <- belt[c(61:159),]
beltUSGS <- belt[c("1","2","10","11","12","14","15","16","17","18","19","20","21","23","24","32","33","38","39","40","42","43","44","47","48","50","57","59","60","61","67","68","73","77","80","82","90"),]
belt <- rbind(beltApril, beltUSGS)
# Remove Predetermined Variables (Covariance and VIF)
soil <- subset(soil, select = -c(DepthClass,Aspect,Sand.50,Clay.50,pH.50,DryValue.50,EfferScale.50,AWHC.50,MaxClay,DWASand,DWA.AWHC,Tot.Texture,H1.Texture,SlopeShape,Tot.SandSize,H1.SandSize,H1.DryRed,H1.DryValue,H1.DryCClass,Tot.DryRed,Tot.DryValue,Tot.DryCClass,MaxSand,MaxpH,MaxDryValue,MaxAWHC))
# Combine Plant Data and Soils Data
soilplant <- soil
#soilplant$ARTR2 <- lpi$ARTR2
soilplant$ATCA2 <- lpi$ATCA2
# Which rows have NA present somewhere
rownames(soil)[rowSums(is.na(soil)) > 0]
# Replace NA with 0 (necesary for Boruta but not Random Forest)
soil[is.na(soil)] <- 0 # replace NA with 0
# Run Random Forest
live.rf = randomForest(as.numeric(ATCA2) ~ .
, data = soilplant,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 500)
#var explained printed
print(live.rf)
(rf <- randomForest(x=soil,y=as.numeric(lpi$ATCA2),proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 501))
plot(live.rf)
plot(rf)
varImpPlot(live.rf, sort=TRUE, main = 'Live Sagebrush')
varImpPlot(rf, sort=TRUE, main = 'Live Sagebrush')
plot( predict(live.rf), y=live.rf$y)
abline(c(0,1),col=2)
plot( predict(rf), y=lpi$ARTR2)
abline(c(0,1),col=2)
# Shows values of varImpPlot. Type = MSE or Node Purity, , 2)=#of decimal places
a <- round(importance(live.rf,type=1), 2)
SoilVariables <- rownames(a)
rownames(a) <- NULL
a <- cbind(SoilVariables,a)
a <- a[order(a[,2],decreasing=TRUE),]
a <- round(importance(live.rf,type=1), 2)
# Health
library(plyr)
### % Dry Weight ### (PDW)
# Dry/Fresh
# if plant is better hydrated the # will be low
# if plant is dessicated # will be higher
### Specific Leaf Area ### (SLA)
# m2/g(dry)
# thicker leaves less efficient but tougher (lower SLA)
# look at other peoples SLA
# typical (Bruce Bugbee) is 100 to 600
la<-read.csv("F:/Health/LeafAreaEpidermalConductance.csv",header=TRUE)
la <- la[ which(!la$Wet.Dry<0.000000), ] # Remove negative weights.
la <- la[,c(1,14:15)]
View(la)
NP<-read.csv("F:/Health/April Sagebrush N and Protein.csv",header=TRUE)
NP <- NP[,c(2,5:6)]
View(NP)
View(la)
pdw <- ddply( la, 'Plot', summarize, pdw = mean(PctDryWeight, na.rm = T))
View(pdw)
sla <- ddply( la, 'Plot', summarize, sla = mean(SLAcm, na.rm = T))
LA <- join(pdw, sla, by = 'Plot', type = 'inner')
View(LA)
both <- merge(NP, LA, by=c("Plot"))
View(both)
hist(LA$pdw)
View(LA)
hist(LA$sla)
hist(NP$NitrogePct)
hist(NP$ProteinPct)
qqPlot(LA$pdw, main="QQ Plot")
?qqPlot
??qqPlot
Den <- read.csv("F:/LPI/Output/AprilLPIDensityM2.csv",header=TRUE, row.names=1)
Soil <- read.csv("F:/Soils/SoilEnvironmentaldataApril.csv",header=TRUE, row.names=1)
Soil <- cbind(Plot = rownames(Soil), Soil)
View(Soil)
ARTR2 <- Den$ARTR2
artr <- cbind(Soil,ARTR2) ; artr <- artr[, !sapply(artr, is.factor)] # Combine ARTR with Soils, remove the factor variables
ALA <- merge(LA, Soil, by=c("Plot"))
ANP <- merge(NP, Soil, by=c("Plot"))
View(ALA)
View(ANP)
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(~MaxClay+DWAClay+H1.ClayPercent+Clay.50+sla+pdw,data=ALA,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="Clay Variables")
View(ALA)
View(Soil)
View(artr)
health <- cbind(LA,ARTR2)
health <- merge(LA, ARTR2, by=c("Plot"))
View(Den)
ARTR2 <- Den$ARTR2+Den$row.names
Den$row.names
View(Den)
View(ALA)
Den[row.names(Den) %in% row.names(ALA),]
ALA[row.names(ALA) %in% row.names(Den),]
LA[row.names(LA) %in% row.names(Den),]
rownames(LA)[row.names(LA) %in% row.names(Den)]
rownames(LA)[row.names(LA) %in% row.names(NP)]
View(LA)
View(NP)
ARTR2 <- Den[,1]
View(Den)
ARTR2 <- Den[,4]
Den <- read.csv("F:/LPI/Output/AprilLPIDensityM2.csv",header=TRUE)
View(Den)
Den <- read.csv("F:/LPI/Output/AprilLPIDensityM2.csv",header=TRUE, row.names=1)
Den <- read.csv("F:/LPI/Output/AprilLPIDensityM2.csv",header=TRUE)
View(Den)
Den$Plot <- Den$X
View(Den)
Den <- read.csv("F:/LPI/Output/AprilLPIDensityM2.csv",header=TRUE)
rename(Den, "X"="Plot")
rename(Den, c("X"="Plot"))
Den <- rename(Den, c("X"="Plot"))
View(Den)
ARTR2 <- Den[,c(1,4)]
View(ARTR2)
ARTR2 <- Den[,c(1,5)]
View(ARTR2)
ARTR2 <- Den$ARTR2
art <- Den[,c(1,5)]
health <- merge(LA, art, by=c("Plot"))
View(health)
ANP <- merge(NP, art, by=c("Plot"))
View(ANP)
# Health
library(plyr)
### % Dry Weight ### (PDW)
# Dry/Fresh
# if plant is better hydrated the # will be low
# if plant is dessicated # will be higher
### Specific Leaf Area ### (SLA)
# m2/g(dry)
# thicker leaves less efficient but tougher (lower SLA)
# look at other peoples SLA
# typical (Bruce Bugbee) is 100 to 600
la<-read.csv("F:/Health/LeafAreaEpidermalConductance.csv",header=TRUE)
la <- la[ which(!la$Wet.Dry<0.000000), ] # Remove negative weights.
la <- la[,c(1,14:15)]
NP<-read.csv("F:/Health/April Sagebrush N and Protein.csv",header=TRUE)
NP <- NP[,c(2,5:6)]
pdw <- ddply( la, 'Plot', summarize, pdw = mean(PctDryWeight, na.rm = T))
sla <- ddply( la, 'Plot', summarize, sla = mean(SLAcm, na.rm = T))
LA <- join(pdw, sla, by = 'Plot', type = 'inner')
both <- merge(NP, LA, by=c("Plot"))
hist(LA$pdw)
hist(LA$sla)
hist(NP$NitrogePct)
hist(NP$ProteinPct)
# LA <-LA[-c(14),]
# hist(LA$sla)
qqPlot(LA$pdw, main="QQ Plot")
qqPlot(LA$sla, main="QQ Plot")
qqPlot(NP$NitrogePct, main="QQ Plot")
qqPlot(NP$ProteinPct, main="QQ Plot")
Den <- read.csv("F:/LPI/Output/AprilLPIDensityM2.csv",header=TRUE)
Den <- rename(Den, c("X"="Plot"))
Soil <- read.csv("F:/Soils/SoilEnvironmentaldataApril.csv",header=TRUE, row.names=1)
Soil <- cbind(Plot = rownames(Soil), Soil)
ARTR2 <- Den$ARTR2
artr <- cbind(Soil,ARTR2) ; artr <- artr[, !sapply(artr, is.factor)] # Combine ARTR with Soils, remove the factor variables
ALA <- merge(LA, Soil, by=c("Plot"))
ANP <- merge(NP, Soil, by=c("Plot"))
art <- Den[,c(1,5)]
LAhealth <- merge(LA, art, by=c("Plot"))
NPhealth <- merge(NP, art, by=c("Plot"))
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
View(LAhealth)
pairs(~pdw+sla+ARTR2,data=LAhealth,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="LA Variables")
View(NPhealth)
ls(NPhealth)
pairs(~NitrogePct+ProteinPct+ARTR2,data=NPhealth,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="NP Variables")
Plot(LAhealth)
plot(LAhealth)
plot(x=pdw,y=ARTR2,data=LAhealth)
plot(x=ARTR2,y=pdw,data=LAhealth)
View(LAhealth)
plot(LAhealth)
View(Den)
# Clay
pairs(~MaxClay+DWAClay+H1.ClayPercent+Clay.50+sla+pdw,data=ALA,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="Clay Variables")
# Sand
pairs(~MaxSand+DWASand+H1.SandPercent+Sand.50+sla+pdw,data=ALA,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="Sand Variables")
# pH
pairs(~MaxpH+DWApH+H1.pH+pH.50+sla+pdw,data=ALA,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="pH Variables")
# AWHC
pairs(~MaxAWHC+DWA.AWHC+H1.DWA_AWC+AWHC.50+sla+pdw,data=ALA,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="AWHC Variables")
# Effervescence
pairs(~MaxEffervescence+Tot.EfferScale+H1.EfferScale+EfferScale.50+sla+pdw,data=ALA,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="Effervescence Variables")
# DryValue
pairs(~MaxDryValue+Tot.DryValue+H1.DryValue+DryValue.50+sla+pdw,data=ALA,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="DryValue Variables")
art <- cbind(Soil,ARTR2)
# Depth
pairs(~PedonDepth+Depth200+H1.Depth+DepthClass+sla+pdw,data=ALA,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="Depth Variables")
# Factors
pairs(~SlopeShape+Tot.Texture+Tot.SandSize+H1.Texture+H1.SandSize+sla+pdw,data=ALA,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="Factor Variables")
#
pairs(~H1.SandPercent+DWASand+DWA.AWHC+MaxAWHC+sla+pdw,data=ALA,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main=" Variables")
#
pairs(~H1.SandPercent+H1.ClayPercent+H1.Depth+H1.DWA_AWC+H1.pH+sla+pdw,data=ALA,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main=" Variables")
#
pairs(~MaxAWHC+DWA.AWHC+H1.DWA_AWC+AWHC.50+MaxSand+DWASand+H1.SandPercent+Sand.50+sla+pdw,data=ALA,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main=" Variables")
#
pairs(~MaxAWHC+DWA.AWHC+H1.DWA_AWC+AWHC.50+MaxSand+DWASand+H1.SandPercent+sla+pdw,data=ALA,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main=" Variables")
# Clay
pairs(~MaxClay+DWAClay+H1.ClayPercent+Clay.50+NitrogePct+ProteinPct,data=ANP,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="Clay Variables")
# Sand
pairs(~MaxSand+DWASand+H1.SandPercent+Sand.50+NitrogePct+ProteinPct,data=ANP,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="Sand Variables")
# pH
pairs(~MaxpH+DWApH+H1.pH+pH.50+NitrogePct+ProteinPct,data=ANP,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="pH Variables")
# AWHC
pairs(~MaxAWHC+DWA.AWHC+H1.DWA_AWC+AWHC.50+NitrogePct+ProteinPct,data=ANP,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="AWHC Variables")
# Effervescence
pairs(~MaxEffervescence+Tot.EfferScale+H1.EfferScale+EfferScale.50+NitrogePct+ProteinPct,data=ANP,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="Effervescence Variables")
# DryValue
pairs(~MaxDryValue+Tot.DryValue+H1.DryValue+DryValue.50+NitrogePct+ProteinPct,data=ANP,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="DryValue Variables")
art <- cbind(Soil,ARTR2)
# Depth
pairs(~PedonDepth+Depth200+H1.Depth+DepthClass+NitrogePct+ProteinPct,data=ANP,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="Depth Variables")
# Factors
pairs(~SlopeShape+Tot.Texture+Tot.SandSize+H1.Texture+H1.SandSize+NitrogePct+ProteinPct,data=ANP,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main="Factor Variables")
#
pairs(~H1.SandPercent+DWASand+DWA.AWHC+MaxAWHC+NitrogePct+ProteinPct,data=ANP,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main=" Variables")
#
pairs(~H1.SandPercent+H1.ClayPercent+H1.Depth+H1.DWA_AWC+H1.pH+NitrogePct+ProteinPct,data=ANP,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main=" Variables")
#
pairs(~MaxAWHC+DWA.AWHC+H1.DWA_AWC+AWHC.50+MaxSand+DWASand+H1.SandPercent+Sand.50+NitrogePct+ProteinPct,data=ANP,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main=" Variables")
#
pairs(~MaxAWHC+DWA.AWHC+H1.DWA_AWC+AWHC.50+MaxSand+DWASand+H1.SandPercent+NitrogePct+ProteinPct,data=ANP,
lower.panel=panel.smooth, upper.panel=panel.cor,
pch=20, na.action = na.exclude, main=" Variables")
live.rf = randomForest(as.numeric(ATCA2) ~ .
, data = LaHealth,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 500)
library(randomForest)
live.rf = randomForest(as.numeric(ATCA2) ~ .
, data = LaHealth,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 500)
# Health
library(plyr)
### % Dry Weight ### (PDW)
# Dry/Fresh
# if plant is better hydrated the # will be low
# if plant is dessicated # will be higher
### Specific Leaf Area ### (SLA)
# m2/g(dry)
# thicker leaves less efficient but tougher (lower SLA)
# look at other peoples SLA
# typical (Bruce Bugbee) is 100 to 600
la<-read.csv("F:/Health/LeafAreaEpidermalConductance.csv",header=TRUE)
la <- la[ which(!la$Wet.Dry<0.000000), ] # Remove negative weights.
la <- la[,c(1,14:15)]
NP<-read.csv("F:/Health/April Sagebrush N and Protein.csv",header=TRUE)
NP <- NP[,c(2,5:6)]
pdw <- ddply( la, 'Plot', summarize, pdw = mean(PctDryWeight, na.rm = T))
sla <- ddply( la, 'Plot', summarize, sla = mean(SLAcm, na.rm = T))
LA <- join(pdw, sla, by = 'Plot', type = 'inner')
both <- merge(NP, LA, by=c("Plot"))
hist(LA$pdw)
hist(LA$sla)
hist(NP$NitrogePct)
hist(NP$ProteinPct)
# LA <-LA[-c(14),]
# hist(LA$sla)
qqPlot(LA$pdw, main="QQ Plot")
qqPlot(LA$sla, main="QQ Plot")
qqPlot(NP$NitrogePct, main="QQ Plot")
qqPlot(NP$ProteinPct, main="QQ Plot")
Den <- read.csv("F:/LPI/Output/AprilLPIDensityM2.csv",header=TRUE)
Den <- rename(Den, c("X"="Plot"))
Soil <- read.csv("F:/Soils/SoilEnvironmentaldataApril.csv",header=TRUE, row.names=1)
Soil <- cbind(Plot = rownames(Soil), Soil)
ARTR2 <- Den$ARTR2
artr <- cbind(Soil,ARTR2) ; artr <- artr[, !sapply(artr, is.factor)] # Combine ARTR with Soils, remove the factor variables
ALA <- merge(LA, Soil, by=c("Plot"))
ANP <- merge(NP, Soil, by=c("Plot"))
art <- Den[,c(1,5)]
LAhealth <- merge(LA, art, by=c("Plot"))
NPhealth <- merge(NP, art, by=c("Plot"))
library(randomForest)
live.rf = randomForest(as.numeric(ATCA2) ~ .
, data = LaHealth,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 500)
live.rf = randomForest(as.numeric(ATCA2) ~ .
, data = LAhealth,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 500)
live.rf = randomForest(as.numeric(ARTR2) ~ .
, data = LAhealth,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 500)
#var explained printed
print(live.rf)
View(LAhealth)
live.rf = randomForest(as.numeric(ARTR2) ~ pdw+sla
, data = LAhealth,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 500)
#var explained printed
print(live.rf)
live.rf = randomForest(as.numeric(ARTR2) ~ pdw+sla
, data = LAhealth,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 500)
#var explained printed
print(live.rf)
live.rf = randomForest(as.numeric(ARTR2) ~ pdw+sla
, data = LAhealth,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 500)
#var explained printed
print(live.rf)
live.rf = randomForest(as.numeric(ARTR2) ~ pdw+sla
, data = LAhealth,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 500)
#var explained printed
print(live.rf)
live.rf = randomForest(as.numeric(ARTR2) ~ pdw+sla
, data = LAhealth,proximity=TRUE,
importance=TRUE,keep.forest=TRUE,
na.action = na.omit,mtry=2,
ntree = 500)
#var explained printed
print(live.rf)
