t3 = (pobs*pexp-2*pexp+pobs)^2
vhat = (t1 + t2*(1-pobs)^2 -t3)/(n*(1-pexp)^4)
se=sqrt(vhat)
return(c(kappa,se))
}
class.sum=function(truth,predicted){
xt=table(truth,round(predicted+0.000001))
pcc=round(100*sum(diag(xt))/sum(xt),2)
spec=round(100*xt[1,1]/sum(xt[1,]),2)
sens=round(100*xt[2,2]/sum(xt[2,]),2)
kap=round(kappa(xt)[1],4)
au=round(roc.area(truth,predicted)$A,4)
list(round(c(pcc,spec,sens,kap,au),3))
}
library(randomForest)
live.rf = randomForest(as.factor(sage) ~
AWC100 + AWC25 + AWC50 + BioticCrustClass +
CarbonateStage + Depth100 + Depth150 + Depth200 +
Depth50 + Elevation + MaxAWC + maxClay + maxSand +
maxDepth + maxDryChroma + maxDryValue + minClay +
maxMoistChroma + maxMoistValue + maxpH + minpH +
minDryChroma + minDryValue + minMoistChroma +
minMoistValue + minSand + SlopeShape +Subsurface +
Surface + TotalAWC
, data = live,proximity=TRUE,importance=TRUE,
keep.forest=TRUE)
live.rf$confusion
class.sum(live$sage,predict(live.rf,type="prob")[,2])
varImpPlot(live.rf, main = 'Live Sagebrush')
live.rf.xval.prob=rep(0,nrow(live))
xvs=rep(1:10,length=nrow(live))
xvs=sample(xvs)
for(i in 1:10){
train=live[xvs!=i,]
test=live[xvs==i,]
rf=randomForest(as.factor(sage) ~
AWC100 + AWC25 + AWC50 + BioticCrustClass +
CarbonateStage + Depth100 + Depth150 + Depth200 +
Depth50 + Elevation + MaxAWC + maxClay + maxSand +
maxDepth + maxDryChroma + maxDryValue + minClay +
maxMoistChroma + maxMoistValue + maxpH + minpH +
minDryChroma + minDryValue + minMoistChroma +
minMoistValue + minSand + SlopeShape +Subsurface +
Surface + TotalAWC
,data=train)
live.rf.xval.prob[xvs==i]=predict(rf,test,type="prob")[,2]
}
live.rf.confuse.xval=table(live$sage,live.rf.xval.prob)
100-100*sum(diag(live.rf.xval.prob))/nrow(live)
table(live$sage,round(live.rf.xval.prob+ 0.0000001))
class.sum(live$sage,live.rf.xval.prob)
live.rf.imp=randomForest(as.factor(sage)~  BioticCrustClass +CarbonateStage + Depth100 +
Depth150 + Depth200 + Depth50 + Elevation +
MaxAWC + maxDepth + maxDryValue + maxpH +
minDryChroma + minDryValue + minMoistChroma +
minMoistValue + SlopeShape
,proximity=TRUE,importance=TRUE,keep.forest=TRUE,data=live)
live.rf.imp$confusion
class.sum(live$sage,predict(live.rf.imp,type="prob")[,2])
live.rf.confuse.xval=table(live$sage,live.rf.xval.prob)
100-100*sum(diag(live.rf.xval.prob))/nrow(live)
live.rf.imp.xval.prob=rep(0,nrow(live))
xvs=rep(1:10,length=nrow(live))
xvs=sample(xvs)
for(i in 1:10){
train=live[xvs!=i,]
test=live[xvs==i,]
rf=randomForest(as.factor(sage)~ BioticCrustClass +CarbonateStage + Depth100 +
Depth150 + Depth200 + Depth50 + Elevation +
MaxAWC + maxDepth + maxDryValue + maxpH +
minDryChroma + minDryValue + minMoistChroma +
minMoistValue + SlopeShape
,data=train)
live.rf.imp.xval.prob[xvs==i]=predict(rf,test,type="prob")[,2]
}
table(live$sage,round(live.rf.imp.xval.prob+ 0.0000001))
class.sum(live$sage,live.rf.imp.xval.prob)
live.rf.confuse.xval=table(live$sage,live.rf.imp.xval.prob)
100-100*sum(diag(live.rf.imp.xval.prob))/nrow(live)
library(plyr)
library(data.table)
library(splitstackshape)
# Read in Soils Data
dat <- read.csv("F:/Soils/SoilDataInputR.csv", header = T,nrows = 444)
# Pull out meaningful factors
df1 <- dat[,c(1:3,5:10,17,19,20,36,39:40,46,54)]
View(df1)
df2 <- dat[,c(1,40)] # Slope shape
View(df2)
View(df2)
SlopeShape <- df2[complete.cases(df2), ] #Remove rows with only NA
df1$Elevation <- df1$Elevation/3.2808 # Change Elevation from ft to m
dat$top <- as.numeric(dat$top)
dat$bottom <- as.numeric(dat$bottom)
dat$ClayPercent <- as.numeric(dat$ClayPercent)
dat$Elevation <- as.numeric(dat$Elevation)
dat$SandPercent <- as.numeric(dat$SandPercent)
dat$pH <- as.numeric(dat$pH)
dat$Slope <- as.numeric(dat$Slope)
dat$SlopeShape <- as.factor(dat$SlopeShape)
dat$DryValue <- as.factor(dat$DryValue)
dat$DryChroma <- as.factor(dat$DryChroma)
dat$MoistValue <- as.factor(dat$MoistValue)
dat$MoistChroma <- as.factor(dat$MoistChroma)
dat$CarbonateStage <- as.factor(dat$CarbonateStage)
dat$BioticCrustClass <- as.factor(dat$BioticCrustClass)
dat$DryHue <- as.factor(dat$DryHue)
dat$MoistHue <- as.factor(dat$MoistHue)
is.factor(dat$MoistHue)
# Create Functions for extracting to single value per unique id(plot)
f1 <- function(x) max(x$ClayPercent, na.rm = T)
f111 <- function(x) min(x$ClayPercent, na.rm = T)
f2 <- function(x) summary(x[,-1])
f3 <- function(x) max(x$bottom, na.rm = T)
f4 <- function(x) max(x$SandPercent, na.rm = T)
f41 <- function(x) min(x$SandPercent, na.rm = T)
f5 <- function(x) max(x$Elevation, na.rm = T)
f6 <- function(x) max(x$pH, na.rm = T)
f7 <- function(x) min(x$pH, na.rm = T)
f8 <- function(x) max(x$DryValue, na.rm = T)
f9 <- function(x) min(x$DryValue, na.rm = T)
f10 <- function(x) max(x$DryChroma, na.rm = T)
f11 <- function(x) min(x$DryChroma, na.rm = T)
f12 <- function(x) max(x$MoistValue, na.rm = T)
f13 <- function(x) min(x$MoistValue, na.rm = T)
f14 <- function(x) max(x$MoistChroma, na.rm = T)
f15 <- function(x) min(x$MoistChroma, na.rm = T)
f16 <- function(x) max(x$CarbonateStage, na.rm = T)
f17 <- function(x) max(x$BioticCrustClass, na.rm = T)
f18 <- function(x) max(x$Slope, na.rm = T)
# pull out max/min for 1 value per unique id(plot)
#Numeric
maxClay <- ddply(.data = df1, .(id), .fun = f1)
names(maxClay)[2] <- 'maxClay'
minClay <- ddply(.data = df1, .(id), .fun = f111)
names(minClay)[2] <- 'minClay'
maxDepth <- ddply(.data = df1, .(id), .fun = f3)
names(maxDepth)[2] <- 'maxDepth'
maxSand <- ddply(.data = df1, .(id), .fun = f4)
names(maxSand)[2] <- 'maxSand'
minSand <- ddply(.data = df1, .(id), .fun = f41)
names(minSand)[2] <- 'minSand'
Elevation <- ddply(.data = df1, .(id), .fun = f5)
names(Elevation)[2] <- 'Elevation'
maxpH <- ddply(.data = df1, .(id), .fun = f6)
names(maxpH)[2] <- 'maxpH'
minpH <- ddply(.data = df1, .(id), .fun = f7)
names(minpH)[2] <- 'minpH'
Slope <- ddply(.data = df1, .(id), .fun = f18)
names(Slope)[2] <- 'Slope'
#Factor
maxDryValue <- ddply(.data = df1, .(id), .fun = f8)
names(maxDryValue)[2] <- 'maxDryValue'
minDryValue <- ddply(.data = df1, .(id), .fun = f9)
names(minDryValue)[2] <- 'minDryValue'
maxDryChroma <- ddply(.data = df1, .(id), .fun = f10)
names(maxDryChroma)[2] <- 'maxDryChroma'
minDryChroma <- ddply(.data = df1, .(id), .fun = f11)
names(minDryChroma)[2] <- 'minDryChroma'
maxMoistValue <- ddply(.data = df1, .(id), .fun = f12)
names(maxMoistValue)[2] <- 'maxMoistValue'
minMoistValue <- ddply(.data = df1, .(id), .fun = f13)
names(minMoistValue)[2] <- 'minMoistValue'
maxMoistChroma <- ddply(.data = df1, .(id), .fun = f14)
names(maxMoistChroma)[2] <- 'maxMoistChroma'
minMoistChroma <- ddply(.data = df1, .(id), .fun = f15)
names(minMoistChroma)[2] <- 'minMoistChroma'
CarbonateStage <- ddply(.data = df1, .(id), .fun = f16)
names(CarbonateStage)[2] <- 'CarbonateStage'
BioticCrustClass <- ddply(.data = df1, .(id), .fun = f17)
names(BioticCrustClass)[2] <- 'BioticCrustClass'
# Surface
df1$Surface <- as.numeric(df1$top<1) # Turns surface horizon into 1, and all other into 0
max.func.sur <- function(df1) {
max.moist.sur <- max(df1$Surface)
return(data.frame(Surface = df1$MoistChroma[df1$Surface==max.moist.sur]))
}
Surface <- ddply(df1, .(id), max.func.sur)
names(Surface)[2] <- 'Surface'
View(Surface)
# Subsurface
df1 <- getanID(data = df1, id.vars = "id") # Creates an ordered list of each horizon in a plot
df1$Subsurface <- as.numeric(df1$.id==2) # Makes subsurface horizon 1, and all other horizons 0
df1$MoistChroma[is.na(df1$MoistChroma)] <- 0
max.func.sub <- function(df1) {
max.moist.sub <- max(df1$Subsurface)
return(data.frame(Subsurface = df1$MoistChroma[df1$Subsurface==max.moist.sub]))
}
Subsurface <- ddply(df1, .(id), max.func.sub)
names(Subsurface)[2] <- 'Subsurface'
View(Subsurface)
all <- join(Elevation, SlopeShape, by = 'id', type = 'inner')
all <- join(all, maxClay, by = 'id', type = 'inner')
all <- join(all, minClay, by = 'id', type = 'inner')
all <- join(all, maxSand, by = 'id', type = 'inner')
all <- join(all, minSand, by = 'id', type = 'inner')
all <- join(all, maxDepth, by = 'id', type = 'inner')
all <- join(all, maxpH, by = 'id', type = 'inner')
all <- join(all, minpH, by = 'id', type = 'inner')
all <- join(all, maxDryValue, by = 'id', type = 'inner')
all <- join(all, minDryValue, by = 'id', type = 'inner')
all <- join(all, maxDryChroma, by = 'id', type = 'inner')
all <- join(all, minDryChroma, by = 'id', type = 'inner')
all <- join(all, maxMoistValue, by = 'id', type = 'inner')
all <- join(all, minMoistValue, by = 'id', type = 'inner')
all <- join(all, maxMoistChroma, by = 'id', type = 'inner')
all <- join(all, minMoistChroma, by = 'id', type = 'inner')
all <- join(all, CarbonateStage, by = 'id', type = 'inner')
all <- join(all, BioticCrustClass, by = 'id', type = 'inner')
all <- join(all, Surface, by = 'id', type = 'inner')
all <- join(all, Subsurface, by = 'id', type = 'inner')
View(all)
# Create new soil parameter where depth is binary.
# if the maximum depth is >50/100/150/200 then 1, if not then 0
all$Depth50 <- as.numeric(all$maxDepth > 50)
all$Depth100 <- as.numeric(all$maxDepth > 100)
all$Depth150 <- as.numeric(all$maxDepth > 150)
all$Depth200 <- as.numeric(all$maxDepth == 200)
write.csv(all,file="F:/Soils/SoilEnvironmentalData.csv")
Soils <- read.csv("F:/Soils/SoilEnvironmentalDataModWithColbyAWS.csv", header=T) # All soil environmental data
library(car)
library(MASS)
SageClass <- read.csv("F:/ShrubDensity/PresenceAbsence/SageClasses.csv", header=T) # 1 = live sage present, 2 = dead sage present & no live, 3 = no sage live or dead present.
Density <- read.csv("F:/ShrubDensity/HeightClass/TotalDensityM2WithPlotBreakdown.csv", header=T) # modified the plot code to have 3 soil types, and 4 veg types
rownames(Soils) <- NULL
Density <- read.csv("F:/ShrubDensity/HeightClass/AprilTotalDensityM2.csv", header=T) # Total density per m2 for april's data
View(Density)
Density <- Density[, colSums(Density != 0) > 0] # remove columns with only 0 values where there were no shrubs of that species found.
Density <- cbind(Density, Soils) # combine soil and sagebrush density data
Density <- Density[,-22]# remove column 22 which was a second column of unique id(plots)
rownames(Density) <- NULL
write.csv(Density, file="F:/UnivariatePrescreening/DensitySoils.csv")
Soils <- read.csv("F:/Soils/SoilEnvironmentalDataModWithColbyAWS.csv", header=T) # All soil environmental data
SageClass <- read.csv("F:/ShrubDensity/PresenceAbsence/SageClasses.csv", header=T) # 1 = live sage present, 2 = dead sage present & no live, 3 = no sage live or dead present.
Soils <- read.csv("F:/LPI/USGSLPIofAprilAndUSGS.csv", header=T) # All LPI data
View(Soils)
lpi <- read.csv("F:/LPI/USGSLPIofAprilAndUSGS.csv", header=T) # All LPI data
View(lpi)
lpi <- lpi[,-c(1,2,6,7,9)]
View(lpi)
View(lpi)
lpi.order <- lpi[order(lpi$Indicator),]  #sort a dataframe by the order of the elements in Indicator
View(lpi.order)
lpi.artr.l <- lpi[grep("ARTR", lpi$Indicator), ]
head(lpi.artr.l)
tail(lpi.artr.l)
lpi.order <- lpi.artr.l[order(lpi.artr.l$Indicator),]  #sort a dataframe by the order of the elements in Indicator
tail(lpi.order)
head(lpi.order)
View(lpi.order)
lpi.artr.d <- lpi[grep("ARTR/D", lpi$Indicator), ]
head(lpi.artr.dead)
head(lpi.artr.d)
View(lpi.artr.l)
View(lpi.artr.l)
lpi <- read.csv("F:/LPI/USGSLPIofAprilAndUSGS.csv", header=T) # All LPI data by transect
lpi <- lpi[,-c(1,2,6,7,9)] # remove extraneous columns
lpi[lpi$Indicator %ARTR% keep, ]
lpi[lpi$Indicator %in% ARTR, ]
lpi[lpi$Indicator %in% 'ARTR', ]
head(lpi)
lpi <- read.csv("F:/LPI/USGSLPIofAprilAndUSGS.csv", header=T) # All LPI data by transect
lpi <- lpi[,-c(1,2,6,7,9)] # remove extraneous columns
test <- lpi[lpi$Indicator %in% 'ARTR', ]
lpi <- read.csv("F:/LPI/USGSLPIofAprilAndUSGS.csv", header=T) # All LPI data by transect
lpi <- lpi[,-c(1,2,6,7,9)] # remove extraneous columns
lpi.artr.d <- lpi[grep("ARTR", lpi$Indicator), ]
lpi <- read.csv("F:/LPI/USGSLPIofAprilAndUSGS.csv", header=T) # All LPI data by transect
lpi <- lpi[,-c(1,2,6,7,9)] # remove extraneous columns
lpi.artr <- lpi[grep("ARTR", lpi$Indicator), ]
test <- lpi.artr[lpi$Indicator %in% 'ARTR', ]
subset(lpi, Indicator %in% "ARTR")
lpi <- read.csv("F:/LPI/USGSLPIofAprilAndUSGS.csv", header=T) # All LPI data by transect
View(lpi)
test <- lpi.artr[lpi$Indicator %in% 'ARTR2', ]
lpi <- lpi[,-c(1,2,6,7,9)] # remove extraneous columns
lpi.artr <- lpi[grep("ARTR", lpi$Indicator), ]
View(lpi.artr)
lpi.artr <- lpi[grep("ARTR2", lpi$Indicator), ]
View(lpi.artr)
lpi.order <- lpi.artr.l[order(lpi.artr.l$Indicator),]  #sort a dataframe by the order of the elements in Indicator
lpi.order <- lpi.artr[order(lpi.artr$Indicator),]  #sort a dataframe by the order of the elements in Indicator
View(lpi.order)
test <- lpi.artr[lpi$Indicator %in% 'ARTR2', ]
View(test)
lpi <- read.csv("F:/LPI/USGSLPIofAprilAndUSGS.csv", header=T) # All LPI data by transect
lpi <- lpi[,-c(1,2,6,7,9)] # remove extraneous columns
lpi.artr <- lpi[grep("ARTR2", lpi$Indicator), ]
test <- lpi.artr[lpi$Indicator %in% 'ARTR2', ]
View(test)
t2 <- subset(lpi, Indicator %in% "ARTR2")
View(`t2`)
dat.keep = lpi[ARTR(lpi) %in% ARTR2, ]
dat.keep = lpi[colnmaes(Indicator) %in% ARTR2, ]
dat.keep = lpi[rownames(Indicator) %in% ARTR2, ]
dat.keep = lpi[colnames(Indicator) %in% ARTR2, ]
View(lpi)
dat.keep = lpi[colnames(Indicator) %in% ARTR2, ]
lpi <- read.csv("F:/LPI/USGSLPIofAprilAndUSGS.csv", header=T) # All LPI data by transect
lpi <- lpi[,-c(1,2,6,7,9)] # remove extraneous columns
lpi.artr <- lpi[grep("ARTR2", lpi$Indicator), ]
View(lpi.artr)
test <- lpi.artr[lpi$Indicator %in% 'ARTR2', ]
View(test)
t2 <- subset(lpi, Indicator %in% "ARTR2")
View(`t2`)
t3 <- subset(lpi, Indicator %in% "ARTR2/D")
View(`t3`)
t1 <- subset(lpi, Indicator %in% "ARTR2" "ARTR/DP")
t1 <- subset(lpi, Indicator %in% "ARTR2", "ARTR/DP" )
t1 <- subset(lpi, Indicator %in% c("ARTR2","ARTR/DP" ))
View(`t1`)
lpi <- read.csv("F:/LPI/USGSLPIofAprilAndUSGS.csv", header=T) # All LPI data by transect
lpi <- lpi[,-c(1,2,6,7,9)] # remove extraneous columns
t1 <- subset(lpi, Indicator %in% "ARTR2")
t2 <- subset(lpi, Indicator %in% "ARTR2/D")
t3 <- subset(lpi, Indicator %in% "ARTR2/DP")
View(`t1`)
lpi.artr <- lpi[grep("ARTR2", lpi$Indicator), ]
View(`t3`)
lpi <- read.csv("F:/LPI/USGSLPIofAprilAndUSGS.csv", header=T) # All LPI data by transect
lpi <- lpi[,-c(1,2,6,7,9)] # remove extraneous columns
t1 <- subset(lpi, Indicator %in% "ARTR2")
t2 <- subset(lpi, Indicator %in% "ARTR2/D")
t3 <- subset(lpi, Indicator %in% "ARTR2/DP")
live <- cbind(t1,t3)
View(live)
live <- rbind(t1,t3)
View(live)
live <- cbind(t1,t3)
View(live)
View(`t1`)
View(`t2`)
View(`t3`)
View(live)
lpi <- read.csv("F:/LPI/USGSLPIofAprilAndUSGS.csv", header=T) # All LPI data by transect
lpi <- lpi[,-c(1,2,6,7,9)] # remove extraneous columns
l <- subset(lpi, Indicator %in% "ARTR2")
d <- subset(lpi, Indicator %in% "ARTR2/D")
dp <- subset(lpi, Indicator %in% "ARTR2/DP")
live <- cbind(l,dp)
View(live)
View(dp)
View(live)
View(dp)
all <- join(l, dp, by = 'Plot', type = 'inner')
View(all)
live <- cbind(l,dp, by = 'Plot')
lpi <- read.csv("F:/LPI/USGSLPIofAprilAndUSGS.csv", header=T) # All LPI data by transect
lpi <- lpi[,-c(1,2,6,7,9)] # remove extraneous columns
l <- subset(lpi, Indicator %in% "ARTR2")
d <- subset(lpi, Indicator %in% "ARTR2/D")
dp <- subset(lpi, Indicator %in% "ARTR2/DP")
live <- cbind(l,dp, by = 'Plot')
View(live)
t <- cbind(l,d, by = 'Plot')
View(t)
t <- cbind(d, dp by = 'Plot')
t <- cbind(d,dp by = 'Plot')
t1 <- cbind(d,dp by = 'Plot')
dead <- cbind(d,dp)
View(dead)
View(l)
total <- merge(data l,data d,by=c("Plot","Line"))
total <- merge(l,d,by=c("Plot","Line"))
View(total)
total <- merge(l,dp,by=c("Plot","Line"))
View(total)
head(total)
tail(total)
View(dp)
lpi <- read.csv("F:/LPI/USGSLPIofAprilAndUSGS.csv", header=T)
lpi <- lpi[,-c(1,2,6,7,9)] # remove extraneous columns
# break up in to live and dead sagebrush
l <- subset(lpi, Indicator %in% "ARTR2")
dp <- subset(lpi, Indicator %in% "ARTR2/DP")
live <- merge(l,dp,by=c("Plot","Line"))
dead <- subset(lpi, Indicator %in% "ARTR2/D")
# read in all LPI data by transect
lpi <- read.csv("F:/LPI/USGSLPIofAprilAndUSGS.csv", header=T)
lpi <- lpi[,-c(1,2,6,7,9)] # remove extraneous columns
# break up in to live and dead sagebrush
live <- subset(lpi, Indicator %in% "ARTR2")
dp <- subset(lpi, Indicator %in% "ARTR2/DP")
live <- merge(live,dp,by=c("Plot","Line"))
dead <- subset(lpi, Indicator %in% "ARTR2/D")
View(live)
live$total <- live$Any.Hit.N.x + live$Any.Hit.N.y
View(live)
live <- live[,c(1,2,3,7)]
View(live)
View(live)
View(dead)
View(dead)
View(dead)
row.names <- dead$Plot
View(dead)
# read in all LPI data by transect
lpi <- read.csv("F:/LPI/USGSLPIofAprilAndUSGS.csv", header=T)
lpi <- lpi[,-c(1,2,6,7,9)] # remove extraneous columns
# break up in to live and dead sagebrush
live <- subset(lpi, Indicator %in% "ARTR2")
dp <- subset(lpi, Indicator %in% "ARTR2/DP")
live <- merge(live,dp,by=c("Plot","Line"))
dead <- subset(lpi, Indicator %in% "ARTR2/D")
live$total <- live$Any.Hit.N.x + live$Any.Hit.N.y # add ARTR and ARTR/DP totals
live <- live[,c(1,2,3,7)] # remove extra columns
rownames(dead) <- NULL
View(dead)
View(dp)
View(live)
View(lpi)
View(lpi)
View(live)
View(lpi)
View(live)
live$species <- live$Indicator.x
View(live)
# read in all LPI data by transect
lpi <- read.csv("F:/LPI/USGSLPIofAprilAndUSGS.csv", header=T)
lpi <- lpi[,-c(1,2,6,7,9)] # remove extraneous columns
# break up in to live and dead sagebrush
# Live
live <- subset(lpi, Indicator %in% "ARTR2")
dp <- subset(lpi, Indicator %in% "ARTR2/DP")
live <- merge(live,dp,by=c("Plot","Line"))
live$total <- live$Any.Hit.N.x + live$Any.Hit.N.y # add ARTR and ARTR/DP totals
live <- live[,c(1,2,3,7)] # remove extra columns
View(live)
rename(live,"Indicator.x"="species")
library(plyr)
rename(live,"Indicator.x"="species")
?rename
live <- rename(live, replace = c("Indicator.x" = "species"))
View(live)
dead <- subset(lpi, Indicator %in% "ARTR2/D")
View(dead)
View(live)
View(dead)
dead <- subset(lpi, Indicator %in% "ARTR2/D")
rownames(dead) <- NULL
dead <- rename(dead, replace = c("Indicator" = "species", "Any.Hit.N" = "total")) # rename species column
View(dead)
View(live)
View(dead)
View(live)
lpi <- read.csv("F:/ShrubDensity/PresenceAbsence/PlantDenSpeciesSummary 8-21.csv", header=T)
den <- read.csv("F:/ShrubDensity/PresenceAbsence/PlantDenSpeciesSummary 8-21.csv", header=T)
View(den)
View(den)
# read in all LPI data by transect
lpi <- read.csv("F:/LPI/USGSLPIofAprilAndUSGS.csv", header=T)
lpi <- lpi[,-c(1,2,6,7,9)] # remove extraneous columns
lpi.l <- subset(lpi, Indicator %in% "ARTR2") # select only rows with ARTR2
dp <- subset(lpi, Indicator %in% "ARTR2/DP")# select only rows with ARTR2/DP
lpi.l <- merge(lpi.l,dp,by=c("Plot","Line")) #Combine ARTR2 and ARTR2/DP
lpi.l$total <- lpi.l$Any.Hit.N.x + lpi.l$Any.Hit.N.y # add ARTR and ARTR/DP totals
lpi.l <- lpi.l[,c(1,2,3,7)] # remove extra columns
lpi.l <- rename(lpi.l, replace = c("Indicator.x" = "species")) # rename species column
View(lpi.l)
lpi.d <- subset(lpi, Indicator %in% "ARTR2/D") # select only rows with ARTR2/D
rownames(lpi.d) <- NULL # remove extra row.names column
lpi.d <- rename(lpi.d, replace = c("Indicator" = "species", "Any.Hit.N" = "total")) # rename species column
View(lpi.d)
den <- read.csv("F:/ShrubDensity/PresenceAbsence/PlantDenSpeciesSummary 8-21.csv", header=T)
den.l <- subset(den, Species %in% "ARTR2") # select only rows with ARTR2
View(den.l)
View(den.l)
rownames(den.l) <- NULL # remove extra row.names column
View(den.l)
View(den.l)
View(den)
den.l <- subset(den, Species %in% "ARTR2/DP") # select only rows with ARTR2
# read in all LPI data by transect
lpi <- read.csv("F:/LPI/USGSLPIofAprilAndUSGS.csv", header=T)
lpi <- lpi[,-c(1,2,6,7,9)] # remove extraneous columns
# break up in to live and dead sagebrush
# Live
lpi.l <- subset(lpi, Indicator %in% "ARTR2") # select only rows with ARTR2
dp <- subset(lpi, Indicator %in% "ARTR2/DP")# select only rows with ARTR2/DP
lpi.l <- merge(lpi.l,dp,by=c("Plot","Line")) #Combine ARTR2 and ARTR2/DP
lpi.l$total <- lpi.l$Any.Hit.N.x + lpi.l$Any.Hit.N.y # add ARTR and ARTR/DP totals
lpi.l <- lpi.l[,c(1,2,3,7)] # remove extra columns
lpi.l <- rename(lpi.l, replace = c("Indicator.x" = "species")) # rename species column
# Dead
lpi.d <- subset(lpi, Indicator %in% "ARTR2/D") # select only rows with ARTR2/D
rownames(lpi.d) <- NULL # remove extra row.names column
lpi.d <- rename(lpi.d, replace = c("Indicator" = "species", "Any.Hit.N" = "total")) # rename species column
den <- read.csv("F:/ShrubDensity/PresenceAbsence/PlantDenSpeciesSummary 8-21.csv", header=T)
den.l <- subset(den, Species %in% "ARTR2") # select only rows with ARTR2
rownames(den.l) <- NULL # remove extra row.names column
den.d <- subset(den, Species %in% "ARTR2/DP") # select only rows with ARTR2
den.d <- subset(den, Species %in% "ARTR2/D") # select only rows with ARTR2
rownames(den.l) <- NULL # remove extra row.names column
View(den.d)
rownames(den.d) <- NULL # remove extra row.names column
View(den)
View(den.l)
rownames(den.d) <- NULL # remove extra row.names column
den <- read.csv("F:/ShrubDensity/PresenceAbsence/PlantDenSpeciesSummary 8-21.csv", header=T)
den.l <- subset(den, Species %in% "ARTR2") # select only rows with ARTR2
rownames(den.l) <- NULL # remove extra row.names column
den.d <- subset(den, Species %in% "ARTR2/D") # select only rows with ARTR2
rownames(den.d) <- NULL # remove extra row.names column
View(den.d)
View(den.l)
View(den)
View(den)
View(den.l)
library(plyr)
#read in shrub density detail data
class <- read.csv('F:/ShrubDensity/HeightClass/PlantDenDetail 8-21.csv')
