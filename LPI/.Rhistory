plot(fit.env,col="black", cex=0.7)
plot(fit.a,col="orange", cex=0.7)
lpi<-read.csv("F:/LPI/LPIRelativeCoverCommonInExcel.csv",header=TRUE,row.names=1)
lpi
#thi
lpi.env<- read.csv("F:/Soils/SoilEnvironmentalData.csv", header = TRUE)
lpi.env
library(vegan)
lpi.full<-lpi[-which(rowSums(lpi)==0),]
lpi.env.full<-lpi.env[-which(rowSums(lpi)==0),]
nmds.output<-metaMDS(lpi,distance = "bray",trymax=2000,k=2)
ordiplot(nmds.output)
ordiplot(nmds.output, display ="species", type ="n")
text(nmds.output, display="species", col="sienna3")
ordiplot(nmds.output, display = "sites", type = "n")
#let's label thes sites with text
text(nmds.output, display="sites")#, labels = as.character(east.env$Com_Site))
ordiplot(nmds.output, display = "sites", type = "n", main = 'Beef Basin Vegetation Classes')
orditorp(nmds.output, dis="sites", cex=1.5, font=3, col="black",
labels = as.character(lpi.env$id))#Make sure that you use the right environmental data frame.
ordiplot(nmds.output, type="n", main="NMDS of Beef Basin", xlab="NMDS1",
ylab="NMDS2")
orditorp(nmds.output, display="sites", cex=0.7, font=3, col="black",
labels = as.character(lpi.env$id))
text(nmds.output, display="species", col="sienna3")
ordiplot(nmds.output, display = "sites", type = "n")
orditorp(nmds.output, dis="sites", cex=1.5, font=3, col="black",
labels = as.character(lpi.env$id))#Make sure that you use the right environmental data frame.
#If it doesn't have the same number of rows
ordiplot(nmds.output, type="n", main="NMDS of Beef Basin", xlab="NMDS1",
ylab="NMDS2")
orditorp(nmds.output, dis="sites", cex=1.5, font=3, col="black",
labels = as.character(lpi.env$id))
text(nmds.output, display="species", col="sienna3")
ordiplot(nmds.output, display = "sites", type = "n")
orditorp(nmds.output, dis="sites", cex=1.5, font=3, col="black",
labels = as.character(lpi.env$id))#Make sure that
a<-ordiplot(nmds.output, type="n", main="NMDS of Beef Basin", xlab="NMDS1",
ylab="NMDS2")
orditorp(nmds.output, dis="sites", cex=1.5, font=3, col="black",
labels = as.character(lpi.env$id))
text(nmds.output, display="species", col="sienna3")
ordiplot(nmds.output, choices = c(1,2),main="NMDS of Beef Basin")
#overlay text of the species names
text(nmds.output, choices = c(1,2), display="species", col="sienna3")
text(nmds.output, choices = c(1,2), display="sites", col="black")
#this will plot NMDS2 and NMDS3 if k>2; it k=2, this just looks weird.
ordiplot(nmds.output, choices = c(2,3),main="NMDS of Beef Basin")
#overlay text of the species names
text(nmds.output, choices = c(2,3), display="species", col="sienna3")
text(nmds.output, choices = c(2,3), display="sites", col="black")
#this will plot NMDS2 and NMDS3 if k>2; it k=2, this just looks weird.
ordiplot(nmds.output, choices = c(1,3),main="NMDS of Beef Basin")
#overlay text of the species names
text(nmds.output, choices = c(1,3), display="species", col="sienna3")
text(nmds.output, choices = c(1,3), display="sites", col="black")
#repeat what we did above
#do you want to only look at species?
ordiplot(nmds.output, choices = c(1,3), main="NMDS of Beef Basin")
text(nmds.output, choices = c(1,3), display="species", col="sienna3")
fig<-ordiplot(nmds.output, choices = c(1,3),main="NMDS of Beef Basin")
identify(fig, "species")
identify(fig, "sites")
env.rel<-envfit(nmds.output,lpi.env[,c(2:19)])
ordiplot(nmds.output)
plot(env.rel)
env.rel
ordisurf(nmds.output,lpi.env$Elevation, main = 'Elevation')
ordisurf(nmds.output,lpi.env$maxClay, main = 'Maximum Clay Percentage')
ordisurf(nmds.output,lpi.env$maxSand, main = 'Maximum Sand Percentage')
ordisurf(nmds.output,lpi.env$maxDepth, main = 'Depth of Soil Pedon')
ordisurf(nmds.output,lpi.env$maxpH, main = 'Maximum Soil pH')
ordisurf(nmds.output,lpi.env$minpH, main = 'Minimum Soil pH')
library(rpart)
library(verification)
library(randomForest)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
sageL <- read.csv("F:/ShrubDensity/SageLivePresenceAbsence.csv")
sageL <- read.csv("F:/ShrubDensity/PresenceAbsence/SageLivePresenceAbsence.csv")
View(sageL)
colnames(sageL) <- c("plot","sage")
View(sageL)
lpi <- read.csv("F:/LPI/LPIRelativeCoverCommonInExcel.csv")
lpi <- lpi[-55,-c(1,8:10)] # Remove line 55 (IL2_9) because it is missing from shrub data
soils <- read.csv("F:/Soils/SoilEnvironmentalData.csv")
soils <- soils[-55,-1] # Remove line 55 (IL2_9) because it is missing from shrub data
colnames(soils) <- c("Elevation","maxClay","maxSand",
"minClay","minSand","maxDepth",
"maxpH","minpH","maxDryValue",
"minDryValue", "maxDryChroma",
"minDryChroma", "maxMoistValue",
"minMoistValue", "maxMoistChroma",
"minMoistChroma","CarbonateStage",
"BioticCrustClass")
pctType <- read.csv("F:/LPI/LPIRelativeCoverType.csv")
View(soils)
View(pctType)
pctType <- pctType[-54,-1]
live <- cbind(sageL,lpi,soils,pctType)
kappa=function(x){
n=sum(x)
pobs=(x[1,1]+x[2,2])/n
pexp=(sum(x[1,])*sum(x[,1])+sum(x[2,])*sum(x[,2]))/n^2
kappa=(pobs-pexp)/(1-pexp)
t1=0
t2=0
t3=0
pii=x/n
pidot=apply(pii,1,sum)
pdotj=apply(pii,2,sum)
for(i in 1:2){
t1 = t1 + pii[i,i]*((1-pexp) - (1-pobs)*(pidot[i]+pdotj[i]))^2
}
t2 = pii[1,2]*(pdotj[1]+pidot[2])^2 + pii[2,1]*(pdotj[2] + pidot[1])^2
t3 = (pobs*pexp-2*pexp+pobs)^2
vhat = (t1 + t2*(1-pobs)^2 -t3)/(n*(1-pexp)^4)
se=sqrt(vhat)
return(c(kappa,se))
}
class.sum=function(truth,predicted){
xt=table(truth,round(predicted+0.000001))
pcc=round(100*sum(diag(xt))/sum(xt),2)
spec=round(100*xt[1,1]/sum(xt[1,]),2)
sens=round(100*xt[2,2]/sum(xt[2,]),2)
kap=round(kappa(xt)[1],4)
au=round(roc.area(truth,predicted)$A,4)
list(round(c(pcc,spec,sens,kap,au),3))
}
full_tree = rpart(as.factor(sage) ~
maxClay + maxSand + minClay + minSand + maxDepth +
maxpH + minpH + maxDryValue + minDryValue +
maxDryChroma + minDryChroma + maxMoistValue +
minMoistValue + maxMoistChroma + minMoistChroma +
CarbonateStage + BioticCrustClass + Elevation
, data = live, control =
rpart.control(cp = 0.0, minsplit = 2))
plotcp(full_tree) #put this graph in homework and explain
full_tree.confuse=table(live$sage,predict(full_tree,type="class"))
100-100*sum(diag(full_tree.confuse))/nrow(live)
final_tree = rpart(as.factor(sage) ~
maxClay + maxSand + minClay + minSand + maxDepth +
maxpH + minpH + maxDryValue + minDryValue +
maxDryChroma + minDryChroma + maxMoistValue +
minMoistValue + maxMoistChroma + minMoistChroma +
CarbonateStage + BioticCrustClass + Elevation
, data = live, control =
rpart.control(cp = 0.064, minsplit = 2))
plot(final_tree, margin=.3)
text(final_tree,use.n=TRUE)
final_tree.confuse=table(live$sage,predict(final_tree,type="class"))
100-100*sum(diag(final_tree.confuse))/nrow(live)
prp(final_tree, extra = 3, under = T, varlen = 0, faclen = 0, main = 'Live Sagebrush')
fancyRpartPlot(final_tree)
final_tree.xval=rep(0,nrow(live))
xvs=rep(1:10,length=nrow(live))
xvs=sample(xvs)
for(i in 1:10){
test=live[xvs==i,]
train=live[xvs!=i,]
glub= rpart(as.factor(sage) ~
maxClay + maxSand + minClay + minSand + maxDepth +
maxpH + minpH + maxDryValue + minDryValue +
maxDryChroma + minDryChroma + maxMoistValue +
minMoistValue + maxMoistChroma + minMoistChroma +
CarbonateStage + BioticCrustClass + Elevation
, data = train, control =
rpart.control(cp = 0.064, minsplit = 2))
final_tree.xval[xvs==i]=predict(glub,test,type="class")
}
final_tree.confuse.xval=table(live$sage,final_tree.xval)
100-100*sum(diag(final_tree.confuse.xval))/nrow(live)
## Overall xval error rate is between 35 and 40 %
table(live$sage,round(final_tree.xval+ 0.0000001))
class.sum(live$sage,final_tree.xval)
library(randomForest)
live.rf = randomForest(as.factor(sage) ~
maxClay + maxSand + minClay + minSand + maxDepth +
maxpH + minpH + maxDryValue + minDryValue +
maxDryChroma + minDryChroma + maxMoistValue +
minMoistValue + maxMoistChroma + minMoistChroma +
CarbonateStage + BioticCrustClass + Elevation
, data = live,proximity=TRUE,importance=TRUE,
keep.forest=TRUE)
live.rf$confusion
class.sum(live$sage,predict(live.rf,type="prob")[,2])
varImpPlot(live.rf, main = 'Live Sagebrush')
live.rf.xval.prob=rep(0,nrow(live))
xvs=rep(1:10,length=nrow(live))
xvs=sample(xvs)
for(i in 1:10){
train=live[xvs!=i,]
test=live[xvs==i,]
rf=randomForest(as.factor(sage) ~
maxClay + maxSand + minClay + minSand + maxDepth +
maxpH + minpH + maxDryValue + minDryValue +
maxDryChroma + minDryChroma + maxMoistValue +
minMoistValue + maxMoistChroma + minMoistChroma +
CarbonateStage + BioticCrustClass + Elevation
,data=train)
live.rf.xval.prob[xvs==i]=predict(rf,test,type="prob")[,2]
}
live.rf.confuse.xval=table(live$sage,live.rf.xval.prob)
100-100*sum(diag(live.rf.xval.prob))/nrow(live)
table(live$sage,round(live.rf.xval.prob+ 0.0000001))
class.sum(live$sage,live.rf.xval.prob)
varImpPlot(live.rf)
partialPlot(live.rf,live, maxDepth, which.class="1", main = 'Live Sagebrush Partial Dependence on Maximum Depth')
partialPlot(live.rf,live, minDryChroma, which.class="1", main = 'Live Sagebrush Partial Dependence on Minimum Dry Chroma')
partialPlot(live.rf,live, BioticCrustClass, which.class="1", main = 'Live Sagebrush Partial Dependence on Biotic Crust Class')
partialPlot(live.rf,live, minClay, which.class="1", main = 'Live Sagebrush Partial Dependence on Minimum Clay Percentage')
partialPlot(live.rf,live, minMoistChroma, which.class="1", main = 'Live Sagebrush Partial Dependence on Minimum Moist Chroma')
partialPlot(live.rf,live, maxpH, which.class="1", main = 'Live Sagebrush Partial Dependence on Maximum pH')
partialPlot(live.rf,live, Elevation, which.class="1", main = 'Live Sagebrush Partial Dependence on Elevation')
####
live.rf.imp=randomForest(as.factor(sage)~ maxDepth + minDryChroma +
BioticCrustClass  + minClay + minMoistChroma +
maxpH + Elevation
,proximity=TRUE,importance=TRUE,keep.forest=TRUE,data=live)
live.rf.imp$confusion
class.sum(live$sage,predict(live.rf.imp,type="prob")[,2])
live.rf.confuse.xval=table(live$sage,live.rf.xval.prob)
100-100*sum(diag(live.rf.xval.prob))/nrow(live)
live.rf.imp.xval.prob=rep(0,nrow(live))
xvs=rep(1:10,length=nrow(live))
xvs=sample(xvs)
for(i in 1:10){
train=live[xvs!=i,]
test=live[xvs==i,]
rf=randomForest(as.factor(sage)~ maxDepth + minDryChroma +
BioticCrustClass  + minClay + minMoistChroma +
maxpH + Elevation
,data=train)
live.rf.imp.xval.prob[xvs==i]=predict(rf,test,type="prob")[,2]
}
table(live$sage,round(live.rf.imp.xval.prob+ 0.0000001))
class.sum(live$sage,live.rf.imp.xval.prob)
live.rf.confuse.xval=table(live$sage,live.rf.imp.xval.prob)
100-100*sum(diag(live.rf.imp.xval.prob))/nrow(live)
library(vegan)
mydata <- read.csv("F:/LPI/LPIRelativeCoverCommonInExcel.csv",header=TRUE,row.names=1)
mydata.mds <- metaMDS(mydata)
names(mydata.mds)
mydata.mds
variableScores <- mydata.mds$species
sampleScores <- mydata.mds$points
plot(mydata.mds)
plot(mydata.mds, type="t", display=c("species"))
plot(mydata.mds, type="n")
points(mydata.mds, display=c("sites"), choices=c(1,2), pch=3, col="red")
text(mydata.mds, display=c("species"), choices=c(1,2), col="blue", cex=0.7)
stressplot(mydata.mds)
ordiplot(mydata.mds,type="t")
fit.a<-envfit(data.mds,data.A.env,perm=1000)
library(vegan)
library(MASS)
data<-read.csv("F:/LPI/LPIRelativeCoverCommonInExcel.csv",header=TRUE)
data<-data[data$X!='IL2_9',] #Remove IL2_9 from LPI data because it does not exist in Shrub data
write.csv(data,file="F:/LPI/data1.csv")
data<-read.csv("F:/LPI/data1.csv",header=TRUE,row.names=2)
data<-data[,2:46]
data.dis<-vegdist(data,method="bray")
#data.dis
dis.matrix<-as.matrix(data.dis)
#dis.matrix
#write.csv(dis.matrix,file="F:/LPI/LPIDistanceMatrix.csv")
#rankindex compares euclidean, bray-curtis, etc... for my data
rankindex(dis.matrix,data)
data.mds<-metaMDS(comm=data,distance="euc",trace=FALSE)
data.mds
#Stress <0.10 indicates that the ordination is good "with no real
#risk of drawing false inferences" (Clarke 1993, p. 26).
# linear fit is the fit between ordination values and distances
stressplot(data.mds)
data.env<-read.csv("F:/Soils/SoilEnvironmentalData.csv",header=TRUE)
data.env<-data.env[data.env$id!='IL2_9',] #Remove IL2_9 from Soils data because it does not exist in Shrub data
write.csv(data.env,file="F:/LPI/data2.csv")
data.env<-read.csv("F:/LPI/data2.csv",header=TRUE,row.names=2)
data.env<-data.env[,2:19]
data.A.env<-read.csv("F:/ShrubDensity/HeightClass/AdensityM2.csv",row.names=1)
data.B.env<-read.csv("F:/ShrubDensity/HeightClass/BdensityM2.csv")
data.C.env<-read.csv("F:/ShrubDensity/HeightClass/CdensityM2.csv")
data.D.env<-read.csv("F:/ShrubDensity/HeightClass/DdensityM2.csv")
data.E.env<-read.csv("F:/ShrubDensity/HeightClass/EdensityM2.csv")
View(data.A.env)
View(data.A.env)
library(vegan)
library(MASS)
data<-read.csv("F:/LPI/LPIRelativeCoverCommonInExcel.csv",header=TRUE)
data<-data[data$X!='IL2_9',] #Remove IL2_9 from LPI data because it does not exist in Shrub data
write.csv(data,file="F:/LPI/data1.csv")
data<-read.csv("F:/LPI/data1.csv",header=TRUE,row.names=2)
data<-data[,2:46]
#calculate dissimilariti
ata.dis<-vegdist(data,method="bray")
#data.dis
dis.matrix<-as.matrix(data.dis)
#dis.matrix
#write.csv(dis.matrix,file="F:/LPI/LPIDistanceMatrix.csv")
#rankindex compares euclidean, bray-curtis, etc... for my data
rankindex(dis.matrix,data)
data<-read.csv("F:/LPI/LPIRelativeCoverCommonInExcel.csv",header=TRUE)
data<-data[data$X!='IL2_9',] #Remove IL2_9 from LPI data because it does not exist in Shrub data
write.csv(data,file="F:/LPI/data1.csv")
data<-read.csv("F:/LPI/data1.csv",header=TRUE,row.names=2)
data<-data[,2:46]
#calculate dissimilarities, use function "vegdist"in VEGAN package
data.dis<-vegdist(data,method="bray")
#data.dis
dis.matrix<-as.matrix(data.dis)
#dis.matrix
#write.csv(dis.matrix,file="F:/LPI/LPIDistanceMatrix.csv")
#rankindex compares euclidean, bray-curtis, etc... for my data
rankindex(dis.matrix,data)
data.mds<-metaMDS(comm=data,distance="euc",trace=FALSE)
data.mds
#Stress <0.10 indicates that the ordination is good "with no real
#risk of drawing false inferences" (Clarke 1993, p. 26).
# linear fit is the fit between ordination values and distances
stressplot(data.mds)
data.env<-read.csv("F:/Soils/SoilEnvironmentalData.csv",header=TRUE)
data.env<-data.env[data.env$id!='IL2_9',] #Remove IL2_9 from Soils data because it does not exist in Shrub data
write.csv(data.env,file="F:/LPI/data2.csv")
data.env<-read.csv("F:/LPI/data2.csv",header=TRUE,row.names=2)
data.env<-data.env[,2:19]
fit.env<-envfit(data.mds,data.env,perm=1000)
fit.env
sig.data.env<-data.env[,c(5:8,11,14:18)]
sig.fit.env<-envfit(data.mds,sig.data.env,perm=1000)
sig.fit.env
plot(data.mds,type="t",main="NMDS using Euclidean Distance")
ordiplot(data.mds)
ordiplot(data.mds, display ="species", type ="n")
text(data.mds, display="sites", col="blue", cex=0.7)
text(data.mds, display="species", col="red", cex=0.7)
plot(fit.env,col="black", cex=0.7)
plot(fit.a,col="orange", cex=0.7)
data.A.env<-read.csv("F:/ShrubDensity/HeightClass/AdensityM2.csv",row.names=1)
fit.a<-envfit(data.mds,data.A.env,perm=1000)
fit.a
sig.data.A.env<-data.A.env[,c()]
plot(fit.a,col="orange", cex=0.7)
warnings()
View(data.A.env)
data.B.env<-read.csv("F:/ShrubDensity/HeightClass/BdensityM2.csv")
data.C.env<-read.csv("F:/ShrubDensity/HeightClass/CdensityM2.csv")
data.D.env<-read.csv("F:/ShrubDensity/HeightClass/DdensityM2.csv")
data.E.env<-read.csv("F:/ShrubDensity/HeightClass/EdensityM2.csv")
fit.b<-envfit(data.mds,data.B.env,perm=1000)
fit.c<-envfit(data.mds,data.C.env,perm=1000)
warnings()
View(data.A.env)
View(data.B.env)
library(plyr)
shrub <- read.csv('F:/ShrubDensity/PresenceAbsence/ShrubSummary.csv')
shrub <- shrub[1:7406,c(2,3,5,6)]
shrub
#Summed shrub totals across transects 2,3, and 4
#Put into Plot by Species matrix
plotXspp<-xtabs(Total~Plot+Species, shrub)
plotXspp
write.csv(plotXspp,file="F:/ShrubDensity/PresenceAbsence/plotXspp.csv")
densityM2 <- plotXspp/180
densityM2
write.csv(densityM2,file="F:/ShrubDensity/PresenceAbsence/densityM2.csv")
densityHa <- densityM2/10000
densityHa
write.csv(densityHa,file="F:/ShrubDensity/PresenceAbsence/densityHa.csv")
pa <- (plotXspp>0)     # logical, or
pa <- (plotXspp>0)*1L  # integer 01
pa
write.csv(pa,file="F:/ShrubDensity/PresenceAbsence/ShrubPresenceAbsence.csv")
#Select only ARTR and ARTR/D presence/absence (1/0)
Sage <- pa[,3:4]
write.csv(Sage,file="F:/ShrubDensity/PresenceAbsence/SagePresenceAbsence.csv")
#Select only ARTR presence/absence (1/0)
SageLive <- pa[,3]
write.csv(SageLive,file="F:/ShrubDensity/PresenceAbsence/SageLivePresenceAbsence.csv")
#Select only ARTR/D presence/absence (1/0)
SageDead <-pa[,4]
write.csv(SageDead,file="F:/ShrubDensity/PresenceAbsence/SageDeadPresenceAbsence.csv")
View(Sage)
View(Sage)
SageClass<-read.csv("F:/ShrubDensity/PresenceAbsence/SageClasses.csv", header=T)
View(SageClass)
View(Sage)
sum1<-soilsSum[soilsSum$id!='IL2_9',] #### There is no IL2_9 in Shrub Density, missing data. So we remove it from soils data as well.
soilsSum<-read.csv("F:/Soils/SoilEnvironmentalData.csv", header=T)
Sage<-read.csv("F:/ShrubDensity/PresenceAbsence/SagePresenceAbsence.csv", header=T)
SageClass<-read.csv("F:/ShrubDensity/PresenceAbsence/SageClasses.csv", header=T)
sum1<-soilsSum[soilsSum$id!='IL2_9',] #### There is no IL2_9 in Shrub Density, missing data. So we remove it from soils data as well.
sumSage<- cbind(sum1,SageClass)
boxplot(maxDepth~Class,data = sumSage, main= 'maxDepth')
boxplot(minSand~Class,data = sumSage, main= 'minSand')
boxplot(maxSand~Class,data = sumSage, main= 'maxSand')
boxplot(minClay~Class,data = sumSage, main= 'minClay')
boxplot(maxClay~Class,data = sumSage, main= 'maxClay')
boxplot(BioticCrustClass~Class,data = sumSage, main= 'BioticCrustClass')
boxplot(CarbonateStage~Class,data = sumSage, main= 'CarbonateStage')
boxplot(maxpH~Class,data = sumSage, main= 'maxpH')
boxplot(minpH~Class,data = sumSage, main= 'minpH')
boxplot(maxDepth~ARTR2,data = sumSage, main= 'maxDepth')
View(sumSage)
write.csv(relcover,file="F:/ShrubDensity/PresenceAbsence/SageClassSoils.csv")
write.csv(sumSage,file="F:/ShrubDensity/PresenceAbsence/SageClassSoils.csv")
?regression
??regression
View(sumSage)
View(SageClass)
View(SageClass)
View(sum1)
View(soilsSum)
Density<-read.csv("F/ShrubDensity/HeightClass/PlantDenDetail.csv",header=T)
Density<-read.csv("F:/ShrubDensity/HeightClass/PlantDenDetail.csv",header=T)
View(Density)
Density<-read.csv("F:/ShrubDensity/PresenceAbsence/densityM2.csv",header=T)
View(Density)
sumDensity<- cbind(sum1,Density)
View(sumDensity)
View(sumDensity)
> with(sumDensity, plot(Elevation, ARTR2))
> title(main="Elevation (ft) vs. ARTR2")
with(sumDensity, plot(Elevation, ARTR2))
title(main="Elevation (ft) vs. ARTR2")
with(sumDensity, plot(MaxClay, ARTR2))
title(main="MaxClay (ft) vs. ARTR2")
View(sumDensity)
with(sumDensity, plot(maxClay, ARTR2))
title(main="MaxClay (ft) vs. ARTR2")
with(sumDensity, plot(ARTR2, maxClay))
soilsSum<-read.csv("F:/Soils/SoilEnvironmentalData.csv", header=T)
Sage<-read.csv("F:/ShrubDensity/PresenceAbsence/SagePresenceAbsence.csv", header=T)
SageClass<-read.csv("F:/ShrubDensity/PresenceAbsence/SageClasses.csv", header=T)
sum1<-soilsSum[soilsSum$id!='IL2_9',] #### There is no IL2_9 in Shrub Density, missing data. So we remove it from soils data as well.
sumSage<- cbind(sum1,SageClass)
write.csv(sumSage,file="F:/ShrubDensity/PresenceAbsence/SageClassSoils.csv")
soilsSum<-read.csv("F:/Soils/SoilEnvironmentalData.csv", header=T)
Sage<-read.csv("F:/ShrubDensity/PresenceAbsence/SagePresenceAbsence.csv", header=T)
SageClass<-read.csv("F:/ShrubDensity/PresenceAbsence/SageClasses.csv", header=T)
sum1<-soilsSum[soilsSum$id!='IL2_9',] #### There is no IL2_9 in Shrub Density, missing data. So we remove it from soils data as well.
sumSage<- cbind(sum1,SageClass)
write.csv(sumSage,file="F:/ShrubDensity/PresenceAbsence/SageClassSoils.csv")
boxplot(maxDepth~Class,data = sumSage, main= 'maxDepth')
boxplot(minSand~Class,data = sumSage, main= 'minSand')
boxplot(maxSand~Class,data = sumSage, main= 'maxSand')
boxplot(minClay~Class,data = sumSage, main= 'minClay')
boxplot(maxClay~Class,data = sumSage, main= 'maxClay')
boxplot(BioticCrustClass~Class,data = sumSage, main= 'BioticCrustClass')
boxplot(CarbonateStage~Class,data = sumSage, main= 'CarbonateStage')
boxplot(maxpH~Class,data = sumSage, main= 'maxpH')
boxplot(minpH~Class,data = sumSage, main= 'minpH')
library(vegan)
mydata <- read.csv("F:/LPI/LPIRelativeCoverCommonInExcel.csv",header=TRUE,row.names=1)
mydata.mds <- metaMDS(mydata)
names(mydata.mds)
mydata.mds
variableScores <- mydata.mds$species
sampleScores <- mydata.mds$points
plot(mydata.mds, type="t", display=c("species"))
plot(mydata.mds, type="n")
points(mydata.mds, display=c("sites"), choices=c(1,2), pch=3, col="red")
text(mydata.mds, display=c("species"), choices=c(1,2), col="blue", cex=0.7)
stressplot(mydata.mds)
ordiplot(mydata.mds,type="t")
library(vegan)
library(MASS)
data<-read.csv("F:/LPI/LPIRelativeCoverCommonInExcel.csv",header=TRUE)
data<-data[data$X!='IL2_9',] #Remove IL2_9 from LPI data because it does not exist in Shrub data
write.csv(data,file="F:/LPI/data1.csv")
data<-read.csv("F:/LPI/data1.csv",header=TRUE,row.names=2)
data<-data[,2:46]
#calculate dissimilarities, use function "vegdist"in VEGAN package
data.dis<-vegdist(data,method="bray")
#data.dis
dis.matrix<-as.matrix(data.dis)
#dis.matrix
#write.csv(dis.matrix,file="F:/LPI/LPIDistanceMatrix.csv")
#rankindex compares euclidean, bray-curtis, etc... for my data
rankindex(dis.matrix,data)
data.mds<-metaMDS(comm=data,distance="euc",trace=FALSE)
data.mds
#Stress <0.10 indicates that the ordination is good "with no real
#risk of drawing false inferences" (Clarke 1993, p. 26).
# linear fit is the fit between ordination values and distances
stressplot(data.mds)
data.env<-read.csv("F:/Soils/SoilEnvironmentalData.csv",header=TRUE)
data.env<-data.env[data.env$id!='IL2_9',] #Remove IL2_9 from Soils data because it does not exist in Shrub data
write.csv(data.env,file="F:/LPI/data2.csv")
data.env<-read.csv("F:/LPI/data2.csv",header=TRUE,row.names=2)
data.env<-data.env[,2:19]
#add shrub height class densities to environmental data
data.A.env<-read.csv("F:/ShrubDensity/HeightClass/AdensityM2.csv",row.names=1)
fit.env<-envfit(data.mds,data.env,perm=1000)
fit.a<-envfit(data.mds,data.A.env,perm=1000)
fit.env
fit.a
sig.data.env<-data.env[,c(5:8,11,14:18)]
sig.fit.env<-envfit(data.mds,sig.data.env,perm=1000)
sig.fit.env
sig.data.A.env<-data.A.env[,c()]
#plotMDS
plot(data.mds,type="t",main="NMDS using Euclidean Distance")
ordiplot(data.mds)
ordiplot(data.mds, display ="species", type ="n")
text(data.mds, display="sites", col="blue", cex=0.7)
text(data.mds, display="species", col="red", cex=0.7)
#plot environmental loadings
plot(fit.env,col="black", cex=0.7)
plot(fit.a,col="orange", cex=0.7)
Warnings()
warnings()
