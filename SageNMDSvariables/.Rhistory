{Plot$SlopeShape <- sub("LC", "CL", Plot$SlopeShape, ignore.case = FALSE)
Plot$SlopeShape <- sub("VC", "CV", Plot$SlopeShape, ignore.case = FALSE)
Plot$SlopeShape <- sub("VL", "LV", Plot$SlopeShape, ignore.case = FALSE)
Plot$SlopeShape <- sub("LVQ", "LV", Plot$SlopeShape, ignore.case = FALSE)
Plot$SlopeShape <- as.factor(Plot$SlopeShape)}
H2 <- dat[! which(dat$.id=='1'), ] # Pull out horizon #1
H2 <- subset(H2, select=-c(.id,depth))
# Functions for Max and Min
TotalAWC <- ddply(H2, 'id', summarize, TotalAWC = sum(AWCcm, na.rm = T))
MaxAWC <- ddply(H2, 'id', summarize, MaxAWC = max(AWCcm, na.rm = T))
MaxClay <- ddply( H2, 'id', summarize, MaxClay = max(ClayPercent, na.rm = T))
MinClay <- ddply( H2, 'id', summarize, MinClay = min(ClayPercent, na.rm = T))
MaxSand <- ddply(H2, 'id', summarize, MaxSand = max(SandPercent, na.rm = T))
MinSand <- ddply(H2, 'id', summarize, MinSand = min(SandPercent, na.rm = T))
MaxpH <- ddply(H2, 'id', summarize, MaxpH = max(pH, na.rm = T))
MinpH <- ddply(H2, 'id', summarize, MinpH = min(pH, na.rm = T))
MaxDryRed <- ddply(H2, 'id', summarize, MaxDryRed = max(DryRed, na.rm = T))
MinDryRed <- ddply(H2, 'id', summarize, MinDryRed = min(DryRed, na.rm = T))
MaxDryValue <- ddply(H2, 'id', summarize, MaxDryValue = max(DryValue, na.rm = T))
MinDryValue <- ddply(H2, 'id', summarize, MinDryValue = min(DryValue, na.rm = T))
MaxDryChroma <- ddply(H2, 'id', summarize, MaxDryChroma = max(DryChroma, na.rm = T))
MinDryChroma <- ddply(H2, 'id', summarize, MinDryChroma = min(DryChroma, na.rm = T))
MaxMoistRed <- ddply(H2, 'id', summarize, MaxMoistRed = max(MoistRed, na.rm = T))
MinMoistRed <- ddply(H2, 'id', summarize, MinMoistRed = min(MoistRed, na.rm = T))
MaxMoistValue <- ddply(H2, 'id', summarize, MaxMoistValue = max(MoistValue, na.rm = T))
MinMoistValue <- ddply(H2, 'id', summarize, MinMoistValue = min(MoistValue, na.rm = T))
MaxMoistChroma <- ddply(H2, 'id', summarize, MaxMoistChroma = max(MoistChroma, na.rm = T))
MinMoistChroma <- ddply(H2, 'id', summarize, MinMoistChroma = min(MoistChroma, na.rm = T))
all <- join(MaxClay, MinClay, by = 'id', type = 'inner')
all <- join(all, MaxSand, by = 'id', type = 'inner')
all <- join(all, MinSand, by = 'id', type = 'inner')
all <- join(all, MaxpH, by = 'id', type = 'inner')
all <- join(all, MinpH, by = 'id', type = 'inner')
all <- join(all, MaxDryRed, by = 'id', type = 'inner')
all <- join(all, MinDryRed, by = 'id', type = 'inner')
all <- join(all, MaxDryValue, by = 'id', type = 'inner')
all <- join(all, MinDryValue, by = 'id', type = 'inner')
all <- join(all, MaxDryChroma, by = 'id', type = 'inner')
all <- join(all, MinDryChroma, by = 'id', type = 'inner')
all <- join(all, MaxMoistRed, by = 'id', type = 'inner')
all <- join(all, MinMoistRed, by = 'id', type = 'inner')
all <- join(all, MaxMoistValue, by = 'id', type = 'inner')
all <- join(all, MinMoistValue, by = 'id', type = 'inner')
all <- join(all, MaxMoistChroma, by = 'id', type = 'inner')
all <- join(all, MinMoistChroma, by = 'id', type = 'inner')
all <- join(all, PedonDepth, by = 'id', type = 'inner')
#Now calculate depth weighted averages of each continuous variable, then append these to the other variables.
#Convert to SoilProfileCollection
data <- read.csv("F:/Soils/SoilDataAprilUSGSnotremoved.csv", header = T)
depths(data) <- id ~ top + bottom
# within each profile, compute weighted means, over the intervals: 0-25,0-50,0-100, removing NA if present
d25 <- slab(data, id ~ AWHC, slab.structure = c(0,25), slab.fun = mean, na.rm=TRUE)
View(`d25`)
d50 <- slab(data, id ~ AWHC, slab.structure = c(0,50), slab.fun = mean, na.rm=TRUE)
d100 <- slab(data, id ~ AWHC, slab.structure = c(0,100), slab.fun = mean, na.rm=TRUE)
# reshape to wide format, remove unneeded variables and rename.
AWC25 <- dcast(d25, id + top + bottom ~ variable, value.var = 'value')
AWC25 <- AWC25[,-c(2,3)]
names(AWC25)[2] <- 'AWC25'
AWC50 <- dcast(d50, id + top + bottom ~ variable, value.var = 'value')
AWC50 <- AWC50[,-c(2,3)]
names(AWC50)[2] <- 'AWC50'
AWC100 <- dcast(d100, id + top + bottom ~ variable, value.var = 'value')
AWC100 <- AWC100[,-c(2,3)]
names(AWC100)[2] <- 'AWC100'
# all <- join(all, MaxAWC, by = 'id', type = 'inner')
# all <- join(all, TotalAWC, by = 'id', type = 'inner')
all <- join(all, AWC25, by = 'id', type = 'inner')
all <- join(all, AWC50, by = 'id', type = 'inner')
all <- join(all, AWC100, by = 'id', type = 'inner')
View(all)
?slab
View(dat)
clay25 <- slab(data, id ~ ClayPercent, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
View(clay25)
View(dat)
View(PedonDepth)
(5*5)+(5*15)+(5*5)+(5*15)+(7*55)+(7*55)+(7*38)
5+5+15+15+55+55+38
1236/188
(3*12)+(2*18)
12+18
72/30
data <- read.csv("F:/Soils/SoilDataAprilUSGSnotremoved.csv", header = T)
View(data)
depths(data) <- id ~ top + bottom
DWAclay <- slab(data, id ~ ClayPercent, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
DWAsand <- slab(data, id ~ SandPercent, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
DWApH <- slab(data, id ~ pH, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
# within each profile, compute weighted means, over the intervals: 0-25,0-50,0-100, removing NA if present
dwaclay <- slab(data, id ~ ClayPercent, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
dwasand <- slab(data, id ~ SandPercent, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
dwapH <- slab(data, id ~ pH, slab.structure = c(0,200), slab.fun = mean, na.rm=TRUE)
# reshape to wide format, remove unneeded variables and rename.
DWAclay <- dcast(dwaclay, id + top + bottom ~ variable, value.var = 'value')
DWAclay <- DWAclay[,-c(2,3)]
names(DWAclay)[2] <- 'DWAclay'
DWAsand <- dcast(dwasand, id + top + bottom ~ variable, value.var = 'value')
DWAsand <- DWAsand[,-c(2,3)]
names(DWAsand)[2] <- 'DWAsand'
DWApH <- dcast(dwapH, id + top + bottom ~ variable, value.var = 'value')
DWApH <- DWApH[,-c(2,3)]
names(DWApH)[2] <- 'DWApH'
View(DWAclay)
View(dwaclay)
# Read in data
dat <- read.csv("F:/Soils/SoilDataFitUSGSColumns.csv", header = T,nrows = 444)
udat <- read.csv("F:/Soils/USGSsoildataModForAprilsdata.csv", header = T,nrows = 444)
udat$id <- extract_numeric(udat$id) # removes CLHS and P leaving only numbers.
# Manually in excel I added in second IL1_9 row of NA so H2 still has 99obs
# Creates an ordered list of each horizon in a plot
dat <- getanID(data = dat, id.vars = "id")
udat <- getanID(data = udat, id.vars = "id")
View(udat)
View(udat)
# Read in data
dat <- read.csv("F:/Soils/SoilDataFitUSGSColumns.csv", header = T,nrows = 444)
udat <- read.csv("F:/Soils/USGSsoildataModForAprilsdata.csv", header = T,nrows = 444)
udat$id <- extract_numeric(udat$id) # removes CLHS and P leaving only numbers.
View(dat)
View(udat)
dat$HzNum <- getanID(data = dat, id.vars = "id")
View(dat)
# Read in data
dat <- read.csv("F:/Soils/SoilDataFitUSGSColumns.csv", header = T,nrows = 444)
udat <- read.csv("F:/Soils/USGSsoildataModForAprilsdata.csv", header = T,nrows = 444)
udat$id <- extract_numeric(udat$id) # removes CLHS and P leaving only numbers.
# Manually in excel I added in second IL1_9 row of NA so H2 still has 99obs
# Creates an ordered list of each horizon in a plot
dat <- getanID(data = dat, id.vars = "id")
udat <- getanID(data = udat, id.vars = "id")
H1 <- dat[ which(dat$.id=='1'), ] # Pull out horizon #1
# Pull out data that is not only for horizon 1, then take it out of H1
Plot <- subset(H1, select = c(id,Elevation,Aspect,Slope,SlopeShape,CarbonateStage,BioticCrustClass))
H1 <- subset(H1, select = -c(Elevation,Aspect,Slope,SlopeShape,CarbonateStage,BioticCrustClass))
dat <- subset(dat, select = -c(Elevation,Aspect,Slope,SlopeShape,CarbonateStage,BioticCrustClass) )
# Combine April and USGS soils data
dat <- rbind(dat,udat)
PedonDepth <- ddply( dat, .(id), function(x) max(x$bottom, na.rm = T) )
names(PedonDepth)[2] <- 'PedonDepth'
# get the depth of each horizon
dat$depth <- dat$bottom-dat$top
udat$depth <- udat$bottom-udat$top
# AWC (cmH2O/cmSoil) * horizon depth(cmSoil)=AWC(cmH2O)
dat$AWCcm <- (dat$AWHC*dat$depth)
udat$AWCcm <- (udat$AWHC*udat$depth)
dat$TotalAWCcm <- (dat$AWCcm/PedonDepth)
# unique(c(as.character(Plot$SlopeShape)))
# Scale Hue - Redness Scale - Degree of Redness
# I have 4 Hue values:2.5YR, 5YR, 7.5YR, and 10YR
# They will be numbered from least(1) to most(4) red. 2.5YR=4, 5YR=3, 7.5YR=2, 10YR=1.
{
dat$DryRed <- sub("2.5YR", "4", dat$DryHue, ignore.case = FALSE)
dat$DryRed <- sub("7.5YR", "2", dat$DryHue, ignore.case = FALSE)
dat$DryRed <- sub("5YR", "3", dat$DryHue, ignore.case = FALSE)
dat$DryRed <- sub("10YR", "1", dat$DryHue, ignore.case = FALSE)
dat$MoistRed <- sub("2.5YR", "4", dat$MoistHue, ignore.case = FALSE)
dat$MoistRed <- sub("7.5YR", "2", dat$MoistHue, ignore.case = FALSE)
dat$MoistRed <- sub("5YR", "3", dat$MoistHue, ignore.case = FALSE)
dat$MoistRed <- sub("10YR", "1", dat$MoistHue, ignore.case = FALSE)
dat$EfferScale <- sub("VE", "4", dat$Effervescence, ignore.case = FALSE)
dat$EfferScale <- sub("ST", "3", dat$Effervescence, ignore.case = FALSE)
dat$EfferScale <- sub("SL", "2", dat$Effervescence, ignore.case = FALSE)
dat$EfferScale <- sub("VS", "1", dat$Effervescence, ignore.case = FALSE)
dat$EfferScale <- sub("NE", "0", dat$Effervescence, ignore.case = FALSE)
dat$EfferScale <- sub("LS", "2", dat$Effervescence, ignore.case = FALSE)
}
write.csv(dat,file="F:/Soils/SoilDataAprilUSGSnotremoved.csv", row.names=FALSE)
dat <- subset(dat, select = -c(top,bottom,Horizon,Theta_fc,Theta_pwp, HzNum,Texture,SandSize) )
dat <- subset(dat, select = -c(AWHC,AWCcm) )
H1 <- dat[ which(dat$.id=='1'), ] # Pull out horizon #1
H1$Depth <- H1$depth
H1 <- subset(H1, select=-c(.id,depth))
# Add in Elevation, Slope Shape, Slope, Carbonate Stage, Biotic Crust Class
site <- read.csv("F:/BeefBasin Data For April/BeefBasin/formattedR/Site_Data.csv")
loc <- read.csv("F:/BeefBasin Data For April/BeefBasin/formattedR/locInfo.csv")
# Remove BLM Trend and Miller plots
site <- site[-c(66:77),]
site <- site[order(site$pedonID),] # Sort so plot 100 is by 9 same as data
site$pedonID <- extract_numeric(site$pedonID) # removes CLHS and P leaving only numbers.
loc <- loc[-c(66:77),]
loc <- loc[order(loc$Plot.Name),] # Sort so plot 100 is by 9 same as data
loc$Plot.Name <- extract_numeric(loc$Plot.Name) # removes CLHS and P leaving only numbers.
# put into dataframe to add to april
id <-site$pedonID
Elevation <- loc$altitude
Aspect <- site$Aspect
df <- data.frame(id,Elevation,Aspect)
df$Slope <- site$Slope
df$SlopeShape <- site$SlopeShape
df$CarbonateStage <- site$CarbonateStage
df$BioticCrustClass <- site$BioticCrustClass
# Add to april Plot dataframe
Plot <- rbind(Plot,df)
{Plot$SlopeShape <- sub("LC", "CL", Plot$SlopeShape, ignore.case = FALSE)
Plot$SlopeShape <- sub("VC", "CV", Plot$SlopeShape, ignore.case = FALSE)
Plot$SlopeShape <- sub("VL", "LV", Plot$SlopeShape, ignore.case = FALSE)
Plot$SlopeShape <- sub("LVQ", "LV", Plot$SlopeShape, ignore.case = FALSE)
Plot$SlopeShape <- as.factor(Plot$SlopeShape)}
H2 <- dat[! which(dat$.id=='1'), ] # Pull out horizon #1
H2 <- subset(H2, select=-c(.id,depth))
# Read in data
dat <- read.csv("F:/Soils/SoilDataFitUSGSColumns.csv", header = T,nrows = 444)
udat <- read.csv("F:/Soils/USGSsoildataModForAprilsdata.csv", header = T,nrows = 444)
udat$id <- extract_numeric(udat$id) # removes CLHS and P leaving only numbers.
# Manually in excel I added in second IL1_9 row of NA so H2 still has 99obs
# Creates an ordered list of each horizon in a plot
dat <- getanID(data = dat, id.vars = "id")
udat <- getanID(data = udat, id.vars = "id")
H1 <- dat[ which(dat$.id=='1'), ] # Pull out horizon #1
# Pull out data that is not only for horizon 1, then take it out of H1
Plot <- subset(H1, select = c(id,Elevation,Aspect,Slope,SlopeShape,CarbonateStage,BioticCrustClass))
H1 <- subset(H1, select = -c(Elevation,Aspect,Slope,SlopeShape,CarbonateStage,BioticCrustClass))
dat <- subset(dat, select = -c(Elevation,Aspect,Slope,SlopeShape,CarbonateStage,BioticCrustClass) )
# Combine April and USGS soils data
dat <- rbind(dat,udat)
PedonDepth <- ddply( dat, .(id), function(x) max(x$bottom, na.rm = T) )
names(PedonDepth)[2] <- 'PedonDepth'
# get the depth of each horizon
dat$depth <- dat$bottom-dat$top
udat$depth <- udat$bottom-udat$top
# AWC (cmH2O/cmSoil) * horizon depth(cmSoil)=AWC(cmH2O)
dat$AWCcm <- (dat$AWHC*dat$depth)
udat$AWCcm <- (udat$AWHC*udat$depth)
dat$TotalAWCcm <- (dat$AWCcm/PedonDepth)
# unique(c(as.character(Plot$SlopeShape)))
View(`H1`)
View(Plot)
View(`H1`)
# Read in data
dat <- read.csv("F:/Soils/SoilDataFitUSGSColumns.csv", header = T,nrows = 444)
udat <- read.csv("F:/Soils/USGSsoildataModForAprilsdata.csv", header = T,nrows = 444)
udat$id <- extract_numeric(udat$id) # removes CLHS and P leaving only numbers.
# Manually in excel I added in second IL1_9 row of NA so H2 still has 99obs
# Creates an ordered list of each horizon in a plot
dat <- getanID(data = dat, id.vars = "id")
udat <- getanID(data = udat, id.vars = "id")
# Read in data
dat <- read.csv("F:/Soils/SoilDataFitUSGSColumns.csv", header = T,nrows = 444)
udat <- read.csv("F:/Soils/USGSsoildataModForAprilsdata.csv", header = T,nrows = 444)
udat$id <- extract_numeric(udat$id) # removes CLHS and P leaving only numbers.
# Manually in excel I added in second IL1_9 row of NA so H2 still has 99obs
# Creates an ordered list of each horizon in a plot
dat <- getanID(data = dat, id.vars = "id")
udat <- getanID(data = udat, id.vars = "id")
H1 <- dat[ which(dat$.id=='1'), ] # Pull out horizon #1
Plot <- subset(H1, select = c(id,Elevation,Aspect,Slope,SlopeShape,CarbonateStage,BioticCrustClass))# Pull out data that is for the whole plot
H1 <- subset(H1, select = -c(Elevation,Aspect,Slope,SlopeShape,CarbonateStage,BioticCrustClass))# Remove out data that is for the whole plot
dat <- subset(dat, select = -c(Elevation,Aspect,Slope,SlopeShape,CarbonateStage,BioticCrustClass))# Remove out data that is for the whole plot
# Combine April and USGS soils data
dat <- rbind(dat,udat)
View(`H1`)
# Combine April and USGS soils data
dat <- rbind(dat,udat)
# Scale Hue - Redness Scale - Degree of Redness
# I have 4 Hue values:2.5YR, 5YR, 7.5YR, and 10YR
# They will be numbered from least(1) to most(4) red. 2.5YR=4, 5YR=3, 7.5YR=2, 10YR=1.
{
dat$DryRed <- sub("2.5YR", "4", dat$DryHue, ignore.case = FALSE)
dat$DryRed <- sub("7.5YR", "2", dat$DryHue, ignore.case = FALSE)
dat$DryRed <- sub("5YR", "3", dat$DryHue, ignore.case = FALSE)
dat$DryRed <- sub("10YR", "1", dat$DryHue, ignore.case = FALSE)
dat$MoistRed <- sub("2.5YR", "4", dat$MoistHue, ignore.case = FALSE)
dat$MoistRed <- sub("7.5YR", "2", dat$MoistHue, ignore.case = FALSE)
dat$MoistRed <- sub("5YR", "3", dat$MoistHue, ignore.case = FALSE)
dat$MoistRed <- sub("10YR", "1", dat$MoistHue, ignore.case = FALSE)
dat$EfferScale <- sub("VE", "4", dat$Effervescence, ignore.case = FALSE)
dat$EfferScale <- sub("ST", "3", dat$Effervescence, ignore.case = FALSE)
dat$EfferScale <- sub("SL", "2", dat$Effervescence, ignore.case = FALSE)
dat$EfferScale <- sub("VS", "1", dat$Effervescence, ignore.case = FALSE)
dat$EfferScale <- sub("NE", "0", dat$Effervescence, ignore.case = FALSE)
dat$EfferScale <- sub("LS", "2", dat$Effervescence, ignore.case = FALSE)
}
PedonDepth <- ddply( dat, .(id), function(x) max(x$bottom, na.rm = T) )
names(PedonDepth)[2] <- 'PedonDepth'
library(vegan)
library(MASS)
library(colorspace)
# NMDS on Selected Variables
## selected using Boruta and Random Forest Variable Importance Plots.
# read in data
All <- read.csv("F:/Soils/SoilEnvironmentalDataApril.csv",header=TRUE, row.names=1)
All[is.na(All)] <- 0 # replace NA with 0
All <- All[,c("H2_MinDryHue","H2_MinDryChroma","Depth100","Depth150","TotalDepth","AWC25","AWC50","AWC100")]
# add shrub environmental variables
sage.A <- read.csv("F:/SageNMDSvariables/Sage.Env.April.csv",header=TRUE,row.names=1)
sage.A[is.na(sage.A)] <- 0 # replace NA with 0
sage.H2 <- sage.A[-c(30,32,38,45,46,69),] #remove H2 empty rows.
#
# All Soil Variables
#
All.ord<-metaMDS(comm=All,distance="euc",trace=FALSE, k=2,
autotransform = FALSE,trymax = 100, zerodist = "add")
All.ord # k2=0.0018 ~0.2%
#install.packages("vegan")
library(vegan)
library(MASS)
library(colorspace)
#pal <- choose_palette()
data<-read.csv("F:/LPI/AprilLPIRelativeCoverCommonInExcel.csv",header=TRUE, row.names=1)
data<-read.csv("F:/LPI/Output/AprilLPICommon.csv",header=TRUE, row.names=1)
View(data)
e.data.mds<-metaMDS(comm=data,distance="euc",trace=FALSE)
e.data.mds #.09
plot.sc = scores(e.data.mds)
stressplot(e.data.mds)
data.env <- read.csv("F:/Soils/SoilEnvironmentaldataApril.csv",header=TRUE, row.names=1)
fit.env <- envfit(e.data.mds,data.env,perm=1000)
fit.env
orditkplot(e.data.mds, display="species", col="black", cex=0.7, pcol="gray",pch="+",xlim=c(-0.7,0.7),ylim=c(-0.7,0.4))
saveRDS(Plot, file="F:/SageNMDSvariables/Plot.Rdata")
Plot <- readRDS("F:/SageNMDSvariables/Plot.Rdata")
ordiplot(data.mds)
ordiplot(e.data.mds)
ordiplot(e.data.mds, display ="species", type ="n")
text(e.data.mds, display="sites", col="black", cex=0.7)
text(e.data.mds, display="species", col="red", cex=0.7)
View(data.env)
depth <-data.env$DepthClass
fit.depth <- envfit(e.data.mds,depth,perm=1000)
View(data)
library(vegan)
library(MASS)
data<-read.csv("F:/RcodeWILD/KLEEdataE.csv",header=TRUE)
View(data)
data
data1<-data[,3:ncol(data)]
View(data1)
data1
#calculate dissimilarities, use function "vegdist"in VEGAN package
data.dis<-vegdist(data1)
data.dis
#calculate isoMDS function, use isoDS function in MASS package
data.mds<-isoMDS(data.dis)
#--------stressplot and ordiplot----------
stressplot(data.mds,data.dis)
ordiplot(data.mds,type="t")
#read in environmental data
data.env<-data[,1:2]
data.env
#set distclass to factor
data.env[,1]=as.factor(data.env[,1])
data.env[,1]
is.factor(data.env[,1])
#set distclass to factor
data.env[,2]=as.factor(data.env[,2])
data.env[,2]
is.factor(data.env[,2])
data.mds<-metaMDS(comm=data1,distance="euclidean",trace=FALSE)
data.mds
#function "envfit" fits environmental vectors or factors onto an ordination.
#requires ordination plot first before plot(fit)
fit<-envfit(data.mds,data.env,perm=1000)
fit
#plotMDS
plot(data.mds,type="t",main="NMDS using Euclidean Distance")
#plot environmental loadings
plot(fit)
data<-read.csv("F:/LPI/Output/AprilLPICommon.csv",header=TRUE, row.names=1)
data
View(data)
View(data)
data.dis<-vegdist(data)
data.dis
data.mds<-isoMDS(data.dis)
#--------stressplot and ordiplot----------
stressplot(data.mds,data.dis)
ordiplot(data.mds,type="t")
data.env <- read.csv("F:/Soils/SoilEnvironmentaldataApril.csv",header=TRUE, row.names=1)
View(data.env)
data.env<-data.env$DepthClass|data.env$PedonDepth
data.env <- read.csv("F:/Soils/SoilEnvironmentaldataApril.csv",header=TRUE, row.names=1)
data.env<-data.env$DepthClass&data.env$PedonDepth
data.env <- read.csv("F:/Soils/SoilEnvironmentaldataApril.csv",header=TRUE, row.names=1)
data.env<-data.env$DepthClass+data.env$PedonDepth
data.env <- read.csv("F:/Soils/SoilEnvironmentaldataApril.csv",header=TRUE, row.names=1)
data.env<-c(data.env$DepthClass,data.env$PedonDepth)
data.env <- read.csv("F:/Soils/SoilEnvironmentaldataApril.csv",header=TRUE, row.names=1)
data.env<-data.env[,c(6,44)]
data.env
View(data.env)
#set distclass to factor
data.env[,2]=as.factor(data.env[,2])
data.env[,2]
is.factor(data.env[,2])
data.mds<-metaMDS(comm=data1,distance="euclidean",trace=FALSE)
data.mds
data.mds<-metaMDS(comm=data,distance="euclidean",trace=FALSE)
data.mds
#function "envfit" fits environmental vectors or factors onto an ordination.
#requires ordination plot first before plot(fit)
fit<-envfit(data.mds,data.env,perm=1000)
fit
#plotMDS
plot(data.mds,type="t",main="NMDS using Euclidean Distance")
#plot environmental loadings
plot(fit)
#install.packages("vegan")
library(vegan)
library(MASS)
#---NMDS Script for Plant Community Ecology--------
data<-read.csv("F:/LPI/Output/AprilLPICommon.csv",header=TRUE, row.names=1)
data
#calculate dissimilarities, use function "vegdist"in VEGAN package
data.dis<-vegdist(data)
data.dis
#calculate isoMDS function, use isoDS function in MASS package
data.mds<-isoMDS(data.dis)
#--------stressplot and ordiplot----------
stressplot(data.mds,data.dis)
ordiplot(data.mds,type="t")
#read in environmental data
data.env <- read.csv("F:/Soils/SoilEnvironmentaldataApril.csv",header=TRUE, row.names=1)
data.env<-data.env[,c(6,44)]
data.env
#set distclass to factor
data.env[,1]=as.factor(data.env[,1])
data.env[,1]
is.factor(data.env[,1])
#set distclass to factor
data.env[,2]=as.factor(data.env[,2])
data.env[,2]
is.factor(data.env[,2])
data.mds<-metaMDS(comm=data,distance="euclidean",trace=FALSE)
data.mds
#function "envfit" fits environmental vectors or factors onto an ordination.
#requires ordination plot first before plot(fit)
fit<-envfit(data.mds,data.env,perm=1000)
fit
#plotMDS
plot(data.mds,type="t",main="NMDS using Euclidean Distance")
#plot environmental loadings
plot(fit)
#install.packages("vegan")
library(vegan)
library(MASS)
#---NMDS Script for Plant Community Ecology--------
data<-read.csv("F:/LPI/Output/AprilLPICommon.csv",header=TRUE, row.names=1)
data
#calculate dissimilarities, use function "vegdist"in VEGAN package
data.dis<-vegdist(data)
data.dis
#calculate isoMDS function, use isoDS function in MASS package
data.mds<-isoMDS(data.dis)
#--------stressplot and ordiplot----------
stressplot(data.mds,data.dis)
ordiplot(data.mds,type="t")
#read in environmental data
data.env <- read.csv("F:/Soils/SoilEnvironmentaldataApril.csv",header=TRUE, row.names=1)
data.env<-data.env[,c(44)]
data.env
data.env[,1]=as.factor(data.env[,1])
data.env[,1]
is.factor(data.env[,1])
data.env <- read.csv("F:/Soils/SoilEnvironmentaldataApril.csv",header=TRUE, row.names=1)
View(data.env)
data.env<-data.env[,c(43,44)]
data.env
#set distclass to factor
data.env[,1]=as.factor(data.env[,1])
data.env[,1]
is.factor(data.env[,1])
#set distclass to factor
data.env[,2]=as.factor(data.env[,2])
data.env[,2]
is.factor(data.env[,2])
data.mds<-metaMDS(comm=data,distance="euclidean",trace=FALSE)
#function "envfit" fits environmental vectors or factors onto an ordination.
#requires ordination plot first before plot(fit)
data.mds
fit<-envfit(data.mds,data.env,perm=1000)
fit
#plotMDS
plot(data.mds,type="t",main="NMDS using Euclidean Distance")
#plot environmental loadings
plot(fit)
#install.packages("vegan")
library(vegan)
library(MASS)
#---NMDS Script for Plant Community Ecology--------
data<-read.csv("F:/LPI/Output/AprilLPICommon.csv",header=TRUE, row.names=1)
data
#calculate dissimilarities, use function "vegdist"in VEGAN package
data.dis<-vegdist(data)
data.dis
#calculate isoMDS function, use isoDS function in MASS package
data.mds<-isoMDS(data.dis)
#--------stressplot and ordiplot----------
stressplot(data.mds,data.dis)
ordiplot(data.mds,type="t")
#read in environmental data
data.env <- read.csv("F:/Soils/SoilEnvironmentaldataApril.csv",header=TRUE, row.names=1)
data.env<-data.env[,c(44,44)]
data.env
#set distclass to factor
data.env[,1]=as.factor(data.env[,1])
data.env[,1]
is.factor(data.env[,1])
#set distclass to factor
data.env[,2]=as.factor(data.env[,2])
data.env[,2]
is.factor(data.env[,2])
data.mds<-metaMDS(comm=data,distance="euclidean",trace=FALSE)
data.mds
#function "envfit" fits environmental vectors or factors onto an ordination.
#requires ordination plot first before plot(fit)
fit<-envfit(data.mds,data.env,perm=1000)
fit
#plotMDS
plot(data.mds,type="t",main="NMDS using Euclidean Distance")
#plot environmental loadings
plot(fit)
